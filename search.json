[{"path":[]},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement @nanx.. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://nanx.me/enpls/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla‚Äôs code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://nanx.me/enpls/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to enpls","title":"Contributing to enpls","text":"üëçüéâ First , thanks taking time contribute! üéâüëç contribute project : Filing bug report feature request issue. Suggesting change via pull request.","code":""},{"path":"https://nanx.me/enpls/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing to enpls","text":"file issue possible bug, please try include: Relevant package versions Necessary code data reproduce issue","code":""},{"path":"https://nanx.me/enpls/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull Requests","title":"Contributing to enpls","text":"suggest change via pull requests, please: Fork repository GitHub account. Clone forked repository local machine, make changes. Commit push changes GitHub. Create pull request.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright ¬© 2007 Free Software Foundation, Inc.¬†<http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program‚Äìmake sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers‚Äô authors‚Äô protection, GPL clearly explains warranty free software. users‚Äô authors‚Äô sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users‚Äô freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"‚ÄúLicense‚Äù refers version 3 GNU General Public License. ‚ÄúCopyright‚Äù also means copyright-like laws apply kinds works, semiconductor masks. ‚ÄúProgram‚Äù refers copyrightable work licensed License. licensee addressed ‚Äú‚Äù. ‚ÄúLicensees‚Äù ‚Äúrecipients‚Äù may individuals organizations. ‚Äúmodify‚Äù work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called ‚Äúmodified version‚Äù earlier work work ‚Äúbased ‚Äù earlier work. ‚Äúcovered work‚Äù means either unmodified Program work based Program. ‚Äúpropagate‚Äù work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. ‚Äúconvey‚Äù work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays ‚ÄúAppropriate Legal Notices‚Äù extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"‚Äúsource code‚Äù work means preferred form work making modifications . ‚ÄúObject code‚Äù means non-source form work. ‚ÄúStandard Interface‚Äù means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. ‚ÄúSystem Libraries‚Äù executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. ‚ÄúMajor Component‚Äù, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . ‚ÄúCorresponding Source‚Äù work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work‚Äôs System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users‚Äô Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work‚Äôs users, third parties‚Äô legal rights forbid circumvention technological measures.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program‚Äôs source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 ‚Äúkeep intact notices‚Äù. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called ‚Äúaggregate‚Äù compilation resulting copyright used limit access legal rights compilation‚Äôs users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. ‚ÄúUser Product‚Äù either (1) ‚Äúconsumer product‚Äù, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, ‚Äúnormally used‚Äù refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. ‚ÄúInstallation Information‚Äù User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"‚ÄúAdditional permissions‚Äù terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered ‚Äúrestrictions‚Äù within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. ‚Äúentity transaction‚Äù transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party‚Äôs predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"‚Äúcontributor‚Äù copyright holder authorizes use License Program work Program based. work thus licensed called contributor‚Äôs ‚Äúcontributor version‚Äù. contributor‚Äôs ‚Äúessential patent claims‚Äù patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, ‚Äúcontrol‚Äù includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor‚Äôs essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, ‚Äúpatent license‚Äù express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). ‚Äúgrant‚Äù patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. ‚ÄúKnowingly relying‚Äù means actual knowledge , patent license, conveying covered work country, recipient‚Äôs use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license ‚Äúdiscriminatory‚Äù include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others‚Äô Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License ‚Äúlater version‚Äù applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy‚Äôs public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM ‚Äú‚Äù WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://nanx.me/enpls/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least ‚Äúcopyright‚Äù line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program‚Äôs commands might different; GUI interface, use ‚Äúbox‚Äù. also get employer (work programmer) school, , sign ‚Äúcopyright disclaimer‚Äù program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A Brief Introduction to enpls","text":"enpls package offers algorithmic framework measuring feature importance, detecting outliers, ensemble modeling based (sparse) partial least squares regression. key functions included package listed table . Next, use data (Wang et al. 2015) demonstrate general workflow enpls. dataset contains 1,000 compounds, characterized 80 molecular descriptors. response octanol/water partition coefficient pH 7.4 (logD7.4). Let‚Äôs load data take look :","code":"library(\"enpls\") library(\"ggplot2\")  data(\"logd1k\") x <- logd1k$x y <- logd1k$y head(x)[, 1:5] #>   BalabanJ  BertzCT   Chi0  Chi0n  Chi0v #> 1    1.949  882.760 16.845 13.088 13.088 #> 2    1.970  781.936 15.905 13.204 14.021 #> 3    2.968  343.203  9.845  7.526  7.526 #> 4    2.050 1133.679 19.836 15.406 15.406 #> 5    2.719  437.346 12.129  9.487  9.487 #> 6    2.031  983.304 19.292 15.289 15.289 head(y) #> [1] -0.96 -0.92 -0.90 -0.83 -0.82 -0.79"},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model fitting","title":"A Brief Introduction to enpls","text":"fit ensemble sparse partial least squares data, model complexity usually reduced vanilla partial least squares build model.  used fitted model predict training data plotted predicted values true values. parameter ratio decides sampling ratio Monte-Carlo run; maxcomp controls maximum number components included within model; reptimes sets times Monte-Carlo resampling, recommend setting large number (500 default). One common parameter functions enpls parallel, controls number CPU cores use want train models parallel.","code":"set.seed(42) fit <- enspls.fit(x, y, ratio = 0.7, reptimes = 20, maxcomp = 3) y.pred <- predict(fit, newx = x)  df <- data.frame(y, y.pred) ggplot(df, aes_string(x = \"y\", y = \"y.pred\")) +   geom_abline(slope = 1, intercept = 0, colour = \"darkgrey\") +   geom_point(size = 3, shape = 1, alpha = 0.8) +   coord_fixed(ratio = 1) +   xlab(\"Observed Response\") +   ylab(\"Predicted Response\") #> Warning: `aes_string()` was deprecated in ggplot2 3.0.0. #> ‚Ñπ Please use tidy evaluation idioms with `aes()`. #> ‚Ñπ See also `vignette(\"ggplot2-in-packages\")` for more information. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"cross-validation","dir":"Articles","previous_headings":"","what":"Cross validation","title":"A Brief Introduction to enpls","text":"K-fold cross validation traditional way measure empirical predictive performance model. can use function cv.enpls() cv.enspls() perform kk-fold cross validation ensemble (sparse) partial least squares model. Since parameters (number components level sparsity) automatically tuned model enpls, cross validation used see certain combinations parameters (specified ratio, maxcomp, alpha, etc.) can produce ensemble models better performance.  returned object gives three model performance evaluation metrics ensemble model: RMSE, MAE, R2R^2. also plotted predicted values test fold true response.","code":"cv.fit <- cv.enspls(x, y,   nfolds = 5, ratio = 0.7,   reptimes = 10, maxcomp = 3, verbose = FALSE ) cv.fit #> Cross Validation Result for Ensemble Sparse Partial Least Squares #> --- #> RMSE = 1.1410 #> MAE = 0.913153 #> Rsquare = 0.587959 plot(cv.fit)"},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"feature-importance","dir":"Articles","previous_headings":"","what":"Feature importance","title":"A Brief Introduction to enpls","text":"measure feature importance, simply use enpls.fs() enspls.fs():   top 10 important features ranked . boxplot gives additional information coefficient stability feature. can see feature TPSA (Topological Polar Surface Area) different pattern compared others: large effect size, effect sizes also large variance. indicates TPSA important predicting logD7.4. However, importance may vary different subsets samples.","code":"fs <- enspls.fs(x, y, ratio = 0.7, reptimes = 20, maxcomp = 3) print(fs, nvar = 10) #> Variable Importance by Ensemble Sparse Partial Least Squares #> --- #>                     Importance #> Chi1n                 29.48614 #> NumValenceElectrons   26.78683 #> HeavyAtomCount        23.28745 #> Chi1                  21.39361 #> LabuteASA             21.27471 #> SlogP_VSA2            20.93239 #> Chi0n                 20.54714 #> SlogP_VSA5            19.89059 #> MolMR                 19.82387 #> SMR_VSA5              19.19199 plot(fs, nvar = 10) plot(fs, type = \"boxplot\", nvar = 10)"},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"outlier-detection","dir":"Articles","previous_headings":"","what":"Outlier detection","title":"A Brief Introduction to enpls","text":"using information prediction error distribution sample produced many models, can measure responses particular samples harder predict others. measurements can help identifying outliers dataset. Thus, can removed get us ‚Äúclean‚Äù dataset actual modeling. done enpls.od(), enspls.od() easily:   two plots showed several samples dataset might outlier candidates, based two different criterions. samples area plots represent different types outliers.","code":"od <- enspls.od(x, y, ratio = 0.8, reptimes = 20, maxcomp = 3) plot(od, prob = 0.05) plot(od, criterion = \"sd\", sdtimes = 2)"},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"applicability-domain-evaluation","dir":"Articles","previous_headings":"","what":"Applicability domain evaluation","title":"A Brief Introduction to enpls","text":"Model applicability domain measures well predictive model (PLS/Sparse PLS model) built training set performs external test sets. certain type perturbation (bootstrapping, jackknifing) applied samples variables training set, get many different predictions samples test sets (course, including training set) using sub-model built perturbated training set. general evaluation strategy design comparisons analyzed Kaneko Funatsu (2014). functions enpls.ad() enspls.ad() help us evaluate model applicability domain. constructed two ‚Äúpseudo‚Äù test sets original logd1k dataset demonstration:  Additionally, using get interactive plot, help us better explore model applicability domain supporting zooming-/ inspecting sample point represents interactively. interactive plot based plotly, requires HTML viewer correctly rendered.","code":"# remove low variance variables x <- x[, -c(17, 52, 59)]  # make training set x.tr <- x[1:500, ] y.tr <- y[1:500]  # make two test sets x.te <- list(   \"test.1\" = x[501:700, ],   \"test.2\" = x[701:800, ] ) y.te <- list(   \"test.1\" = y[501:700],   \"test.2\" = y[701:800] )  ad <- enspls.ad(x.tr, y.tr, x.te, y.te,   maxcomp = 3, space = \"variable\", method = \"mc\",   ratio = 0.8, reptimes = 50 ) plot(ad) plot(ad, type = \"interactive\")"},{"path":"https://nanx.me/enpls/articles/enpls.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"A Brief Introduction to enpls","text":"Ensemble learning approaches powerful improving base learner‚Äôs predictive performance also capable accomplishing model diagnostic tasks, measuring importance features. interesting see ideas applied relevant topics facilitate predictive modeling tasks.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nan Xiao. Author, maintainer. Dong-Sheng Cao. Author. Miao-Zhu Li. Author. Qing-Song Xu. Author.","code":""},{"path":"https://nanx.me/enpls/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xiao N, Cao D, Li M, Xu Q (2025). enpls: Ensemble Partial Least Squares Regression. R package version 6.1.1, https://nanx./enpls/.","code":"@Manual{,   title = {enpls: Ensemble Partial Least Squares Regression},   author = {Nan Xiao and Dong-Sheng Cao and Miao-Zhu Li and Qing-Song Xu},   year = {2025},   note = {R package version 6.1.1},   url = {https://nanx.me/enpls/}, }"},{"path":"https://nanx.me/enpls/index.html","id":"enpls-","dir":"","previous_headings":"","what":"Ensemble Partial Least Squares Regression","title":"Ensemble Partial Least Squares Regression","text":"enpls offers algorithmic framework measuring feature importance, outlier detection, model applicability domain evaluation, ensemble predictive modeling (sparse) partial least squares regressions.","code":""},{"path":"https://nanx.me/enpls/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ensemble Partial Least Squares Regression","text":"can install enpls CRAN: try development version GitHub: See vignette(\"enpls\") quick-start guide.","code":"install.packages(\"enpls\") remotes::install_github(\"nanxstats/enpls\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://nanx.me/enpls/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Ensemble Partial Least Squares Regression","text":"contribute project, please take look Contributing Guidelines first. Please note RECA project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://nanx.me/enpls/reference/alkanes.html","id":null,"dir":"Reference","previous_headings":"","what":"Methylalkanes Retention Index Dataset ‚Äî alkanes","title":"Methylalkanes Retention Index Dataset ‚Äî alkanes","text":"Methylalkanes retention index dataset Liang et, al.","code":""},{"path":"https://nanx.me/enpls/reference/alkanes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methylalkanes Retention Index Dataset ‚Äî alkanes","text":"","code":"data(\"alkanes\")"},{"path":"https://nanx.me/enpls/reference/alkanes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Methylalkanes Retention Index Dataset ‚Äî alkanes","text":"list 2 components: x - data frame 207 rows (samples) 21 columns (predictors) y - numeric vector length 207 (response)","code":""},{"path":"https://nanx.me/enpls/reference/alkanes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methylalkanes Retention Index Dataset ‚Äî alkanes","text":"dataset contains 207 methylalkanes' chromatographic retention index (y) modeled 21 molecular descriptors (x). Molecular descriptor types: Chi path, cluster path/cluster indices Kappa shape indices E-state indices Molecular electricity distance vector index","code":""},{"path":"https://nanx.me/enpls/reference/alkanes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Methylalkanes Retention Index Dataset ‚Äî alkanes","text":"Yi-Zeng Liang, Da-Lin Yuan, Qing-Song Xu, Olav Martin Kvalheim. \"Modeling based subspace orthogonal projections QSAR QSPR research.\" Journal Chemometrics 22, . 1 (2008): 23‚Äì35.","code":""},{"path":"https://nanx.me/enpls/reference/alkanes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methylalkanes Retention Index Dataset ‚Äî alkanes","text":"","code":"data(\"alkanes\") str(alkanes) #> List of 2 #>  $ x:'data.frame':\t207 obs. of  21 variables: #>   ..$ Chi.P.0 : num [1:207] -15.9 -15.9 -14.5 -14.5 -13.1 ... #>   ..$ Chi.P.1 : num [1:207] -11.03 -10.99 -10.03 -9.99 -9.03 ... #>   ..$ Chi.P.2 : num [1:207] -8 -8.23 -7.29 -7.52 -6.58 ... #>   ..$ Chi.P.3 : num [1:207] -5.95 -5.58 -5.45 -5.08 -4.95 ... #>   ..$ Chi.P.4 : num [1:207] 0.01439 -0.02343 0.00314 -0.03138 -0.0056 ... #>   ..$ Chi.P.5 : num [1:207] -4.1 -4.13 -3.74 -3.78 -3.39 ... #>   ..$ Chi.C.3 : num [1:207] -2.81 -2.84 -2.56 -2.59 -2.31 ... #>   ..$ Chi.PC.4: num [1:207] -0.605 -0.401 -0.605 -0.401 -0.605 ... #>   ..$ Kappa.1 : num [1:207] -3.16 -3.14 -3.13 -3.1 -3.11 ... #>   ..$ Kappa.2 : num [1:207] -29.4 -29.5 -26.4 -26.5 -23.5 ... #>   ..$ Kappa.3 : num [1:207] -1.17 -1.12 -1.18 -1.12 -1.18 ... #>   ..$ Kappa.4 : num [1:207] -22.2 -22.2 -20.2 -20.2 -18.2 ... #>   ..$ Estate.1: num [1:207] -20.1 -20.1 -18.1 -18.1 -16.1 ... #>   ..$ Estate.2: num [1:207] -18.2 -20.4 -16.2 -18.4 -14.3 ... #>   ..$ Estate.3: num [1:207] -2.51 -2.51 -2.4 -2.4 -2.26 ... #>   ..$ MEDV.11 : num [1:207] 1.263 0.1115 1.1942 0.0126 1.1586 ... #>   ..$ MEDV.12 : num [1:207] -11.61 -9.01 -11.1 -8.4 -10.77 ... #>   ..$ MEDV.13 : num [1:207] -2.109 -0.291 -2.115 -0.292 -2.122 ... #>   ..$ MEDV.22 : num [1:207] -61.9 -64 -55.5 -57.6 -48.8 ... #>   ..$ MEDV.23 : num [1:207] -1.478 -0.71 -1.499 -0.703 -1.512 ... #>   ..$ MEDV.33 : num [1:207] -0.000609 -0.000609 -0.000609 -0.000609 -0.000609 ... #>  $ y: num [1:207] -2125 -2118 -1925 -1919 -1725 ..."},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"K-fold cross validation ensemble partial least squares regression.","code":""},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"","code":"cv.enpls(x, y, nfolds = 5L, verbose = TRUE, ...)"},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"x Predictor matrix. y Response vector. nfolds Number cross-validation folds, default 5. Note CV folds ensemble PLS model, individual PLS models. control CV folds single PLS models, please use argument cvfolds. verbose Shall print progress cross-validation? ... Arguments passed enpls.fit.","code":""},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"list containing: ypred - matrix containing two columns: real y predicted y residual - cross validation result (y.pred - y.real) RMSE - RMSE MAE - MAE Rsquare - Rsquare","code":""},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"maximize probablity observation can selected test set (thus prediction uncertainty can measured), please try setting large reptimes.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/cv.enpls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross Validation for Ensemble Partial Least Squares Regression ‚Äî cv.enpls","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) cvfit <- cv.enpls(x, y, reptimes = 10) #> Beginning fold 1  #> Beginning fold 2  #> Beginning fold 3  #> Beginning fold 4  #> Beginning fold 5  print(cvfit) #> Cross Validation Result for Ensemble Partial Least Squares #> --- #> RMSE = 3.6716 #> MAE = 2.511028 #> Rsquare = 0.999960 plot(cvfit)"},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"K-fold cross validation ensemble sparse partial least squares regression.","code":""},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"","code":"cv.enspls(x, y, nfolds = 5L, verbose = TRUE, ...)"},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"x Predictor matrix. y Response vector. nfolds Number cross-validation folds, default 5. Note CV folds ensemble sparse PLS model, individual sparse PLS models. control CV folds single sparse PLS models, please use argument cvfolds. verbose Shall print progress cross-validation? ... Arguments passed enspls.fit.","code":""},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"list containing: ypred - matrix containing two columns: real y predicted y residual - cross validation result (y.pred - y.real) RMSE - RMSE MAE - MAE Rsquare - Rsquare","code":""},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"maximize probablity observation can selected test set (thus prediction uncertainty can measured), please try setting large reptimes.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/cv.enspls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross Validation for Ensemble Sparse Partial Least Squares Regression ‚Äî cv.enspls","text":"","code":"# This example takes one minute to run if (FALSE) { # \\dontrun{ data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) cvfit <- cv.enspls(x, y, reptimes = 10) print(cvfit) plot(cvfit) } # }"},{"path":"https://nanx.me/enpls/reference/enpls-package.html","id":null,"dir":"Reference","previous_headings":"","what":"enpls: Ensemble Partial Least Squares Regression ‚Äî enpls-package","title":"enpls: Ensemble Partial Least Squares Regression ‚Äî enpls-package","text":"algorithmic framework measuring feature importance, outlier detection, model applicability domain evaluation, ensemble predictive modeling (sparse) partial least squares regressions.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enpls-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"enpls: Ensemble Partial Least Squares Regression ‚Äî enpls-package","text":"Maintainer: Nan Xiao @nanx.(ORCID) Authors: Dong-Sheng Cao Miao-Zhu Li miaozhu.li@duke.edu Qing-Song Xu qsxu@csu.edu.cn","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.core.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"core fitting function for enpls.ad ‚Äî enpls.ad.core.fit","title":"core fitting function for enpls.ad ‚Äî enpls.ad.core.fit","text":"select best ncomp cross-validation use fit complete training set. scale = TRUE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.core.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core fitting function for enpls.ad ‚Äî enpls.ad.core.fit","text":"","code":"enpls.ad.core.fit(trainingset, maxcomp, cvfolds)"},{"path":"https://nanx.me/enpls/reference/enpls.ad.core.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core fitting function for enpls.ad ‚Äî enpls.ad.core.fit","text":"fitted plsr object","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.core.pred.html","id":null,"dir":"Reference","previous_headings":"","what":"core prediction function for enpls.ad ‚Äî enpls.ad.core.pred","title":"core prediction function for enpls.ad ‚Äî enpls.ad.core.pred","text":"core prediction function enpls.ad","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.core.pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core prediction function for enpls.ad ‚Äî enpls.ad.core.pred","text":"","code":"enpls.ad.core.pred(model, testset)"},{"path":"https://nanx.me/enpls/reference/enpls.ad.core.pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core prediction function for enpls.ad ‚Äî enpls.ad.core.pred","text":"error vector predicted real response","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"Model applicability domain evaluation ensemble partial least squares.","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"","code":"enpls.ad(   x,   y,   xtest,   ytest,   maxcomp = NULL,   cvfolds = 5L,   space = c(\"sample\", \"variable\"),   method = c(\"mc\", \"boot\"),   reptimes = 500L,   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"x Predictor matrix training set. y Response vector training set. xtest List, -th component -th test set's predictor matrix (see example code ). ytest List, -th component -th test set's response vector (see example code ). maxcomp Maximum number components included within model. specified, use maximum number possible (considering cross-validation special cases n smaller p). cvfolds Number cross-validation folds used model automatic parameter selection, default 5. space Space apply resampling method. Can sample space (\"sample\") variable space (\"variable\"). method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". reptimes Number models build Monte-Carlo resampling bootstrapping. ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"list containing: tr.error.mean - absolute mean prediction error training set tr.error.median - absolute median prediction error training set tr.error.sd - prediction error sd training set tr.error.matrix - raw prediction error matrix training set te.error.mean - list absolute mean prediction error test set(s) te.error.median - list absolute median prediction error test set(s) te.error.sd - list prediction error sd test set(s) te.error.matrix - list raw prediction error matrix test set(s)","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"Note space = \"variable\", method \"mc\", since bootstrapping variable space create duplicated variables, cause problems.","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enpls.ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enpls.ad","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  # training set x.tr <- x[1:100, ] y.tr <- y[1:100]  # two test sets x.te <- list(   \"test.1\" = x[101:150, ],   \"test.2\" = x[151:207, ] ) y.te <- list(   \"test.1\" = y[101:150],   \"test.2\" = y[151:207] )  set.seed(42) ad <- enpls.ad(   x.tr, y.tr, x.te, y.te,   space = \"variable\", method = \"mc\",   ratio = 0.9, reptimes = 50 ) print(ad) #> Model Applicability Domain Evaluation by ENPLS #> --- #> Absolute mean prediction error for each training set sample: #>   [1]  1.15659310  0.37135659  0.18687002  1.17664393  0.12373621  1.00392170 #>   [7]  0.04434202  0.63828656  0.43718385  0.64726539  0.09051787  0.48966778 #>  [13]  3.62308256  0.52948567  0.25251989  3.32711614  0.95156004  0.14091017 #>  [19]  0.85464231  1.29109538  0.02019387  0.32245514  0.62770096  0.25487849 #>  [25]  0.46810576  0.67759188  0.25457816  0.69278642  0.70787689  0.72829569 #>  [31]  1.57186733  0.76802915  1.31022753  0.72248475  0.85636595  1.22138075 #>  [37]  0.45068514  1.40704563  1.21935389  1.11988622  2.19718455  2.45031644 #>  [43]  1.49666523  1.08541858  1.52751554  1.68620203  0.74572579  0.87057898 #>  [49]  2.03595023  1.89786907  1.68599205  0.05692682  3.87440488  0.97422048 #>  [55]  0.40778747  0.94140304  2.54484306  2.66435962  1.66527372  0.38685260 #>  [61]  0.92713783  3.58843757 14.16899449  5.94141096  0.84436844  1.12210481 #>  [67]  2.29468141  1.39277186  1.44998603  2.38993959  0.59566790  1.09886862 #>  [73]  1.27593299  2.05666549  1.63679051  2.12750518  0.27833880  1.85919482 #>  [79]  1.80079825  0.74364023  1.06912418  0.38683360  5.70973358  0.35817828 #>  [85]  2.67017284  0.71305049  2.17485482  2.01172042  1.54421445  0.26828780 #>  [91]  1.23313227  3.79410089  2.79472535  4.15099941  6.49989050  1.74711076 #>  [97]  3.54480005  1.57668886  1.79632988  1.09721925 #> --- #> Prediction error SD for each training set sample: #>   [1] 0.6723203 0.9925861 0.7916684 0.5353981 0.6833493 0.3750142 0.5384201 #>   [8] 0.4394781 0.4478961 0.3115000 0.2965013 0.6564925 0.8581624 0.6408359 #>  [15] 0.2112281 0.7276103 0.4012712 0.2924988 0.5139599 0.4312994 0.3225841 #>  [22] 0.2810618 0.3927624 0.3747409 0.2372358 0.4391011 0.4310893 0.2127917 #>  [29] 0.4711463 0.4231286 0.3089803 0.2203195 0.7273629 0.5681682 0.1253907 #>  [36] 0.1542993 0.5196908 0.4079485 0.3314376 0.2223870 0.6052788 0.2461725 #>  [43] 0.3104808 0.6333215 0.4917393 0.5680786 0.7958397 0.3688654 0.6318733 #>  [50] 0.4057159 0.3159804 0.3805643 0.7569301 0.3793449 0.1648608 0.3351091 #>  [57] 0.4672745 0.8267976 0.4487075 0.3364956 0.4968275 0.2133814 0.8887981 #>  [64] 0.2061471 0.2362712 0.5270498 0.2774651 0.3162993 0.5402216 0.4409003 #>  [71] 0.2945032 0.4952080 0.2839455 0.5987966 0.3229918 0.3881967 0.4959163 #>  [78] 0.5784472 0.2844325 0.8621228 0.4714674 0.1963147 0.2992360 0.4816676 #>  [85] 0.1823169 0.4285107 0.1955258 0.5412362 0.2689507 0.8016830 0.3348107 #>  [92] 0.4141135 0.6989277 0.5368645 0.2533462 0.1989506 0.3307565 0.7953010 #>  [99] 0.2301105 0.5033743 #> --- #> Absolute mean prediction error for each test set sample: #> [[1]] #>  [1]  1.6168531  0.5129803  1.6250825  0.0203619  4.3383400  0.1106109 #>  [7]  0.8148653  1.9913556  3.2096770  2.2171926  2.5990837  2.6064094 #> [13]  3.3267257  1.5533525  0.2446492  2.7310229  3.3531130  0.6680140 #> [19]  1.9791727 12.2374458 13.4166499 11.1587762 14.5567185  8.4080822 #> [25] 10.1272429 10.6439947 13.7889019 12.3442711 12.6224187  7.7835221 #> [31]  4.2295455 12.6785692 12.9451491 13.7247623  5.0281196 13.6627983 #> [37] 12.7484447  5.1156233  3.4747344 13.4024321  6.8780031 12.3931679 #> [43]  5.5321643  3.3919701 13.4337748  8.3609657  4.5468609  3.7926681 #> [49]  8.4599080  7.8685360 #>  #> [[2]] #>  [1]  4.3639558  3.3964642 12.0544328 11.3324274  1.2463920  3.4669273 #>  [7]  2.2877420  8.5348824  2.0397521  0.3601160 38.9955576 33.2649875 #> [13] 37.2145440 33.8217957 37.3135529 31.7305484 42.5682817 37.0789591 #> [19] 25.5740117 28.1372472 31.0069656 25.5649259 27.7147261 37.1938925 #> [25] 33.1063600 24.4682094 22.2051201  0.2364423  1.0464166  3.5595735 #> [31]  2.7676125  2.3996208  1.7344534  0.7284600  6.1337782  1.5540024 #> [37]  5.0926006  5.2653924  0.7332907  1.3058880  4.0156528  1.0809554 #> [43]  4.9419237  0.7271527  3.9547319 16.5062741  3.9317236 15.0340504 #> [49]  3.5288351  7.1680305 13.2197061 11.5264492 12.0580371 13.5543787 #> [55]  8.0233824 13.7150370 12.3711093 #>  #> --- #> Prediction error SD for each test set sample: #> [[1]] #>  [1]   0.4797399   0.9133170   0.2210427   0.4467299   0.5539222   0.7202601 #>  [7]   0.3420715   0.4083844   0.7906344   1.3627053   0.8435695   0.6415281 #> [13]   0.8357520   0.9553027   0.8306586   0.8760966   0.6962081   1.5891505 #> [19]   1.0981642  12.2938695  12.2441362  11.7821422  11.3326666   9.8410896 #> [25]   7.9849343 376.9162082  11.1413626  10.5392662  10.4817856  10.3927164 #> [31]  11.0753343   9.4622277  10.1555745  10.7601625  10.8400841  10.0669724 #> [37]  10.0677476  10.2535897  10.6672633   9.0113683  10.2352971  10.4262657 #> [43]  10.3678646  10.4748206   9.7797714  10.3870910   9.8668577  10.2321430 #> [49]  10.0652508   9.5121937 #>  #> [[2]] #>  [1]  10.1638483  10.1759666   9.5177953   9.5385654   9.5055823   9.9554471 #>  [7]  10.0826334   8.5796991   9.4517702   9.3947894  30.8269969  26.2958694 #> [13]  26.7640324  28.8511638  27.9602633  28.0373320  28.6187614  29.0240439 #> [19]  27.9815166 359.7986836  28.5880154  28.7358163  27.3902084  27.9664479 #> [25]  28.3790335  27.1663120  27.9724002   0.2617093   1.4992584   1.3071739 #> [31]   0.5646261   0.4787582   0.3340600   0.6052250   0.7380154   0.3165511 #> [37]   0.4492955 384.6771020   0.2690984   0.4416264   0.8652585   0.1814238 #> [43]   0.3736143   0.3488580   0.9745984  11.3696246  10.2310526  11.3901862 #> [49]  10.9868325  10.5839028  11.0100009   8.9886192  10.0022008  10.6591029 #> [55]  11.0407728  10.8211976  10.5118858 #>  plot(ad)  # the interactive plot requires a HTML viewer if (FALSE) { # \\dontrun{ plot(ad, type = \"interactive\") } # }"},{"path":"https://nanx.me/enpls/reference/enpls.fit.core.html","id":null,"dir":"Reference","previous_headings":"","what":"core function for enpls.fit ‚Äî enpls.fit.core","title":"core function for enpls.fit ‚Äî enpls.fit.core","text":"select best ncomp cross-validation use fit complete training set. scale = TRUE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fit.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core function for enpls.fit ‚Äî enpls.fit.core","text":"","code":"enpls.fit.core(plsdf, maxcomp, cvfolds)"},{"path":"https://nanx.me/enpls/reference/enpls.fit.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core function for enpls.fit ‚Äî enpls.fit.core","text":"coefficients","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","title":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","text":"Ensemble partial least squares regression.","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","text":"","code":"enpls.fit(   x,   y,   maxcomp = NULL,   cvfolds = 5L,   reptimes = 500L,   method = c(\"mc\", \"boot\"),   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enpls.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","text":"x Predictor matrix. y Response vector. maxcomp Maximum number components included within model. specified, use maximum number possible (considering cross-validation special cases n smaller p). cvfolds Number cross-validation folds used model automatic parameter selection, default 5. reptimes Number models build Monte-Carlo resampling bootstrapping. method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","text":"list containing partial least squares model objects.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enpls.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Partial Least Squares Regression ‚Äî enpls.fit","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) fit <- enpls.fit(x, y, reptimes = 50) print(fit) #> Coefficients of the Models by Ensemble Partial Least Squares #> --- #>                      [,1]          [,2]          [,3]          [,4] #> (Intercept)  1.246444e-02 -7.838445e-02     0.1316595  6.878848e-02 #> Chi.P.0     -3.970674e+02 -4.357396e+02  -691.3940195 -3.602751e+02 #> Chi.P.1     -7.593150e+02 -1.141336e+03 -1140.1003915 -5.130676e+02 #> Chi.P.2      2.687687e+03  3.807994e+03  3748.6881240  2.059388e+03 #> Chi.P.3      1.882890e+03  2.207855e+03  2008.2990357  1.437531e+03 #> Chi.P.4     -3.388155e+00 -3.027612e+00    -4.6614957 -8.653080e+00 #> Chi.P.5      3.772035e+02  3.544087e+02   375.2991534  2.652187e+02 #> Chi.C.3      4.953426e+01  2.936776e+01    44.3520782  2.936431e+01 #> Chi.PC.4    -1.931512e+02 -3.072224e+02  -216.6789119 -1.957108e+02 #> Kappa.1      3.178545e+03  3.646449e+03  2756.1404443  2.864882e+03 #> Kappa.2     -7.661953e+02 -1.368677e+03 -1127.1193547 -6.358414e+02 #> Kappa.3     -2.763624e+03 -3.341173e+03 -2675.6013255 -2.393720e+03 #> Kappa.4     -3.849355e+02 -6.247577e+02  -654.2501987 -3.045489e+02 #> Estate.1    -3.552818e+01  9.023558e+00   -67.7284861 -4.394761e+01 #> Estate.2    -3.318723e+01 -5.575609e+01     1.3683861  1.323503e+01 #> Estate.3     1.750400e+01  1.316610e+01     9.9482915  5.877328e+00 #> MEDV.11     -4.823338e+02 -5.157654e+02  -431.1275335 -4.194952e+02 #> MEDV.12     -1.574018e+03 -1.804298e+03 -1422.9805048 -1.351944e+03 #> MEDV.13      1.242545e+01  6.964565e+01    68.4026267  3.179590e+01 #> MEDV.22     -1.242084e+03 -1.144172e+03 -1013.8763021 -8.034431e+02 #> MEDV.23     -4.261937e+01 -7.907592e+01   -56.3412139 -4.544440e+01 #> MEDV.33     -8.265327e+00 -1.169523e+01   -10.3438058 -8.778274e+00 #>                     [,5]          [,6]          [,7]          [,8]         [,9] #> (Intercept)    0.1192686    0.03344926    0.21944264     0.1314681   -0.1235074 #> Chi.P.0      114.9443922  151.39081547   76.27238019  -240.2842370  136.2259522 #> Chi.P.1      125.5702331  156.49497768   74.10594136  -314.3791562  153.6673011 #> Chi.P.2       73.0142577  165.13287439   89.85345352  1754.4396814   98.3187971 #> Chi.P.3      405.5696834  316.55109345   98.35577626  1053.9047114  400.8124703 #> Chi.P.4       -6.1806747   -7.43198675   -9.88013951    -1.7153048   -1.0490295 #> Chi.P.5      151.3050887   53.18949975   33.64550622   205.3901684  185.5666573 #> Chi.C.3       31.8669841    5.61534624    6.88438491    24.6064764   44.8021383 #> Chi.PC.4      -3.4242247  -62.62347203  -18.92282780  -108.2810689   35.9479444 #> Kappa.1     -124.3226002  -92.83424253   35.49558819  1677.7447439 -165.4503200 #> Kappa.2      167.8271220  189.40945302   68.05805101  -347.2420950  210.0609736 #> Kappa.3       72.4517388  159.74215145  129.96585135 -1448.4760767   28.7696114 #> Kappa.4      119.2458271  152.85626389   75.89113737  -140.4589742  143.9957352 #> Estate.1    -133.7334943 -103.70780084   28.53493470     8.6757449 -169.5197610 #> Estate.2     104.8269219   99.62912201   -0.06672675   -27.9466777   85.3056800 #> Estate.3       3.9226254    6.12943382  -11.67554659    11.4841152    6.6412900 #> MEDV.11      -32.4282415  -54.73502499  -45.37809784  -284.6735242  -28.8282140 #> MEDV.12     -226.5718202 -263.52637925 -141.68720462  -977.5534500 -227.0272720 #> MEDV.13       -0.3000575   42.75351366   26.80771649    35.9614527  -10.6572758 #> MEDV.22     -407.6313928 -448.38276750   41.32777313  -854.6368553 -490.4915757 #> MEDV.23      -16.7949702  -73.40319374  -48.94258919   -72.7726511  -13.0687115 #> MEDV.33       -2.4328116   -6.40314188   -3.77969804    -7.6718770   -2.0709181 #>                     [,10]         [,11]         [,12]         [,13] #> (Intercept)     0.0952299 -7.533035e-02  2.726087e-02  3.802585e-02 #> Chi.P.0      -186.2134302 -4.633889e+02 -3.538618e+02 -3.063640e+02 #> Chi.P.1      -620.0046220 -8.072891e+02 -8.154466e+02 -7.408477e+02 #> Chi.P.2      2269.7060178  2.802732e+03  2.949372e+03  2.782580e+03 #> Chi.P.3      1305.5290186  1.949994e+03  1.812270e+03  1.874588e+03 #> Chi.P.4        -1.4658141 -4.224059e+00 -3.994658e+00 -5.215591e+00 #> Chi.P.5       263.4342742  3.533711e+02  3.357021e+02  3.627524e+02 #> Chi.C.3        34.5482525  4.004019e+01  3.298974e+01  4.285496e+01 #> Chi.PC.4     -133.6619962 -2.522639e+02 -2.046604e+02 -2.107894e+02 #> Kappa.1      1871.6456449  3.165754e+03  2.673910e+03  3.342556e+03 #> Kappa.2      -569.2174595 -8.790804e+02 -9.191529e+02 -9.822002e+02 #> Kappa.3     -1787.3837963 -2.755595e+03 -2.488446e+03 -2.972810e+03 #> Kappa.4      -414.7121909 -4.316163e+02 -4.448586e+02 -3.725222e+02 #> Estate.1      -91.9704597 -1.060894e+02  3.486721e+01 -6.444907e+01 #> Estate.2        2.2557378  2.546077e+01 -4.559803e+01 -4.233085e+00 #> Estate.3        8.2750120  1.305269e+01  1.802437e+01  1.595633e+01 #> MEDV.11      -308.6363838 -4.593386e+02 -4.073214e+02 -4.795827e+02 #> MEDV.12     -1050.7151125 -1.585065e+03 -1.466473e+03 -1.682701e+03 #> MEDV.13        47.7989661  4.542462e+01  3.386146e+01  2.952771e+01 #> MEDV.22      -811.3878203 -1.095467e+03 -1.120130e+03 -1.173663e+03 #> MEDV.23       -62.0031799 -6.104439e+01 -5.158575e+01 -5.283413e+01 #> MEDV.33        -8.3058078 -1.059688e+01 -8.342981e+00 -8.667960e+00 #>                     [,14]         [,15]         [,16]         [,17] #> (Intercept)    0.08805267     0.1311924 -5.291843e-02  2.467607e-02 #> Chi.P.0      128.73416209  -498.4958246 -5.298792e+02 -3.478092e+02 #> Chi.P.1      139.31472219  -648.5146975 -7.734374e+02 -3.136307e+02 #> Chi.P.2      138.46255953  2687.6633031  2.963036e+03  1.805095e+03 #> Chi.P.3      284.51738524  1665.2279359  1.738952e+03  1.103782e+03 #> Chi.P.4       -5.32622809    -4.7605938 -4.851129e+00 -2.242400e+00 #> Chi.P.5      132.97884367   298.5242595  3.454661e+02  2.507446e+02 #> Chi.C.3       33.69798165    31.2926561  4.387881e+01  3.861590e+01 #> Chi.PC.4      29.46008523  -200.2172196 -1.700069e+02 -8.397451e+01 #> Kappa.1     -106.56188705  2500.3540664  2.647402e+03  1.236983e+03 #> Kappa.2      185.71691987  -773.0577857 -8.043688e+02 -3.659646e+02 #> Kappa.3       36.56160928 -2230.8755424 -2.449748e+03 -1.219634e+03 #> Kappa.4      135.80436449  -426.4317101 -4.897427e+02 -2.624760e+02 #> Estate.1    -136.00640946   -92.6959258 -5.725439e+01 -8.777946e+01 #> Estate.2      79.44125554     6.8494772 -1.904631e+01  2.660165e+01 #> Estate.3       2.03106212     7.5234657  1.162960e+01  9.359179e+00 #> MEDV.11      -32.48020250  -382.6310569 -3.999401e+02 -2.271922e+02 #> MEDV.12     -213.23097763 -1276.0660551 -1.383241e+03 -8.036686e+02 #> MEDV.13        6.29646290    51.4445673  4.052299e+01  3.286213e+01 #> MEDV.22     -374.17098451  -914.2702081 -9.958034e+02 -7.587489e+02 #> MEDV.23      -23.12017855   -57.6622910 -4.784982e+01 -4.832512e+01 #> MEDV.33       -2.68142917    -8.9018915 -8.411920e+00 -6.506073e+00 #>                     [,18]         [,19]         [,20]         [,21] #> (Intercept)   -0.09040048  4.156524e-02  6.395476e-02     0.1223034 #> Chi.P.0       81.14481680 -2.854488e+02 -3.653410e+02  -290.7849931 #> Chi.P.1       83.60685082 -3.618192e+02 -4.956725e+02  -437.2478134 #> Chi.P.2       78.54002179  1.875427e+03  2.202052e+03  2115.3888038 #> Chi.P.3      112.03020721  1.235178e+03  1.391329e+03  1445.7062184 #> Chi.P.4       -9.36274629 -5.713304e+00 -3.787116e+00    -5.8948787 #> Chi.P.5       76.07556024  2.649673e+02  2.772492e+02   246.4588772 #> Chi.C.3       23.01333385  3.464507e+01  3.545692e+01    21.8569469 #> Chi.PC.4      24.29276082 -1.209906e+02 -1.421121e+02  -203.9326299 #> Kappa.1       -6.40462929  1.754698e+03  2.024447e+03  3171.2612444 #> Kappa.2       93.87070912 -4.676859e+02 -5.910617e+02  -731.2439522 #> Kappa.3       58.51252928 -1.619529e+03 -1.853187e+03 -2550.7430077 #> Kappa.4       82.73408489 -2.578726e+02 -2.795108e+02  -319.4767922 #> Estate.1    -136.67827755 -6.285670e+01 -8.258845e+01    42.6330798 #> Estate.2      82.16359717  2.580002e+01  1.406891e+01   -72.8386840 #> Estate.3     -16.42761494  1.114580e+01  9.022463e+00     2.9006126 #> MEDV.11      -22.02376396 -2.801039e+02 -3.212965e+02  -442.6971372 #> MEDV.12     -106.22127940 -1.018394e+03 -1.128810e+03 -1494.8166802 #> MEDV.13       24.73580106  2.768341e+01  3.704400e+01    30.0241274 #> MEDV.22       55.18581116 -8.105922e+02 -8.660804e+02  -783.7200263 #> MEDV.23      -19.48365509 -4.620548e+01 -4.819595e+01   -67.1022418 #> MEDV.33       -3.44968017 -6.847212e+00 -7.600378e+00    -8.7449426 #>                    [,22]         [,23]        [,24]         [,25]         [,26] #> (Intercept)    0.2193084 -2.348773e-02    0.1151192 -5.632583e-02   -0.04497163 #> Chi.P.0       67.7965837 -6.297741e+02   91.8073514 -2.093525e+02  146.52635231 #> Chi.P.1       68.2614215 -7.493253e+02   94.7512390 -5.360753e+02  158.54749398 #> Chi.P.2       64.2857629  3.144416e+03   84.4490981  1.989834e+03  147.99367308 #> Chi.P.3      107.7409256  1.651824e+03  146.8778113  1.381773e+03  267.65775917 #> Chi.P.4       -9.2261412 -1.582243e+00   -8.1860462 -5.933891e+00   -4.14951272 #> Chi.P.5       89.5724744  2.743289e+02   76.4454591  2.559710e+02  119.03126531 #> Chi.C.3       28.2276078  2.679225e+01   21.6817403  2.555790e+01   33.00245787 #> Chi.PC.4      29.2196878 -2.137538e+02    9.8249597 -1.704542e+02   25.32410475 #> Kappa.1        6.5303632  2.651939e+03  -13.2005713  2.187942e+03 -124.69942602 #> Kappa.2       71.2128622 -9.453564e+02  106.4176679 -4.282600e+02  208.07832694 #> Kappa.3       82.9266422 -2.391648e+03   72.3295896 -1.888850e+03   57.42340455 #> Kappa.4       68.2861453 -4.580112e+02   93.5596495 -3.018673e+02  153.57106033 #> Estate.1     -87.1144737 -5.273535e+01 -163.2770902 -8.004661e+01 -135.30099275 #> Estate.2      96.1113145 -3.972464e+00   86.6142855  1.636663e+01   88.64498788 #> Estate.3     -16.8460972  5.575601e+00  -15.1373430  1.185360e+01    3.69014729 #> MEDV.11      -34.4868838 -4.154152e+02  -27.1789639 -3.365432e+02  -33.03368303 #> MEDV.12     -114.1375195 -1.352071e+03 -114.2637591 -1.169266e+03 -220.81125268 #> MEDV.13       28.0609361  8.332264e+01   26.6114839  3.278048e+01   14.31650471 #> MEDV.22       66.4576815 -8.674400e+02   25.9998593 -9.352758e+02 -412.27077533 #> MEDV.23      -37.2330913 -9.178154e+01  -27.6302943 -5.457739e+01  -32.31941360 #> MEDV.33       -4.5712266 -1.192587e+01   -3.7583478 -7.849656e+00   -3.31414543 #>                     [,27]         [,28]        [,29]         [,30] #> (Intercept)    0.04374562  2.912022e-03   -0.1993842   -0.02620609 #> Chi.P.0      120.99257748  1.486671e+02  109.2323355   88.91734140 #> Chi.P.1      126.59878191  1.605912e+02  128.3081845   91.46501548 #> Chi.P.2      182.33245864  1.531265e+02   25.0674224   87.68118906 #> Chi.P.3       88.57933599  3.682129e+02  457.8455729  120.11536340 #> Chi.P.4      -11.66968878 -6.457610e+00   -4.9815825   -9.98542179 #> Chi.P.5       46.06718203  1.007879e+02  211.2596252   66.87397549 #> Chi.C.3       10.63040098  1.733023e+01   46.7806100   22.14778274 #> Chi.PC.4      18.13267882 -2.679118e+01   36.6356509   13.24319209 #> Kappa.1      -13.61746075 -1.103985e+02 -178.6294590   -8.12914013 #> Kappa.2      154.84130646  2.059184e+02  175.8167778  102.14731202 #> Kappa.3       59.91772298  9.101820e+01   39.6172467   66.64755179 #> Kappa.4      128.49952344  1.564359e+02  116.0767308   90.62843095 #> Estate.1     -80.78795059 -1.362215e+02 -165.7939866 -164.10211910 #> Estate.2      53.50338296  1.081021e+02  111.6772345  103.95835390 #> Estate.3      -3.50380851  7.307871e+00    4.9688522  -15.56017605 #> MEDV.11      -38.09382970 -3.738746e+01  -17.9420371  -23.31073532 #> MEDV.12     -186.75086737 -2.524439e+02 -202.7379850 -109.44608726 #> MEDV.13       29.37254346  2.071394e+01  -25.5943339   31.42631050 #> MEDV.22     -173.75933157 -4.784486e+02 -435.5795908   35.92312147 #> MEDV.23      -36.84290509 -3.755483e+01   10.9301518  -23.97873597 #> MEDV.33       -3.84610436 -3.909744e+00   -0.7342638   -3.87731991 #>                     [,31]         [,32]         [,33]        [,34]        [,35] #> (Intercept)  5.285207e-02 -4.087657e-02  8.235517e-02    0.0207164   -0.3892758 #> Chi.P.0     -1.121228e+03 -6.029116e+01 -3.664867e+02  119.0605638  143.1113050 #> Chi.P.1     -1.446561e+03 -6.249427e+02 -9.892404e+02  127.8788269  157.2042594 #> Chi.P.2      5.095428e+03  2.066337e+03  3.572337e+03  195.6664038  128.3042790 #> Chi.P.3      2.068007e+03  1.366312e+03  2.345598e+03  331.4797088  369.8712960 #> Chi.P.4     -4.374757e+00 -7.838732e+00 -4.255981e+00   -6.6379382    2.5003578 #> Chi.P.5      3.811741e+02  2.780290e+02  4.409144e+02   76.3535055   97.4749519 #> Chi.C.3      4.532302e+01  3.604576e+01  5.111362e+01   13.9988966   16.7430154 #> Chi.PC.4    -1.762346e+02 -1.472494e+02 -2.827972e+02  -46.2926540  -39.5671078 #> Kappa.1      1.184811e+03  1.960505e+03  4.103426e+03  -28.7161438 -113.1404551 #> Kappa.2     -1.303199e+03 -5.843606e+02 -1.386131e+03  150.5706625  197.0039194 #> Kappa.3     -1.741210e+03 -1.828659e+03 -3.738645e+03   84.4559573   97.6262886 #> Kappa.4     -1.358525e+03 -3.485870e+02 -4.966196e+02  127.6017851  150.9941559 #> Estate.1    -2.722104e+00 -8.363172e+01 -4.681820e+00 -110.8426938 -219.1124706 #> Estate.2    -2.209334e+01  3.189150e+01 -7.154599e+01   91.8425026  155.8298603 #> Estate.3     7.629877e+00  1.423729e+01  2.295319e+01    2.9908851    5.1810807 #> MEDV.11     -2.419671e+02 -3.284120e+02 -6.000753e+02  -56.0342439  -45.7786176 #> MEDV.12     -8.986966e+02 -1.125750e+03 -2.026022e+03 -255.4171078 -245.4227736 #> MEDV.13      1.116011e+02  3.573229e+01  2.700536e+01   33.1704841   41.5642317 #> MEDV.22     -7.894123e+02 -8.918826e+02 -1.410820e+03 -393.8915983 -460.4394660 #> MEDV.23     -5.399647e+01 -5.297287e+01 -5.992552e+01  -58.7414481  -64.4120936 #> MEDV.33     -9.563163e+00 -8.050611e+00 -1.008338e+01   -5.1038917   -6.5282383 #>                    [,36]         [,37]         [,38]         [,39] #> (Intercept)     0.180130     0.1747782  3.223681e-02 -9.686307e-02 #> Chi.P.0      -454.757890  -575.4021338 -4.960514e+02 -2.702114e+02 #> Chi.P.1     -1002.008056  -782.2569890 -8.580990e+02 -4.156535e+02 #> Chi.P.2      3317.996049  2898.9118310  2.984437e+03  1.833811e+03 #> Chi.P.3      1428.183150  1887.0164603  1.839520e+03  1.162487e+03 #> Chi.P.4        -4.218798    -8.1714570 -3.623802e+00 -6.131265e+00 #> Chi.P.5       238.546092   362.5424797  3.506188e+02  2.284663e+02 #> Chi.C.3        23.417402    41.4856285  4.103791e+01  2.709905e+01 #> Chi.PC.4     -160.330305  -218.5644523 -2.047444e+02 -1.219355e+02 #> Kappa.1      1378.420491  3626.1226005  3.126343e+03  1.493795e+03 #> Kappa.2      -871.074550  -910.0871115 -8.407136e+02 -4.039880e+02 #> Kappa.3     -1605.807174 -3125.8585552 -2.798602e+03 -1.370172e+03 #> Kappa.4      -699.194412  -439.0422331 -4.532499e+02 -2.605861e+02 #> Estate.1      -75.188117     8.1454541 -9.130401e+01 -1.091252e+02 #> Estate.2       26.948293   -55.7209225  1.896848e+01  5.426602e+01 #> Estate.3        5.025732    11.2471358  1.289005e+01  7.215722e+00 #> MEDV.11      -265.018981  -509.3785158 -4.581410e+02 -2.360206e+02 #> MEDV.12      -906.926503 -1729.9087986 -1.562400e+03 -8.787567e+02 #> MEDV.13       107.281786    21.7718813  4.681130e+01  3.949740e+01 #> MEDV.22      -666.599985 -1027.6895768 -1.095979e+03 -7.322395e+02 #> MEDV.23       -74.982737   -42.6892002 -5.413007e+01 -4.485792e+01 #> MEDV.33       -10.487102    -8.9081547 -1.022301e+01 -7.149544e+00 #>                     [,40]         [,41]         [,42]        [,43] #> (Intercept)  8.230512e-02  4.801751e-02     0.1191981    0.1317047 #> Chi.P.0     -2.360277e+02 -5.201022e+02  -520.8814465   83.5326356 #> Chi.P.1     -4.317225e+02 -9.403190e+02 -1173.5491430   85.6547918 #> Chi.P.2      2.017850e+03  3.196718e+03  3623.4482082   80.7620107 #> Chi.P.3      1.452862e+03  1.939346e+03  2335.9135471  119.4739387 #> Chi.P.4     -4.913138e+00 -5.820418e+00    -6.0823712   -9.4373810 #> Chi.P.5      3.040830e+02  3.739852e+02   460.0400652   70.5019007 #> Chi.C.3      4.159134e+01  4.234345e+01    54.9779923   23.1205059 #> Chi.PC.4    -1.397978e+02 -2.091701e+02  -247.0420518   13.2936593 #> Kappa.1      2.512855e+03  2.835215e+03  3906.5217998   -3.9170264 #> Kappa.2     -5.679603e+02 -8.192789e+02 -1187.1982216   93.1275808 #> Kappa.3     -2.178895e+03 -2.567306e+03 -3511.1222236   74.7151564 #> Kappa.4     -2.746432e+02 -7.606963e+02  -640.2636763   85.0586715 #> Estate.1    -8.738426e+01 -6.214043e+00    53.0199628 -166.5871045 #> Estate.2     2.087682e+01 -3.604692e+01   -59.1987760  112.7558623 #> Estate.3     1.260388e+01  1.267503e+01    19.4082327  -16.4353026 #> MEDV.11     -3.731358e+02 -4.224191e+02  -548.6770470  -28.9246852 #> MEDV.12     -1.271655e+03 -1.440250e+03 -1932.9171940 -113.2827815 #> MEDV.13      1.711199e+01  3.464231e+01    18.9475056   34.7176976 #> MEDV.22     -1.018641e+03 -1.088777e+03 -1358.1823678   41.5437637 #> MEDV.23     -4.175767e+01 -4.452709e+01   -41.4762992  -32.1378996 #> MEDV.33     -6.924897e+00 -8.623157e+00    -9.3478123   -4.3010588 #>                     [,44]        [,45]         [,46]        [,47]        [,48] #> (Intercept)   -0.03908469   -0.2069478   -0.04211695    0.1175324    0.2551903 #> Chi.P.0      132.21311716  142.4009335   97.51169123   74.9575665   60.0170126 #> Chi.P.1      144.36051640  159.4238786   99.76574836   74.8023321   60.5047190 #> Chi.P.2      103.66701406   90.1843563   92.53607763   74.6339771   60.0919640 #> Chi.P.3      440.88280955  418.5968720  155.35012786  106.9724734   66.3098689 #> Chi.P.4       -8.10464618   -4.9818489   -7.02302825  -12.2173056   -8.0551176 #> Chi.P.5      114.80375273  129.1254892   53.67733664   45.9639923  101.8651486 #> Chi.C.3       16.43237591   22.8122938   12.44823446   13.6443754   31.3235903 #> Chi.PC.4     -57.72797804  -21.6599247  -16.84616606   -6.0832435   59.4204346 #> Kappa.1     -112.16912361 -147.3979927   -5.03886120   22.7216847    1.3029410 #> Kappa.2      179.61674470  202.8993556  108.43006643   74.6542267   65.5196440 #> Kappa.3      132.89179056  101.8846312   94.33425016   96.9358951   57.1306256 #> Kappa.4      138.80759830  149.1680679   99.01208108   75.1370811   60.6115682 #> Estate.1    -134.18779605 -155.7463835 -216.47287784  -96.2872156  -11.7556172 #> Estate.2     119.05757044  131.6185575  155.21017579   69.4014499   29.4842088 #> Estate.3       7.56165528    7.0887313  -13.97436636  -14.1398658  -17.7400162 #> MEDV.11      -46.70643883  -29.4044529  -29.56991555  -28.1388076  -30.6636088 #> MEDV.12     -268.01018090 -224.2267230 -124.18656476 -111.3402733 -102.2685725 #> MEDV.13       24.51688015   12.2829935   53.18273863   31.5214270    7.3296599 #> MEDV.22     -481.61777979 -483.9581247    1.42251665   91.1984925   92.4487723 #> MEDV.23      -54.03483153  -25.8707433  -47.62213452  -27.6452118  -22.0167765 #> MEDV.33       -4.93339249   -3.4370831   -5.95585528   -3.9031651   -2.3022137 #>                     [,49]        [,50] #> (Intercept)   -0.04866931    0.1748453 #> Chi.P.0      122.23201797  149.1362350 #> Chi.P.1      133.26691772  161.6037046 #> Chi.P.2       95.74635679  155.4433908 #> Chi.P.3      367.97914127  264.2710091 #> Chi.P.4      -10.34265722   -4.5266769 #> Chi.P.5      152.61239902   80.6744925 #> Chi.C.3       35.74740421   15.1505543 #> Chi.PC.4      19.83267238  -10.5888549 #> Kappa.1     -118.54603237  -98.1216228 #> Kappa.2      176.00128264  201.9980903 #> Kappa.3       44.78004489   83.1922641 #> Kappa.4      128.52665001  157.6049414 #> Estate.1    -157.57778557 -131.4061131 #> Estate.2     109.53639031   88.3252086 #> Estate.3       4.35857625    2.8050891 #> MEDV.11      -28.13157019  -35.1417473 #> MEDV.12     -222.30441671 -218.2617326 #> MEDV.13       -3.25534843   24.7291947 #> MEDV.22     -399.46058127 -398.6099385 #> MEDV.23       -8.14815971  -40.4229932 #> MEDV.33       -1.93983979   -4.9163992 predict(fit, newx = x) #>   [1] -2126.5424637 -2113.1316535 -1927.1159663 -1916.4118552 -1727.0954869 #>   [6] -1717.3859578 -1526.7365219 -1517.4991466 -1326.2729932 -1317.1922731 #>  [11] -1125.9916444 -1117.0188237 -1152.4859796  -925.8305075  -916.9656046 #>  [16]  -954.2027001  -725.7541886  -716.8961642  -755.6904118  -525.7568515 #>  [21]  -517.1133985  -556.8564611  -326.0510245  -317.1912678  -358.1003483 #>  [26]  -126.4007729  -117.5883783  -159.3398758    73.1862073    81.9764338 #>  [31]    68.2255392    58.7370509    52.5281312    48.9649619    40.1640259 #>  [36]    39.5155551   272.7243653   281.5233863   267.8290571   258.2477372 #>  [41]   251.9960294   239.4218404   238.3652915   472.1839610   481.0727049 #>  [46]   437.1813431  -682.4731331  -608.1531798  -484.6527354  -484.3152701 #>  [51]  -508.2830175  -505.3782727  -520.2723892  -385.6011988  -397.4682663 #>  [56]  -408.4405514  -416.1634701  -420.5046382  -281.4472969  -286.1036627 #>  [61]  -309.1719035  -308.3258100  -301.3372726  -320.1455059  -185.9987853 #>  [66]  -195.0895657  -198.7871111  -209.8644571  -219.9352127   -81.8757748 #>  [71]   -87.1823094  -110.5544722  -108.9801678  -119.8860764    13.5678893 #>  [76]     4.2999722     2.5946410    18.1076070     0.5957538   -17.6331922 #>  [81]   117.6325675   111.9628723   111.4571577    88.5841785    88.2446989 #>  [86]    77.1460657    73.1898065   207.1250993   201.0204403   181.7058431 #>  [91]   173.2994833   174.8481236   165.2118275   314.5679183   310.5051424 #>  [96]   287.0318681   287.3513371   277.3089017   272.4041454   403.1396133 #> [101]   396.3801815   381.0425593   372.5135806   369.5850552   364.0800204 #> [106]   516.5409052   509.6177250   488.2687906   486.0152270   476.2109049 #> [111]   471.7996408   600.5300592   585.6928763   567.3818549   708.7940329 #> [116]   687.7525946   685.0571150   667.1248480   784.7797337  -567.7581837 #> [121]  -479.6524144  -369.2562017  -253.1563337  -170.8091896   -54.8402401 #> [126]   -84.1775270     8.9431829   145.1130763   114.2562731   104.2628129 #> [131]    94.4552747   229.1104996   223.3191253   206.9210486   192.5024503 #> [136]   345.1616154   312.6413419   302.1954111   292.0839517   428.0725079 #> [141]   427.0081185   405.2283699   397.4144268   389.9857746   544.2849371 #> [146]   514.4928255   501.0601274   488.4509161   491.8463931   627.1573917 #> [151]   596.2561742   586.9280555   743.3619444   710.1849920   702.3765896 #> [156]   685.7704108   784.4901177   908.9179151   883.6265872   983.0856852 #> [161]   -28.4412551   169.0360858   152.6081239   368.6119435   351.6404771 #> [166]   567.6060383   525.1752113   518.3009813   518.0082657   632.8614122 #> [171]   620.4549369   615.5204421   766.5732304   723.4769269   716.2774456 #> [176]   714.9542999   813.2899949  -340.6142132  -150.7982816  -917.2432532 #> [181]  -683.6192019  -481.0319804  -508.8039543  -398.1222301  -414.8950682 #> [186]  -309.3696189  -321.2663409  -328.2483597  -197.9334864  -109.9902790 #> [191]    79.2914952    74.3880160   203.7262434   401.2221482   380.9927437 #> [196]  -251.5301847  -166.0569665  -100.6841884   116.2975828   103.4238284 #> [201]    97.1327845   319.9619496   302.6078458   295.3860343   406.6215311 #> [206]   406.1479439   392.4032669"},{"path":"https://nanx.me/enpls/reference/enpls.fs.core.html","id":null,"dir":"Reference","previous_headings":"","what":"core function for enpls.fs ‚Äî enpls.fs.core","title":"core function for enpls.fs ‚Äî enpls.fs.core","text":"select best ncomp cross-validation use fit complete training set. scale = FALSE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fs.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core function for enpls.fs ‚Äî enpls.fs.core","text":"","code":"enpls.fs.core(plsdf, maxcomp, cvfolds)"},{"path":"https://nanx.me/enpls/reference/enpls.fs.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core function for enpls.fs ‚Äî enpls.fs.core","text":"fitted coefficients","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","title":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","text":"Measuring feature importance ensemble partial least squares.","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","text":"","code":"enpls.fs(   x,   y,   maxcomp = NULL,   cvfolds = 5L,   reptimes = 500L,   method = c(\"mc\", \"boot\"),   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enpls.fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","text":"x Predictor matrix. y Response vector. maxcomp Maximum number components included within model. specified, use maximum number possible (considering cross-validation special cases n smaller p). cvfolds Number cross-validation folds used model automatic parameter selection, default 5. reptimes Number models build Monte-Carlo resampling bootstrapping. method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","text":"list containing two components: variable.importance - vector variable importance coefficient.matrix - original coefficient matrix","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enpls.fs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enpls.fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Partial Least Squares for Measuring Feature Importance ‚Äî enpls.fs","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) fs <- enpls.fs(x, y, reptimes = 50) print(fs) #> Variable Importance by Ensemble Partial Least Squares #> --- #>          Importance #> Chi.C.3   2.4683701 #> MEDV.23   2.3787962 #> MEDV.33   2.2815314 #> Chi.P.4   2.0315902 #> Chi.P.5   1.6766926 #> MEDV.13   1.4392556 #> MEDV.22   1.4159863 #> Chi.P.3   1.2510102 #> Estate.1  1.2467426 #> MEDV.12   1.2000973 #> MEDV.11   1.0926947 #> Chi.P.2   1.0155413 #> Chi.PC.4  0.8968577 #> Kappa.1   0.8588444 #> Kappa.3   0.8552669 #> Estate.2  0.6537099 #> Chi.P.1   0.6405966 #> Kappa.2   0.6140915 #> Kappa.4   0.5323162 #> Chi.P.0   0.4964470 #> Estate.3  0.4209405 plot(fs)"},{"path":"https://nanx.me/enpls/reference/enpls.mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Absolute Error (MAE) ‚Äî enpls.mae","title":"Mean Absolute Error (MAE) ‚Äî enpls.mae","text":"Mean Absolute Error (MAE)","code":""},{"path":"https://nanx.me/enpls/reference/enpls.mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Absolute Error (MAE) ‚Äî enpls.mae","text":"","code":"enpls.mae(yreal, ypred)"},{"path":"https://nanx.me/enpls/reference/enpls.mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Absolute Error (MAE) ‚Äî enpls.mae","text":"yreal true response vector ypred predicted response vector","code":""},{"path":"https://nanx.me/enpls/reference/enpls.mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Absolute Error (MAE) ‚Äî enpls.mae","text":"MAE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.mae.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mean Absolute Error (MAE) ‚Äî enpls.mae","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.core.html","id":null,"dir":"Reference","previous_headings":"","what":"core function for enpls.od ‚Äî enpls.od.core","title":"core function for enpls.od ‚Äî enpls.od.core","text":"select best ncomp cross-validation use fit complete training set, predict test set. scale = TRUE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core function for enpls.od ‚Äî enpls.od.core","text":"","code":"enpls.od.core(plsdf.sample, plsdf.remain, maxcomp, cvfolds)"},{"path":"https://nanx.me/enpls/reference/enpls.od.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core function for enpls.od ‚Äî enpls.od.core","text":"error vector predicted y real y","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"Outlier detection ensemble partial least squares.","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"","code":"enpls.od(   x,   y,   maxcomp = NULL,   cvfolds = 5L,   reptimes = 500L,   method = c(\"mc\", \"boot\"),   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"x Predictor matrix. y Response vector. maxcomp Maximum number components included within model. specified, use maximum number possible (considering cross-validation special cases n smaller p). cvfolds Number cross-validation folds used model automatic parameter selection, default 5. reptimes Number models build Monte-Carlo resampling bootstrapping. method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"list containing four components: error.mean - error mean samples (absolute value) error.median - error median samples error.sd - error sd samples predict.error.matrix - original prediction error matrix","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"maximize probablity observation can selected test set (thus prediction uncertainty can measured), please try setting large reptimes.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enpls.od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Partial Least Squares for Outlier Detection ‚Äî enpls.od","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) od <- enpls.od(x, y, reptimes = 50) print(od) #> Outlier Detection by Ensemble Partial Least Squares #> --- #> Mean residual for each sample: #>   [1]  2.961290487 10.705505984  2.695084840  3.311091685  2.805275319 #>   [6]  0.653303940  2.406471830  0.060138450  1.085301918  0.681639253 #>  [11]  0.602668291  0.051825623  5.074258601  0.401223791  0.200469288 #>  [16]  4.510123865  1.691529502  0.145738484  1.525737814  2.765037846 #>  [21]  0.166203922  0.139797229  2.696201419  0.193069694  0.183589250 #>  [26]  2.914078924  0.416333768  0.521945702  3.580281229  0.818709605 #>  [31]  2.373884289  0.046727036  0.619399010  0.256234952  0.939652083 #>  [36]  1.173721209  2.024661441  1.809535161  2.154042307  0.644501989 #>  [41]  0.061133489  2.444588094  1.098370439  1.603545811  2.163023752 #>  [46]  1.402565514  1.451659515  2.139296149  2.443892391  1.997895711 #>  [51]  1.029372888  1.136841149  6.421380060  2.649873372  1.224674598 #>  [56]  0.964921264  2.919868131  3.793601358  1.120247119  0.042588935 #>  [61]  0.363153216  3.165008537 17.162269124  6.528451648  0.520605496 #>  [66]  2.687075808  2.837691454  0.396424034  1.586470400  1.549832092 #>  [71]  0.122850422  1.412340751  0.697607289  1.569135383  0.123461109 #>  [76]  3.449456659  1.446110833  1.469166518  1.951656184  1.363008306 #>  [81]  0.100632290  0.214244858  6.822557951  0.781231958  2.558088525 #>  [86]  1.693194231  1.705163184  1.594881212  0.618256405  0.481129274 #>  [91]  1.022913007  4.341302506  1.110030176  3.176739370  7.516301621 #>  [96]  1.862482389  3.146321553  1.282671387  1.549270795  0.543544329 #> [101]  1.609953582  1.539486441  1.097285036  0.463297596  0.363243731 #> [106]  1.711660532  0.109005089  0.383383442  3.109554290  2.025583099 #> [111]  2.201838698  3.600461547  3.105103207  2.633412696  0.729670194 #> [116]  0.008296581  3.552415058  0.578271953  2.078384037  3.902482546 #> [121]  1.727881731  3.650065811  0.051772790  2.497201225  0.467536756 #> [126]  1.489009588  0.340541361  0.132148886  0.045135994  4.427647349 #> [131]  5.731789181  3.981627154  1.716354159  0.601427917  3.652150258 #> [136]  0.133532207  1.154975295  4.738600731  4.734765402  6.532606222 #> [141]  3.127767647  0.576464339  2.530101636  3.654622902  0.818384270 #> [146]  0.951243454  4.200623693  3.203804245  0.045774602  3.965457304 #> [151]  2.838265623  2.248011967  0.231138969  1.688400253 11.172263932 #> [156]  2.510655273  2.348956100  0.744693282  3.031595000  3.711339945 #> [161]  1.056457714  0.760364230  5.608100327  0.935520150  5.458962465 #> [166]  0.927523129 12.972029443  8.165533524  5.328551168  2.484859013 #> [171]  1.426435908  3.418963109  3.510966949  9.082680058  5.707308495 #> [176]  3.787580722  4.998185217  0.787402138  0.843890420  1.977324388 #> [181]  2.970935803  1.865369664  4.064825229  0.754344632  4.640244745 #> [186]  1.208198413  3.029808379  2.870715190  1.474642147  0.794823265 #> [191]  4.756522825  0.808924951  4.646357523  1.529725624  3.158674232 #> [196]  0.126320735 10.757378072  4.493208107  8.261099389  3.629763251 #> [201]  4.294356510  2.396207505  1.086055946  5.281273194  2.343797603 #> [206]  2.393339996  5.608819248 #> --- #> Residual SD for each sample: #>   [1] 2.0295383 3.4591717 0.7499505 2.3497525 1.3438661 0.3988746 1.3521295 #>   [8] 0.6652582 1.4428361 0.4479827 1.1262145 0.8221188 0.9776006 0.6809018 #>  [15] 0.6082052 0.8580075 0.4563067 0.5095403 0.7951279 0.6467609 0.2721467 #>  [22] 0.6421179 0.6828399 0.4560934 0.4037567 0.6743393 0.3928832 0.6132695 #>  [29] 0.8256517 0.4056097 0.6128104 0.4178502 0.4754206 0.1959964 0.7369961 #>  [36] 0.4117097 1.7630091 0.3959147 0.8356341 0.3178605 0.4366360 0.3783586 #>  [43] 0.4867093 1.3986540 0.4482564 0.4912262 1.1030168 0.5667523 0.5239153 #>  [50] 0.3305965 0.4215010 0.5583729 0.4475138 1.3956538 0.5452551 0.4287959 #>  [57] 0.4345434 0.2303998 0.3009805 0.5306827 0.3846033 0.4022502 0.4005202 #>  [64] 0.3321732 1.9126931 0.8840468 0.2943275 0.6316034 0.2845289 0.2691855 #>  [71] 0.5016976 0.6198970 0.5633499 0.5270424 2.3760941 0.4301166 1.1617749 #>  [78] 0.2173916 0.4655769 0.3940509 0.3757747 0.3497275 0.3408768 0.5654717 #>  [85] 0.5408820 0.2431220 0.3395991 0.5735671 0.4370117 0.2435098 0.2388147 #>  [92] 0.3611832 0.7032879 0.3711193 0.4676772 0.4741993 0.6589015 0.6691025 #>  [99] 0.2896359 0.4720292 0.4810888 0.3346725 0.2942896 0.4406352 0.6772854 #> [106] 0.6753430 0.4242848 0.5187864 0.2329660 0.6413186 0.4552588 0.8210198 #> [113] 0.5212761 0.5316555 0.6732566 0.6948988 0.5722847 0.7572715 0.8682066 #> [120] 1.1984446 0.9276504 0.3272545 0.3763540 0.6842576 0.7662407 1.5708247 #> [127] 0.4425074 0.5372279 0.8630043 0.3355082 0.7097854 2.8301358 0.6207378 #> [134] 0.5604660 0.7827631 0.3548840 0.8135893 0.2485782 1.0185353 2.7216649 #> [141] 0.3765149 0.7282017 0.3539299 0.7998218 0.6350542 0.3872337 0.3196118 #> [148] 0.7272254 0.3906945 0.9074750 0.4313804 0.6164112 0.3909732 0.4712198 #> [155] 0.9828852 0.4958444 0.3522701 1.0701713 0.7098826 1.2925881 0.8318430 #> [162] 0.4494351 0.7327667 0.5391705 0.5821006 0.5230504 1.0236914 0.8394606 #> [169] 1.1569645 4.2022268 1.0436467 1.0621529 0.5589578 1.2767804 0.6687279 #> [176] 1.1668815 0.6607189 0.4421853 0.2008011 1.5162833 0.6090324 0.5296534 #> [183] 0.1686241 0.4156801 0.4007409 0.4526070 0.2362218 1.3948848 0.3850594 #> [190] 0.3991635 0.3768532 0.2678034 0.3900775 0.7123945 0.7198617 0.5281178 #> [197] 1.2265782 0.7673352 0.4887232 0.2826173 0.4897703 0.8893651 0.4974242 #> [204] 0.8264030 0.6131327 0.7606467 0.2861122 plot(od)  plot(od, criterion = \"sd\")"},{"path":"https://nanx.me/enpls/reference/enpls.rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Root Mean Squared Error (RMSE) ‚Äî enpls.rmse","title":"Root Mean Squared Error (RMSE) ‚Äî enpls.rmse","text":"Compute Root Mean Squared Error (RMSE).","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Root Mean Squared Error (RMSE) ‚Äî enpls.rmse","text":"","code":"enpls.rmse(yreal, ypred)"},{"path":"https://nanx.me/enpls/reference/enpls.rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Root Mean Squared Error (RMSE) ‚Äî enpls.rmse","text":"yreal true response vector ypred predicted response vector","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Root Mean Squared Error (RMSE) ‚Äî enpls.rmse","text":"RMSE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Root Mean Squared Error (RMSE) ‚Äî enpls.rmse","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmsle.html","id":null,"dir":"Reference","previous_headings":"","what":"Root Mean Squared Logarithmic Error (RMSLE) ‚Äî enpls.rmsle","title":"Root Mean Squared Logarithmic Error (RMSLE) ‚Äî enpls.rmsle","text":"Root Mean Squared Logarithmic Error (RMSLE)","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmsle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Root Mean Squared Logarithmic Error (RMSLE) ‚Äî enpls.rmsle","text":"","code":"enpls.rmsle(yreal, ypred)"},{"path":"https://nanx.me/enpls/reference/enpls.rmsle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Root Mean Squared Logarithmic Error (RMSLE) ‚Äî enpls.rmsle","text":"yreal true response vector ypred predicted response vector","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmsle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Root Mean Squared Logarithmic Error (RMSLE) ‚Äî enpls.rmsle","text":"RMSLE","code":""},{"path":"https://nanx.me/enpls/reference/enpls.rmsle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Root Mean Squared Logarithmic Error (RMSLE) ‚Äî enpls.rmsle","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.core.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"core fitting function for enspls.ad ‚Äî enspls.ad.core.fit","title":"core fitting function for enspls.ad ‚Äî enspls.ad.core.fit","text":"select best ncomp alpha cross-validation, use fit complete training set. scale = TRUE","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.core.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core fitting function for enspls.ad ‚Äî enspls.ad.core.fit","text":"","code":"enspls.ad.core.fit(x.tr, y.tr, maxcomp, cvfolds, alpha)"},{"path":"https://nanx.me/enpls/reference/enspls.ad.core.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core fitting function for enspls.ad ‚Äî enspls.ad.core.fit","text":"fitted spls object","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.core.pred.html","id":null,"dir":"Reference","previous_headings":"","what":"core prediction function for enspls.ad ‚Äî enspls.ad.core.pred","title":"core prediction function for enspls.ad ‚Äî enspls.ad.core.pred","text":"core prediction function enspls.ad","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.core.pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core prediction function for enspls.ad ‚Äî enspls.ad.core.pred","text":"","code":"enspls.ad.core.pred(model, x.te, y.te)"},{"path":"https://nanx.me/enpls/reference/enspls.ad.core.pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core prediction function for enspls.ad ‚Äî enspls.ad.core.pred","text":"error vector predicted real response","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"Model applicability domain evaluation ensemble sparse partial least squares.","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"","code":"enspls.ad(   x,   y,   xtest,   ytest,   maxcomp = 5L,   cvfolds = 5L,   alpha = seq(0.2, 0.8, 0.2),   space = c(\"sample\", \"variable\"),   method = c(\"mc\", \"boot\"),   reptimes = 500L,   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"x Predictor matrix training set. y Response vector training set. xtest List, -th component -th test set's predictor matrix (see example code ). ytest List, -th component -th test set's response vector (see example code ). maxcomp Maximum number components included within model. specified, use 5 default. cvfolds Number cross-validation folds used model automatic parameter selection, default 5. alpha Parameter (grid) controlling sparsity model. specified, default seq(0.2, 0.8, 0.2). space Space apply resampling method. Can sample space (\"sample\") variable space (\"variable\"). method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". reptimes Number models build Monte-Carlo resampling bootstrapping. ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"list containing: tr.error.mean - absolute mean prediction error training set tr.error.median - absolute median prediction error training set tr.error.sd - prediction error sd training set tr.error.matrix - raw prediction error matrix training set te.error.mean - list absolute mean prediction error test set(s) te.error.median - list absolute median prediction error test set(s) te.error.sd - list prediction error sd test set(s) te.error.matrix - list raw prediction error matrix test set(s)","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"Note space = \"variable\", method \"mc\", since bootstrapping variable space create duplicated variables, cause problems.","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enspls.ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Sparse Partial Least Squares for Model Applicability Domain Evaluation ‚Äî enspls.ad","text":"","code":"data(\"logd1k\") # remove low variance variables x <- logd1k$x[, -c(17, 52, 59)] y <- logd1k$y  # training set x.tr <- x[1:300, ] y.tr <- y[1:300]  # two test sets x.te <- list(   \"test.1\" = x[301:400, ],   \"test.2\" = x[401:500, ] ) y.te <- list(   \"test.1\" = y[301:400],   \"test.2\" = y[401:500] )  set.seed(42) ad <- enspls.ad(   x.tr, y.tr, x.te, y.te,   maxcomp = 3, alpha = c(0.3, 0.6, 0.9),   space = \"variable\", method = \"mc\",   ratio = 0.8, reptimes = 10 ) print(ad) #> Model Applicability Domain Evaluation by ENSPLS #> --- #> Absolute mean prediction error for each training set sample: #>   [1] 0.422632298 0.815523615 0.648213606 0.870831328 0.257203074 0.490832846 #>   [7] 0.701719681 0.429048791 0.749324907 0.638404365 0.843665524 0.687892385 #>  [13] 1.017169872 0.763573955 0.759053761 0.871500956 0.236640925 0.088100279 #>  [19] 0.472965624 0.634421708 0.735632351 0.091059839 1.594026249 1.189337666 #>  [25] 0.340769966 0.604866100 1.303871973 0.961142660 0.092884283 0.100520976 #>  [31] 0.059779983 0.412777313 0.135195202 2.478026712 0.397403818 0.005011676 #>  [37] 0.877181685 0.145017597 0.023745363 0.280530155 0.058398364 0.568238661 #>  [43] 0.251556521 0.494641002 0.163135341 0.263345408 0.331201449 0.257333694 #>  [49] 0.210855050 0.221268755 0.057240160 0.384076723 1.179395348 0.390537444 #>  [55] 0.726689121 0.528659319 0.212638767 0.161500350 0.362637352 0.256825754 #>  [61] 0.732640202 2.477624629 0.191345044 0.378929068 1.560290268 1.490810969 #>  [67] 0.296412512 1.550013282 0.055909397 0.480447843 0.022057600 0.205219974 #>  [73] 0.533021269 0.061863659 0.325187195 0.792693950 0.171503502 1.268409310 #>  [79] 0.095289006 0.145745742 0.258202295 0.186118843 0.072360285 0.001806612 #>  [85] 0.053576611 0.542751777 0.122393517 0.701052137 0.336353318 0.176058594 #>  [91] 0.684119003 1.427365586 0.699280144 0.406684185 0.611234923 0.156924933 #>  [97] 0.562503385 1.119304806 0.471931939 0.291409291 1.002496298 0.915919886 #> [103] 1.371940567 0.159471334 0.458710686 0.352588032 0.662182370 0.092416830 #> [109] 0.381089817 0.777267167 0.723549214 0.086011861 0.504880794 0.442446365 #> [115] 2.068971171 0.677454033 0.275265965 0.146845629 0.145894573 0.380305366 #> [121] 0.175955943 0.495523895 0.095822143 0.108049721 0.421334995 0.406392115 #> [127] 0.427064993 0.475260473 0.390757565 0.386203722 0.389891939 0.638576864 #> [133] 0.514533894 0.702536133 1.016492859 0.036428252 0.068006633 0.158541714 #> [139] 0.358508958 0.126570666 0.383104094 0.316770984 0.315860883 0.367288327 #> [145] 0.005705279 0.511450671 0.776060683 0.717761225 1.248239275 0.315547146 #> [151] 0.678562080 0.436041833 0.302940412 0.333968661 0.335712517 0.490020503 #> [157] 0.027968631 0.131459236 1.330434909 0.534146052 0.054247912 0.470021073 #> [163] 0.230859468 1.113192328 0.934546316 0.167146638 1.009885792 0.124310929 #> [169] 1.056397529 1.023604883 0.225133982 0.442940412 0.583332596 0.126985869 #> [175] 0.069347790 0.653485515 0.970596830 0.195304683 0.801994753 1.199706935 #> [181] 0.864077011 0.954600519 0.260503102 1.575187384 0.241392038 0.640383510 #> [187] 0.281017068 0.421082178 0.252594496 0.580144400 0.215357014 0.462556069 #> [193] 0.224788390 0.029300831 0.277304150 0.320589756 0.214429238 0.237467730 #> [199] 0.235394840 0.414850699 0.719519720 0.354494279 0.072602051 0.007889332 #> [205] 0.390031470 0.789599200 0.266620727 0.428384211 1.065651077 0.372088798 #> [211] 0.937549606 0.090203048 0.090203048 0.256837822 1.342746701 0.574286923 #> [217] 0.789007735 0.426308453 0.412019834 0.713326957 0.394331204 0.857297967 #> [223] 0.843878184 0.347792353 0.039652246 0.200532641 0.096114491 0.544931258 #> [229] 0.337727332 0.401999859 0.059209044 1.022239155 1.165625666 0.685192754 #> [235] 0.007973348 0.462237983 1.251230872 0.166910524 0.257766196 0.709494592 #> [241] 1.283898665 0.724810413 0.141464864 1.025924894 0.848892347 0.710976980 #> [247] 0.315861373 0.185796431 0.270266859 0.106863048 0.951448651 0.890710089 #> [253] 0.900610648 1.294977014 0.980769268 0.238059821 0.849570466 0.035763040 #> [259] 1.324239041 1.380289181 0.400634228 0.560836939 1.519693134 0.926202509 #> [265] 0.911714531 0.877294549 0.059123701 1.193649120 0.360798335 0.837650147 #> [271] 1.082083058 0.422692742 0.417876957 0.839002022 0.944522512 0.136016291 #> [277] 0.965552453 1.197557941 0.999223117 1.102941147 0.749923726 1.160063450 #> [283] 1.995596507 0.876923724 0.527334455 1.275112467 0.126439904 1.522104432 #> [289] 0.730701343 0.652148077 0.484660849 1.146757330 0.118813278 0.802484059 #> [295] 1.043295173 1.189620988 0.894921760 1.299672426 0.025476701 0.518866931 #> --- #> Prediction error SD for each training set sample: #>   [1] 0.17682492 0.13442655 0.10556516 0.11149364 0.14528873 0.12758414 #>   [7] 0.12065164 0.07926194 0.08193757 0.06919434 0.15949739 0.11983705 #>  [13] 0.11835357 0.20540697 0.10198030 0.11554543 0.13944593 0.15980624 #>  [19] 0.08477330 0.13461282 0.23612843 0.15600606 0.21791446 0.19736729 #>  [25] 0.15016986 0.09344745 0.21864433 0.21790961 0.25336042 0.15941805 #>  [31] 0.09284126 0.16197923 0.09572618 0.08856759 0.17542166 0.14772163 #>  [37] 0.19002387 0.09668287 0.14297462 0.11884520 0.18137131 0.09604546 #>  [43] 0.13793796 0.19055507 0.11347154 0.07725716 0.12906606 0.07764695 #>  [49] 0.08125217 0.07245476 0.06363757 0.11119898 0.16865215 0.10577447 #>  [55] 0.21110265 0.09781289 0.11084679 0.14933465 0.07757903 0.22813192 #>  [61] 0.09875702 0.10747134 0.13641438 0.16742019 0.27061775 0.23712666 #>  [67] 0.13959506 0.28623757 0.13528523 0.12462349 0.05603801 0.09715490 #>  [73] 0.10030104 0.08554512 0.16769181 0.10523460 0.09182054 0.25599278 #>  [79] 0.19716493 0.14627301 0.15356982 0.09900334 0.08128891 0.20611741 #>  [85] 0.17204179 0.25688856 0.12334344 0.09244068 0.20538923 0.10928922 #>  [91] 0.29713211 0.34794542 0.13578921 0.12893068 0.15385871 0.09169239 #>  [97] 0.13315023 0.21538582 0.18799248 0.13418807 0.19680767 0.19982114 #> [103] 0.26388690 0.19550901 0.20320043 0.06773431 0.17550233 0.21529091 #> [109] 0.13784328 0.20284702 0.19120467 0.15362606 0.16542940 0.18575542 #> [115] 0.23085802 0.15447198 0.11138301 0.09840187 0.25844855 0.17223314 #> [121] 0.15344701 0.13833191 0.14289706 0.13234967 0.11556001 0.11592906 #> [127] 0.10315136 0.08660667 0.09449550 0.16854420 0.18856090 0.15430410 #> [133] 0.09661260 0.28032529 0.21735301 0.12557330 0.20184812 0.09335452 #> [139] 0.18736053 0.19047223 0.20598213 0.14763848 0.13510977 0.12023468 #> [145] 0.20625454 0.18448368 0.14956688 0.16068554 0.10170993 0.18631713 #> [151] 0.15860217 0.09685768 0.31021140 0.07256171 0.18358676 0.11571334 #> [157] 0.11897874 0.28213843 0.17354708 0.54050221 0.21115082 0.16023562 #> [163] 0.21092455 0.15063153 0.16800965 0.25836353 0.20453967 0.20524870 #> [169] 0.18909853 0.15239066 0.19057706 0.31021140 0.17806749 0.18825405 #> [175] 0.23845054 0.16207528 0.14468703 0.22773153 0.09435823 0.20591807 #> [181] 0.09285024 0.14829706 0.18164147 0.11016136 0.12613775 0.13083017 #> [187] 0.15856212 0.14654668 0.11192022 0.09052024 0.18558041 0.14932045 #> [193] 0.19117145 0.16532975 0.23524530 0.17242759 0.16421283 0.15853904 #> [199] 0.18032470 0.27398573 0.21185651 0.08873293 0.17034044 0.20631894 #> [205] 0.17913107 0.27390014 0.14980278 0.10650226 0.12233789 0.15860333 #> [211] 0.07790451 0.17097513 0.17097513 0.16639106 0.13218349 0.19943419 #> [217] 0.14607979 0.09014777 0.16541099 0.21108869 0.21867079 0.13422304 #> [223] 0.15043220 0.27229967 0.14221377 0.22646860 0.12034653 0.12950380 #> [229] 0.12548953 0.45557358 0.11447949 0.12563839 0.22438920 0.25630906 #> [235] 0.09629856 0.13508804 0.16355792 0.18598939 0.36341332 0.18273404 #> [241] 0.12908144 0.11288943 0.19083150 0.16612828 0.11700099 0.13332849 #> [247] 0.12906516 0.24467925 0.17511908 0.19636436 0.13706344 0.09350376 #> [253] 0.11156260 0.07681448 0.10086700 0.18217069 0.08211883 0.18818291 #> [259] 0.12189647 0.12451514 0.28735398 0.14521698 0.23059541 0.04790616 #> [265] 0.06013623 0.22800985 0.18774418 0.27971046 0.13806851 0.03846176 #> [271] 0.14729532 0.24749122 0.21319807 0.18974506 0.20515873 0.22254970 #> [277] 0.13604209 0.22385117 0.09036809 0.08643619 0.17599821 0.11058212 #> [283] 0.22266788 0.90792902 0.25203713 0.09633983 0.21948222 0.14396076 #> [289] 0.26004314 0.21105243 0.25559727 0.18210567 0.13009828 0.38864150 #> [295] 0.16652945 0.11959406 0.36849624 0.19887907 0.24674728 0.18786913 #> --- #> Absolute mean prediction error for each test set sample: #> [[1]] #>   [1] 0.639812710 1.728652076 0.802728738 1.068664782 0.509884475 0.443834120 #>   [7] 1.778795719 1.707951484 0.581364417 1.779236657 0.486854157 0.376468936 #>  [13] 0.715406535 1.634078337 0.054522076 1.161650799 1.740578337 0.389893595 #>  [19] 1.538714709 0.031311347 0.865520787 1.488199902 0.731535368 0.111052248 #>  [25] 0.104213904 0.920199720 1.072970056 1.557923146 1.589685511 1.981304775 #>  [31] 1.790737280 1.535657507 2.257757940 0.805144341 1.425035142 1.489361200 #>  [37] 0.855622407 1.129081107 1.986525920 1.243347015 0.498346851 0.748741536 #>  [43] 0.880363834 1.199213789 0.218156034 1.496401694 2.301150689 0.904462346 #>  [49] 0.622586100 0.027112612 0.143570274 1.441423599 1.224283639 0.109178041 #>  [55] 1.073204962 0.088209298 1.315967949 2.806981476 1.963810759 1.595818003 #>  [61] 0.119306515 1.890562369 1.068519090 2.586166344 0.104238944 1.284283639 #>  [67] 2.502535164 0.714377910 0.361077210 0.004964891 1.190182265 0.269064444 #>  [73] 0.522665841 0.287735142 0.334417859 1.651955323 1.872898952 1.710504262 #>  [79] 0.860576242 0.312156724 2.056917661 1.268912438 1.552370417 1.492865920 #>  [85] 1.423811794 0.304902997 0.943973923 1.007302003 0.268239164 0.077852604 #>  [91] 0.397227200 1.574999201 2.439927322 1.469443326 0.268010248 0.082140833 #>  [97] 1.652266880 1.309732275 2.231149721 0.002849509 #>  #> [[2]] #>   [1] 0.3761254 1.0686362 0.9822736 0.1525924 0.8961379 2.2723739 2.0714944 #>   [8] 1.4591463 1.7583215 1.2206085 1.7216143 2.1029318 0.9041916 1.9164734 #>  [15] 1.6555303 1.5212896 0.1713064 1.6826830 0.4845723 1.0504444 0.5601090 #>  [22] 0.5565668 2.0394634 1.7641510 1.1248075 2.1042120 1.1213167 1.3636992 #>  [29] 0.3338557 1.8086985 1.3070499 1.9044063 0.1954925 2.1071527 0.2531252 #>  [36] 1.8888268 1.5903581 2.2373363 2.1912922 2.2373363 2.4847163 1.7504916 #>  [43] 0.8062721 0.9878200 1.8567469 1.6537348 1.8232545 1.8941021 2.0012004 #>  [50] 2.0299914 2.0463856 6.8750855 2.0265552 2.1496461 2.0326761 2.0341021 #>  [57] 2.2483376 2.2209414 1.4387582 2.1071983 2.2770486 2.3744691 1.9340489 #>  [64] 2.2387601 0.3949453 2.3930403 2.9662227 1.7043344 1.9380597 2.2208547 #>  [71] 1.8652574 2.0613709 2.6124837 2.2107478 2.7153936 1.8238502 2.3515942 #>  [78] 0.4086407 2.4985282 2.5847385 1.7424177 1.9049894 0.8165998 1.1007456 #>  [85] 3.2720013 2.5444853 2.7490399 1.9278361 2.6088437 1.0389593 2.3979256 #>  [92] 2.1731800 2.3825046 6.6641455 2.7777074 2.7732829 0.8122010 9.6228069 #>  [99] 1.0692105 2.0402506 #>  #> --- #> Prediction error SD for each test set sample: #> [[1]] #>   [1] 0.22083328 0.17054322 0.24153236 0.10511800 0.18976851 0.15932889 #>   [7] 0.23968000 0.11121425 0.16555398 0.24991955 0.21038877 0.36450188 #>  [13] 0.27819462 0.14341038 0.23339580 0.06099678 0.11001288 0.25935198 #>  [19] 0.27807784 0.12768484 0.39398892 0.13011395 0.25895425 0.41446740 #>  [25] 0.43185608 0.14108293 0.06591888 0.14312233 0.15275010 0.14042106 #>  [31] 0.13693109 0.25348023 0.12806220 0.17876048 0.17077105 1.34738600 #>  [37] 0.38800930 0.12158288 0.40278045 0.20050773 0.16542774 0.18043944 #>  [43] 0.19275518 0.10633509 0.13346924 0.25936149 0.13643158 0.21946839 #>  [49] 0.36433642 0.51283676 0.45020045 0.20389847 0.10552798 0.44284456 #>  [55] 0.22361746 0.28826144 0.31265941 0.28732216 0.21618896 0.22854181 #>  [61] 0.45194419 0.25694764 0.20225071 0.12415881 0.44521550 0.10552798 #>  [67] 0.30201059 0.21971458 0.43446870 0.30375351 0.38239730 0.53411721 #>  [73] 0.18460227 0.47744807 0.48077148 0.18288978 0.13848477 0.36567907 #>  [79] 0.28023087 0.46569848 0.15442597 0.42189035 0.18716995 0.26155751 #>  [85] 0.10627129 0.42819113 0.27761377 0.15701903 0.41389201 0.54313727 #>  [91] 0.22618794 0.33465260 0.12879614 1.58229002 0.25411121 0.20038697 #>  [97] 0.21076612 0.22063300 0.14627048 0.38272326 #>  #> [[2]] #>   [1] 0.49533369 0.21790280 0.21132863 0.50853899 0.12991737 0.21393065 #>   [7] 0.37625454 0.15044426 0.18557630 0.19134102 0.31622632 0.13592326 #>  [13] 0.31393839 0.18071248 0.16602440 0.12783851 0.41975925 0.24059637 #>  [19] 0.50266192 0.16308872 0.52542505 0.14443274 0.11613127 0.21903495 #>  [25] 0.22144174 0.10634338 0.23837872 0.87641235 0.26053470 0.16830009 #>  [31] 0.26533128 0.23475609 0.19978981 0.14754964 0.38769917 0.20811497 #>  [37] 0.19311046 0.21805196 0.11777125 0.21805196 0.20156731 0.22503077 #>  [43] 0.16719951 0.18271725 0.36899922 0.19970142 0.22984328 0.16888852 #>  [49] 0.15772463 0.14029879 0.38300912 6.37876528 0.19456094 0.05585043 #>  [55] 0.36750728 0.16888852 0.16055091 0.18454729 0.15758583 0.21966845 #>  [61] 0.19576505 0.36832384 0.29600309 0.15629316 0.11750815 0.14283549 #>  [67] 0.34619970 0.28154974 0.21481076 0.20259712 0.21311527 0.28408400 #>  [73] 0.31254966 0.15693373 0.14694409 0.21384984 0.14189051 0.15298061 #>  [79] 0.16228782 0.19340977 2.36340422 0.19607719 1.25635858 0.15177587 #>  [85] 0.32172107 0.11149303 0.07074771 0.21218978 0.21013675 0.14548796 #>  [91] 0.18829682 0.20021486 0.29721012 6.70765888 0.16740331 0.17198017 #>  [97] 0.25960303 7.99712131 0.16270696 0.10508260 #>  plot(ad)  # the interactive plot requires a HTML viewer if (FALSE) { # \\dontrun{ plot(ad, type = \"interactive\") } # }"},{"path":"https://nanx.me/enpls/reference/enspls.fit.core.html","id":null,"dir":"Reference","previous_headings":"","what":"core function for enspls.fit ‚Äî enspls.fit.core","title":"core function for enspls.fit ‚Äî enspls.fit.core","text":"select best ncomp alpha, use fit complete training set. scale = TRUE","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fit.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core function for enspls.fit ‚Äî enspls.fit.core","text":"","code":"enspls.fit.core(xtmp, ytmp, maxcomp, cvfolds, alpha)"},{"path":"https://nanx.me/enpls/reference/enspls.fit.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core function for enspls.fit ‚Äî enspls.fit.core","text":"coefficients","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","title":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","text":"Ensemble sparse partial least squares regression.","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","text":"","code":"enspls.fit(   x,   y,   maxcomp = 5L,   cvfolds = 5L,   alpha = seq(0.2, 0.8, 0.2),   reptimes = 500L,   method = c(\"mc\", \"boot\"),   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enspls.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","text":"x Predictor matrix. y Response vector. maxcomp Maximum number components included within model. specified, use 5 default. cvfolds Number cross-validation folds used model automatic parameter selection, default 5. alpha Parameter (grid) controlling sparsity model. specified, default seq(0.2, 0.8, 0.2). reptimes Number models build Monte-Carlo resampling bootstrapping. method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","text":"list containing sparse partial least squares model objects.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enspls.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Sparse Partial Least Squares Regression ‚Äî enspls.fit","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) fit <- enspls.fit(   x, y,   reptimes = 5, maxcomp = 3,   alpha = c(0.3, 0.6, 0.9) ) print(fit) #> Coefficients of the Models by Ensemble Sparse Partial Least Squares #> --- #>                             [,1]         [,2]         [,3]          [,4] #> BalabanJ            -0.043615048 -0.070476160 -0.061234111 -0.0641194287 #> BertzCT             -0.010797407 -0.010380918 -0.014190111 -0.0198473677 #> Chi0                 0.034719388  0.031396910  0.031244743  0.0305194922 #> Chi0n                0.053961369  0.051389288  0.054495519  0.0524801055 #> Chi0v                0.053701577  0.051940514  0.053866466  0.0534589673 #> Chi1                 0.051776232  0.049156542  0.049348357  0.0492213616 #> Chi1n                0.070459184  0.069096237  0.072714905  0.0727060040 #> Chi1v                0.044723121  0.043485995  0.047373453  0.0501593866 #> Chi2n                0.044969369  0.049246878  0.053608909  0.0505554796 #> Chi2v               -0.007655968 -0.004618584 -0.001476135  0.0001540116 #> Chi3n                0.032584667  0.042587170  0.046107374  0.0415386369 #> Chi3v               -0.028277116 -0.022984653 -0.021257238 -0.0203092032 #> Chi4n                0.025069486  0.035056020  0.037250699  0.0377062265 #> Chi4v               -0.032725942 -0.028311655 -0.028345799 -0.0254204075 #> EState_VSA1         -0.145952322 -0.151990047 -0.160770607 -0.1525700022 #> EState_VSA10        -0.156900443 -0.168802906 -0.175239253 -0.1722320471 #> EState_VSA11        -0.127792171 -0.135963476 -0.143448807 -0.1529079518 #> EState_VSA2         -0.088764258 -0.081331379 -0.090132085 -0.0733057615 #> EState_VSA3          0.056790068  0.028421271  0.053648385  0.0386607294 #> EState_VSA4          0.063669587  0.074797750  0.074053361  0.0699041874 #> EState_VSA5          0.076840942  0.113331436  0.116703240  0.1013286787 #> EState_VSA6         -0.039520870 -0.054418432 -0.060441879 -0.0391363977 #> EState_VSA7          0.167588096  0.158416601  0.168272101  0.1618998057 #> EState_VSA8          0.009235939  0.004258386 -0.006701922 -0.0011150675 #> EState_VSA9          0.160639733  0.170068653  0.176254590  0.1714440988 #> ExactMolWt           0.050748220  0.048487236  0.047997890  0.0454753788 #> FractionCSP3        -0.002537413  0.016775756  0.014177552  0.0000000000 #> HallKierAlpha        0.019451372  0.000000000  0.000000000  0.0329693176 #> HeavyAtomCount       0.041665347  0.039779625  0.039215273  0.0389117918 #> HeavyAtomMolWt       0.049142955  0.047099309  0.045859934  0.0431088851 #> Ipc                  0.057240507  0.060688810  0.069024848  0.0694421064 #> Kappa1               0.038204987  0.032402483  0.032511070  0.0348008587 #> Kappa2               0.073454618  0.061351458  0.062538464  0.0699833246 #> Kappa3               0.068769152  0.053787212  0.048842217  0.0663792137 #> LabuteASA            0.050468473  0.048957140  0.047963605  0.0492392904 #> MaxAbsEStateIndex   -0.058201076 -0.046954270 -0.035764073 -0.0459235492 #> MaxEStateIndex      -0.058201076 -0.046954270 -0.035764073 -0.0459235492 #> MinAbsEStateIndex    0.050724276  0.044527421  0.044215313  0.0353840523 #> MinEStateIndex       0.080735399  0.074187812  0.072888633  0.0724654251 #> MolMR                0.064441013  0.060992387  0.061907090  0.0617893424 #> MolWt                0.050700489  0.048453503  0.047956295  0.0454522770 #> NumValenceElectrons  0.041901095  0.039028411  0.040413395  0.0398859275 #> PEOE_VSA1           -0.123885717 -0.111986458 -0.128388290 -0.1335502496 #> PEOE_VSA10           0.060135647  0.072095820  0.042111810  0.0611046246 #> PEOE_VSA11           0.027518533  0.000000000  0.054256529  0.0593889088 #> PEOE_VSA12          -0.070409371 -0.085305819 -0.078339953 -0.0775848326 #> PEOE_VSA13           0.071124088  0.073838570  0.087264498  0.0780882742 #> PEOE_VSA14          -0.059283402 -0.052884362 -0.059018175 -0.0639531460 #> PEOE_VSA2           -0.135631007 -0.136699485 -0.158100226 -0.1453559333 #> PEOE_VSA3           -0.015399543 -0.030536558 -0.023616048 -0.0258053476 #> PEOE_VSA4            0.089159585  0.082572159  0.101865179  0.1083556038 #> PEOE_VSA5            0.000000000  0.000000000  0.000000000  0.0000000000 #> PEOE_VSA6            0.252455157  0.257218113  0.264862957  0.3016795122 #> PEOE_VSA7            0.131757300  0.126559513  0.126970928  0.1081498903 #> PEOE_VSA8           -0.251591255 -0.244659553 -0.247195649 -0.2892456024 #> PEOE_VSA9            0.093581834  0.074355909  0.075437882  0.0803304497 #> SMR_VSA1            -0.045809417 -0.040299095 -0.050701107 -0.0532047159 #> SMR_VSA10            0.025671513  0.036747988  0.020329048  0.0236814814 #> SMR_VSA2             0.000000000  0.000000000  0.000000000  0.0000000000 #> SMR_VSA3            -0.196156845 -0.207343129 -0.205718468 -0.1978050051 #> SMR_VSA4             0.086514311  0.092000949  0.090979644  0.1135589734 #> SMR_VSA5             0.144746921  0.144103173  0.158124866  0.1643202372 #> SMR_VSA6            -0.086355302 -0.087439103 -0.084443620 -0.0980728660 #> SMR_VSA7             0.021803034  0.011365422 -0.006054515  0.0030932243 #> SMR_VSA9             0.164334759  0.153864976  0.180528755  0.1579959854 #> SlogP_VSA1          -0.045042683 -0.031673412 -0.087011109 -0.0688301411 #> SlogP_VSA10          0.119767503  0.115394919  0.103222595  0.0843745870 #> SlogP_VSA11          0.114675123  0.110717941  0.114633271  0.0846142758 #> SlogP_VSA12          0.103280911  0.095740332  0.101496317  0.1105220578 #> SlogP_VSA2          -0.207711269 -0.202806412 -0.200423733 -0.2013781453 #> SlogP_VSA3          -0.153164458 -0.151392486 -0.134059624 -0.1516867090 #> SlogP_VSA4           0.080989430  0.078481646  0.076140508  0.0736978562 #> SlogP_VSA5           0.174022630  0.173399624  0.191735830  0.2059561988 #> SlogP_VSA6           0.136169116  0.133023697  0.110695001  0.1313060684 #> SlogP_VSA7           0.077780951  0.068859412  0.083787537  0.0846865586 #> SlogP_VSA8           0.000000000  0.000000000  0.067225424  0.0563976493 #> TPSA                -0.220618737 -0.215277058 -0.233074352 -0.2170641606 #> VSA_EState10         0.093743521  0.084141143  0.095789368  0.1014189884 #> VSA_EState8          0.089001823  0.076620959  0.083263325  0.0777088146 #> VSA_EState9         -0.089786907 -0.081994686 -0.094262874 -0.0921319769 #>                             [,5] #> BalabanJ            -0.073894883 #> BertzCT             -0.007687107 #> Chi0                 0.032319300 #> Chi0n                0.052919408 #> Chi0v                0.056854869 #> Chi1                 0.048305879 #> Chi1n                0.069904194 #> Chi1v                0.051215760 #> Chi2n                0.048557618 #> Chi2v                0.005050211 #> Chi3n                0.038590608 #> Chi3v               -0.016430846 #> Chi4n                0.028264216 #> Chi4v               -0.022830716 #> EState_VSA1         -0.151918402 #> EState_VSA10        -0.163913222 #> EState_VSA11        -0.114487283 #> EState_VSA2         -0.074990673 #> EState_VSA3          0.027238867 #> EState_VSA4          0.081673528 #> EState_VSA5          0.119173308 #> EState_VSA6         -0.062270377 #> EState_VSA7          0.169929249 #> EState_VSA8         -0.008508467 #> EState_VSA9          0.169614152 #> ExactMolWt           0.053132588 #> FractionCSP3         0.000000000 #> HallKierAlpha        0.000000000 #> HeavyAtomCount       0.039291679 #> HeavyAtomMolWt       0.051773716 #> Ipc                  0.040666065 #> Kappa1               0.035993825 #> Kappa2               0.066238470 #> Kappa3               0.056805777 #> LabuteASA            0.050833015 #> MaxAbsEStateIndex   -0.039681288 #> MaxEStateIndex      -0.039681288 #> MinAbsEStateIndex    0.058219064 #> MinEStateIndex       0.090836706 #> MolMR                0.065637066 #> MolWt                0.053101413 #> NumValenceElectrons  0.038876330 #> PEOE_VSA1           -0.131939533 #> PEOE_VSA10           0.063132746 #> PEOE_VSA11           0.000000000 #> PEOE_VSA12          -0.064913191 #> PEOE_VSA13           0.062907184 #> PEOE_VSA14          -0.053503851 #> PEOE_VSA2           -0.123394883 #> PEOE_VSA3           -0.021138001 #> PEOE_VSA4            0.044285049 #> PEOE_VSA5            0.000000000 #> PEOE_VSA6            0.269371381 #> PEOE_VSA7            0.118261626 #> PEOE_VSA8           -0.241824460 #> PEOE_VSA9            0.084102621 #> SMR_VSA1            -0.042033373 #> SMR_VSA10            0.054396319 #> SMR_VSA2             0.000000000 #> SMR_VSA3            -0.223644660 #> SMR_VSA4             0.086073286 #> SMR_VSA5             0.152844318 #> SMR_VSA6            -0.100483543 #> SMR_VSA7             0.017135164 #> SMR_VSA9             0.142266776 #> SlogP_VSA1          -0.055774803 #> SlogP_VSA10          0.082997064 #> SlogP_VSA11          0.088648633 #> SlogP_VSA12          0.112241959 #> SlogP_VSA2          -0.204690587 #> SlogP_VSA3          -0.156349706 #> SlogP_VSA4           0.077452104 #> SlogP_VSA5           0.198178112 #> SlogP_VSA6           0.127587128 #> SlogP_VSA7           0.000000000 #> SlogP_VSA8           0.000000000 #> TPSA                -0.214509241 #> VSA_EState10         0.084382079 #> VSA_EState8          0.077845374 #> VSA_EState9         -0.085217775 predict(fit, newx = x) #>    [1] -0.21812478  0.12954374 -0.22836445  0.72266012 -0.65113402 -0.67093505 #>    [7]  0.61382930 -0.45282799  0.04079630 -0.06416978  0.79365384  0.12145376 #>   [13]  0.94735040 -0.31389461  0.71790961  0.86124578  0.11327756 -0.75816147 #>   [19] -0.14327956  0.50469871  1.13848250  0.13954518  1.82076630  1.01476461 #>   [25]  0.61597016  0.56588233  1.24949794  0.78184040  0.07023968 -0.32560716 #>   [31] -0.24545686  0.91085846  0.13738773 -0.53752609  0.63554844  0.51586274 #>   [37]  0.85954447 -0.34395002 -0.34058240  0.78555752 -0.37085733  0.90052950 #>   [43]  0.61609279 -0.07109915 -0.02722697  0.10367080  0.33241944  0.22370098 #>   [49] -0.18123400 -0.06948561 -0.04929142 -0.02625836  1.41948475  1.05831350 #>   [55]  0.06012419  0.29274788  0.08855050  1.19392450 -0.03963956 -0.03859852 #>   [61]  1.55698261 -0.48803906  1.02916294  1.73890966  1.87076311  1.37864665 #>   [67]  0.35687448  1.29920486  0.83581663  0.56929089  0.03734973 -0.08841345 #>   [73]  0.64824435  0.48630316  0.60329239  0.88549938  0.78232696  2.06775912 #>   [79]  0.16023107  0.21624428  0.65925599  0.28744740  0.35358473  0.02157764 #>   [85]  0.01210593  1.43460139  0.34611658  1.93062414  1.47011892  0.32332532 #>   [91] -2.75216196 -0.09239403  1.93228703  1.18745000  0.92896916  0.07936765 #>   [97]  0.57574740  3.06349960  1.57459052  0.69355876  2.03717644  2.32170182 #>  [103]  2.37872621  0.55675433  0.73749034  0.30514075  2.52839101  0.81552872 #>  [109]  1.86824783  2.05754038  1.89541525  0.95149315  2.16796051  1.50048941 #>  [115] -0.74991974  1.47102994  0.78846108  0.66757694  2.02478816  2.05613690 #>  [121]  2.15884081  0.96573182  1.45225310  2.03433230  0.69620378  0.67020676 #>  [127]  0.60352076  0.56561324  0.67297570  0.92097974  1.72925411  0.41515221 #>  [133]  0.69226657  1.00435210  3.18574778  1.65347736  2.00896410  0.88105080 #>  [139]  1.87852077  1.50276630  2.01475491  1.50202430  2.34787066  2.29547931 #>  [145]  1.73951951  1.87369573  0.10181703  1.60406984  2.63131115  1.67713625 #>  [151]  2.37758761  1.16420952  0.09014479  0.79038294  0.60273235  2.97783189 #>  [157]  1.55249758  1.27479322 -0.08177682  2.06224907  1.71203469  0.40430446 #>  [163]  1.03784594 -0.05585030  2.90963566  2.25324795  3.27452491  1.81465273 #>  [169]  0.06877732  3.14362520  0.96626930  0.09014479  2.25611724  1.53916617 #>  [175]  0.96493001  0.55419333  0.61360396  3.08944475  0.87403643  0.72478628 #>  [181]  1.04688102  1.16477997  2.57168201  0.42632452  2.01035298  0.76253155 #>  [187]  3.09110582  1.90929431  2.15958110  0.78591758  2.46880186  2.84296075 #>  [193]  1.28366233  2.85257488  2.68044169  3.39255631  2.26836661  2.24079808 #>  [199]  2.49018036  1.93415899  2.83879092  2.11303966  1.51774075  3.03877760 #>  [205]  2.59849402  0.65488715  2.72806244  1.17884939  0.17669859  2.15719871 #>  [211]  0.15514763  2.42822603  2.42822603  1.25667525  0.31329578  1.14045628 #>  [217]  0.95532579  1.63389965  2.17121808  1.29001363  1.76115996  1.25941899 #>  [223]  1.42414047  2.83953430  2.67740439  2.95166975  1.68227772  3.40071089 #>  [229]  1.62936448  0.85561182  3.01245972  0.92991875  0.77365439  1.96666960 #>  [235]  3.00024939  3.28503639  0.61310141  1.94201300  2.40353511  1.19232925 #>  [241] -0.09550114  1.23995297  2.63687470  1.19868790  1.04309578  1.62212216 #>  [247]  2.92205143  2.95577383  2.18272258  2.64482555  0.48114460  2.04582163 #>  [253]  1.87306332 -0.48062134  1.20106309  2.72936162  0.64610937  3.27270717 #>  [259]  0.28593226  1.39754699  0.18411421  2.40169555  0.81423011  1.58414644 #>  [265]  1.76375833  1.14836361  3.37076887  0.78232687  3.61412792  1.86824079 #>  [271]  0.86233170  2.10578513  1.97974267  1.79262966  1.33904094  3.48216209 #>  [277]  1.36733642  0.88696460  2.18699788  0.60802340  1.81861812 -0.33457214 #>  [283]  1.15571465  0.56439084  2.53973482  1.20095316  2.89299092  0.71214121 #>  [289]  1.78068714  2.27025387  2.06220738  1.08875116  3.34335307  1.80834886 #>  [295]  1.26597645  1.26006793  2.14407649  1.21207573 -2.75006981  3.17121785 #>  [301]  2.52956041  0.61595411  3.22833031  3.14958916  3.82252458  3.07133976 #>  [307]  1.13923521  1.03993387  3.44022105  1.73357169  3.91978792  2.90468063 #>  [313]  2.70803946  0.82956052  4.01176722  1.94481665  1.67873024  3.08522677 #>  [319]  2.73714144  3.38938308  1.78975322  1.85503315  2.68328479  1.50043339 #>  [325]  1.52681426  1.94564739  2.24680402  1.37832637  1.31035711  0.92777893 #>  [331]  1.34967920  2.23747659  1.66338801  2.54412817  1.93949832  3.84327323 #>  [337]  2.34041959  1.62665557  1.20543992  1.64058558  3.19045356  2.85175173 #>  [343]  3.27029989 -0.29061181  3.47756378  3.22449876  1.87360099  2.63433780 #>  [349]  2.34452145  1.95996065  1.92284893  0.51518892  2.13868280  1.86215339 #>  [355]  1.94798224  4.67569714  1.61282318  1.34482648  1.75862888  1.65518633 #>  [361]  1.91067522  2.04404224  3.39635454  1.87228118  1.90006205  2.13868280 #>  [367]  0.15782769  3.43364346  1.57178256  4.63798128  2.23237403  2.04628161 #>  [373]  3.46524125  2.02383227  1.80821689  2.07126869  1.63056250  2.54983769 #>  [379]  0.10987772  1.83567901  1.25431766  2.48009915  1.41915723  1.52965346 #>  [385]  2.15499145  3.70594696 -0.28194095  3.32677095  1.87966418  2.10558633 #>  [391]  3.99745324  1.55812086  1.99856187  3.89588884  3.77808186  3.42453266 #>  [397]  1.81677761  2.19658826  1.77536759  1.51930238  2.05827236  3.10030703 #>  [403]  2.92326945  2.10587800  2.29381554  0.91106401  1.79888417  2.67948613 #>  [409]  3.04804372  3.50287327  2.86365029  2.10789329  3.58978806  1.72754828 #>  [415]  1.96350768  1.82919623  3.86178071  1.35734911  1.98331961  3.55699494 #>  [421]  2.33318865  0.33378792  1.81271763  1.87268863  0.07939267  1.59116606 #>  [427]  4.67063598  5.25186747  5.80784312  2.14972593  2.28486539  2.09380743 #>  [433]  4.78504057  1.62716609  3.70046592  1.86838471  2.20729621  1.61991796 #>  [439]  1.77143505  1.61991796  2.38545261  2.21020362  3.74839551  3.40623513 #>  [445]  1.88220243  2.74557869  2.45981970  2.48980577  2.28032701  2.49807785 #>  [451]  4.23368979  2.52989391  2.59780943  2.45304004  3.75197506  2.48980577 #>  [457]  2.49824529  2.55615346  3.33953104  1.93195431  2.52501761  2.94709171 #>  [463]  3.38900481  2.74764906  2.33555991  1.96482182  4.66543938  2.92528097 #>  [469]  3.12002394  2.29980988  3.19779522  2.83128396  4.53536185  3.38698261 #>  [475]  1.76854000  3.11151338  2.79375543 -0.86677482  3.06584623  2.12109409 #>  [481]  4.20163913  3.57745841  4.83825320  4.28016048  2.17954723  2.25650264 #>  [487]  1.96389737  1.12702691  2.42451663  4.62654854  3.47534571  3.23082867 #>  [493]  2.25615596  2.35024310  1.95823140  2.43676940  0.32568673  4.12169719 #>  [499]  4.92582143  4.14635067  4.43675970  3.11677301  3.34475616  3.26580201 #>  [505]  2.98354412  5.06105114  1.46841915  5.38613437  3.75547063  4.25938458 #>  [511] -0.10976488  3.03492810  3.69930400  3.14044768  3.12086214  4.15293048 #>  [517]  2.98127075  3.99768217 -0.35398504  2.97702915  5.20639521  3.67008569 #>  [523]  4.35526891  4.34339153  4.60734460  1.02229384  4.23555332  3.49136278 #>  [529]  6.23164106 -0.73213442  6.65914329  3.98747765  5.24720195  3.52351064 #>  [535]  6.83949436  0.07215180 -1.06854684  0.16100615  0.44678247  0.43315286 #>  [541] -0.10079426  3.06433482  4.61374803  4.26642723  3.75676158  4.13011292 #>  [547]  4.05504812  5.23447514  0.54320694  0.26358850  0.47923280  1.20245467 #>  [553] -0.33440371  3.60480349  5.03799222  4.17442486  0.94032030 -0.84196436 #>  [559]  1.17200396  2.84595264  0.82206120  0.37274485  2.62865316  1.54254898 #>  [565]  0.34930257  3.35566735  2.61556407  0.72745670  3.65243665  2.46128995 #>  [571]  2.04239169  3.09122324  1.93178301  0.72266765  3.19908188  1.71153471 #>  [577]  3.23303968  2.44735657 -0.34046193  2.52795400  2.31663297  1.02046448 #>  [583]  0.30053738  0.03439801  1.44552645 -0.28297008 -0.05359628  1.38017913 #>  [589]  0.79243316  2.65741366  2.19443573  1.56331062  0.02061230  3.80736290 #>  [595]  1.43335855  1.16154812  4.33192061  0.57137921  0.87993187  4.60455368 #>  [601]  1.37004326  1.42974011  3.19568580  1.35103257  1.36075138  1.74941627 #>  [607]  0.04450224  1.68423209  1.39919257  2.87960962  1.83390217  1.66876834 #>  [613]  1.76391927  0.58754943  3.33107676  3.24056100  1.90729682  1.50235623 #>  [619]  3.37939931  1.48313360  1.52958825  2.13012720  2.03571818  2.37949339 #>  [625]  3.09800295  1.50962024  0.22642826  1.24724197  1.53492749  1.19980790 #>  [631]  1.99926854  1.88464256  2.39671056  2.92585700  1.79840483  2.68684025 #>  [637]  2.69582679  3.86711302  3.23477431  2.63882016  2.85708426  1.98060621 #>  [643]  1.82458996  2.55023124  2.81165120  3.48882850  1.61761933  3.95978480 #>  [649]  2.25949158  2.13363580  1.20988843  2.22934956  1.98518542  2.08235507 #>  [655]  2.22223289  2.57025667  1.28315518  2.57460140  3.23886008  2.08637661 #>  [661]  2.68321245  1.07853455  2.61303559  3.48569156  3.84252931  3.52689545 #>  [667]  2.62372010  2.47400812  2.55102202  2.28441657  1.78789095  3.00505167 #>  [673]  1.42512225  2.12897264  2.02097509  2.12943268  1.87190663  2.51703177 #>  [679]  1.84668372  1.62795235  2.61682582  2.07902538  1.49666236  1.78954124 #>  [685]  1.43065456  1.19936785  2.26893635  2.42806920  2.50375078  2.78842705 #>  [691]  1.67792977  2.38307478  2.11808710  2.39554277  2.97456240  2.24011090 #>  [697]  3.42408655  2.07366955  1.89735276  2.20297747  2.48659082  2.69900519 #>  [703]  2.06677043  2.21659692  2.84902153  3.58248775  3.57745650  3.58951649 #>  [709]  3.47544471  2.92680732  3.39805023  5.14890527  3.04034041  2.22302725 #>  [715]  4.38766610  5.03225521  5.29484031  1.02325019  2.69245784  2.49343203 #>  [721]  2.23769200  1.49479959  1.41587049  1.44922585  1.85351325  1.37985474 #>  [727]  1.49030317  0.83513612  3.36371068  4.23638545  4.00612353  4.21052304 #>  [733]  3.88632749  3.94353482  3.71756999  3.33760044  3.42221209  3.54601607 #>  [739]  4.22028005  4.18488502 -0.16212599  4.04014889  3.46776328  2.95417121 #>  [745]  3.76126857  3.46775817  0.51817085  2.89209189  2.80727717  3.62248373 #>  [751]  3.86104976 -0.18241765  0.93921904  3.70525847  1.63443089  2.43718262 #>  [757]  2.90832587  2.33495255  2.30508579  1.76630774  1.98572361  1.80773511 #>  [763]  0.60768891  1.24569432  2.61209995  3.52387960  2.64435353  2.06969196 #>  [769]  2.21997924  1.72627403  3.35042252  2.10889268  2.09549945  2.88778738 #>  [775]  2.88468560  3.59390191  2.45624807  3.37754538  2.62880307  2.61171299 #>  [781]  1.29638245  3.40204416  2.60158561  1.20316935  1.71267140  3.08726162 #>  [787]  3.25355282  2.28729865  1.03321808  1.13218134  2.38850702  1.18475727 #>  [793]  2.57776595  2.13003670  1.10652215  1.84150657  2.62334347  3.01581911 #>  [799]  2.90756502  1.25945797  2.70314847  2.11654158  1.83729565  2.19720590 #>  [805]  2.69223950  0.25382039  3.37072235  2.72318454  2.79339183  2.82372254 #>  [811]  3.28577166  3.25679310  3.57511360  2.54612189  3.60093209  2.25260092 #>  [817]  2.30215625  1.83709314  3.41978388  4.01353323  3.41660117  4.37468597 #>  [823]  0.29674498  3.57935835  3.70495425  3.98561637  3.45428191  3.66086337 #>  [829]  3.27497089  3.14702539  4.23455078  1.76968264  3.18460459  2.81532365 #>  [835]  3.90984128  3.90256934  4.00893968  3.04089864  3.46683945  3.50718720 #>  [841]  3.40930517  4.95646668  3.27164935  1.58848984  2.90261349  4.09175507 #>  [847]  3.81362927  3.88564651  2.81371095  4.53622110  3.78021124  4.15543848 #>  [853]  4.32904620  3.95981489  3.99602330  3.83388189  2.76998912  4.58693927 #>  [859]  4.42723853  3.97654608  4.21212374  4.68451308  1.81950652  4.10562453 #>  [865]  4.57932529  5.15001640  5.57831159  5.57807989  5.09739506  5.01455994 #>  [871]  0.10896540  0.12535700  0.06271390  0.36057485  0.43108839  0.93320995 #>  [877]  0.16181753 -1.01411812 -0.10253743  0.30790409 -0.49951206  1.59514054 #>  [883]  2.08502953  2.40905181  2.82254816  4.84046308  3.74823508  1.30450749 #>  [889]  1.01459294  1.50277127  1.62491853  1.71717767  0.36370044  2.26131572 #>  [895]  1.88923418  0.29393852  0.33754865  0.59342459  1.60689411  1.22826065 #>  [901]  1.60922010  1.66156897  1.88934216  1.51557287  2.25085324  1.27091542 #>  [907]  0.54446153  2.84840128  2.53119334  0.45189876  0.39820538  0.89873987 #>  [913]  0.61200794  0.67950270  0.81035050 -0.27761592 -0.18237907 -0.14164102 #>  [919]  0.03506333  0.30686449  0.56680784  0.91550647 -0.60697486 -0.40537849 #>  [925] -0.36208492 -0.31864564 -0.05437869  2.73532574  1.93536313  0.62171751 #>  [931]  0.98490465  3.80736290  0.53687998  1.69084326  4.65621160  4.28264442 #>  [937]  0.46110121 -0.34046193  1.50065578  2.04239169  1.72653109  2.44735657 #>  [943]  4.72436140  4.17442486  1.07618295  1.35734911  0.19316557  2.31663297 #>  [949]  0.80594103  2.14192424  1.93178301  2.78284665  1.03068374  1.01076709 #>  [955]  0.21041549  1.05094298  0.05928069  1.90677231  0.52526021  1.56331062 #>  [961]  1.12259152  1.32515959  1.17843465  2.06983829  2.14192424  0.93414463 #>  [967]  2.20041325  3.58129049  2.97850838  3.03047152  0.69043958  0.59915148 #>  [973]  3.27879775  0.80955659  0.18395801  2.54807064  2.73532574  1.15388766 #>  [979]  1.99028693  0.33342454  0.50063027  0.36747631  1.17422988  4.80446578 #>  [985]  0.82812425  0.14862912  0.26265082  0.21386016  2.53847394 -0.03859852 #>  [991]  4.17015248  2.85175173  0.34930257  2.71290613  2.21749003  1.15036197 #>  [997]  0.58697193  1.29162488  0.21005844  0.75058928"},{"path":"https://nanx.me/enpls/reference/enspls.fs.core.html","id":null,"dir":"Reference","previous_headings":"","what":"core function for enspls.fs ‚Äî enspls.fs.core","title":"core function for enspls.fs ‚Äî enspls.fs.core","text":"select best ncomp alpha cross-validation, use fit complete training set. scale = FALSE","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fs.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core function for enspls.fs ‚Äî enspls.fs.core","text":"","code":"enspls.fs.core(xtmp, ytmp, maxcomp, cvfolds, alpha)"},{"path":"https://nanx.me/enpls/reference/enspls.fs.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core function for enspls.fs ‚Äî enspls.fs.core","text":"fitted coefficients","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","title":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","text":"Measuring feature importance ensemble sparse partial least squares.","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","text":"","code":"enspls.fs(   x,   y,   maxcomp = 5L,   cvfolds = 5L,   alpha = seq(0.2, 0.8, 0.2),   reptimes = 500L,   method = c(\"mc\", \"boot\"),   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enspls.fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","text":"x Predictor matrix. y Response vector. maxcomp Maximum number components included within model. specified, use 5 default. cvfolds Number cross-validation folds used model automatic parameter selection, default 5. alpha Parameter (grid) controlling sparsity model. specified, default seq(0.2, 0.8, 0.2). reptimes Number models build Monte-Carlo resampling bootstrapping. method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","text":"list containing two components: variable.importance - vector variable importance coefficient.matrix - original coefficient matrix","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enspls.fs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enspls.fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Sparse Partial Least Squares for Measuring Feature Importance ‚Äî enspls.fs","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) fs <- enspls.fs(x, y, reptimes = 5, maxcomp = 2) print(fs, nvar = 10) #> Variable Importance by Ensemble Sparse Partial Least Squares #> --- #>                     Importance #> Chi1                 117.01631 #> HeavyAtomCount        79.79144 #> Chi1n                 67.20777 #> MolMR                 63.52919 #> EState_VSA10          61.04311 #> LabuteASA             57.09849 #> NumValenceElectrons   54.98234 #> EState_VSA8           53.69517 #> EState_VSA1           53.21826 #> Chi0v                 51.59224 plot(fs, nvar = 10)  plot(fs, type = \"boxplot\", limits = c(0.05, 0.95), nvar = 10) #> Warning: Removed 6 rows containing non-finite outside the scale range #> (`stat_boxplot()`)."},{"path":"https://nanx.me/enpls/reference/enspls.od.core.html","id":null,"dir":"Reference","previous_headings":"","what":"core function for enspls.od ‚Äî enspls.od.core","title":"core function for enspls.od ‚Äî enspls.od.core","text":"select best ncomp alpha cross-validation, use fit complete training set, predict test set. scale = TRUE","code":""},{"path":"https://nanx.me/enpls/reference/enspls.od.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"core function for enspls.od ‚Äî enspls.od.core","text":"","code":"enspls.od.core(x.sample, y.sample, x.remain, y.remain, maxcomp, cvfolds, alpha)"},{"path":"https://nanx.me/enpls/reference/enspls.od.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"core function for enspls.od ‚Äî enspls.od.core","text":"error vector predicted y real y","code":""},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"Outlier detection ensemble sparse partial least squares.","code":""},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"","code":"enspls.od(   x,   y,   maxcomp = 5L,   cvfolds = 5L,   alpha = seq(0.2, 0.8, 0.2),   reptimes = 500L,   method = c(\"mc\", \"boot\"),   ratio = 0.8,   parallel = 1L )"},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"x Predictor matrix. y Response vector. maxcomp Maximum number components included within model. specified, use 5 default. cvfolds Number cross-validation folds used model automatic parameter selection, default 5. alpha Parameter (grid) controlling sparsity model. specified, default seq(0.2, 0.8, 0.2). reptimes Number models build Monte-Carlo resampling bootstrapping. method Resampling method. \"mc\" (Monte-Carlo resampling) \"boot\" (bootstrapping). Default \"mc\". ratio Sampling ratio used method = \"mc\". parallel Integer. Number CPU cores use. Default 1 (parallelized).","code":""},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"list containing four components: error.mean - error mean samples (absolute value) error.median - error median samples error.sd - error sd samples predict.error.matrix - original prediction error matrix","code":""},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"maximize probablity observation can selected test set (thus prediction uncertainty can measured), please try setting large reptimes.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/enspls.od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble Sparse Partial Least Squares for Outlier Detection ‚Äî enspls.od","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) od <- enspls.od(   x, y,   reptimes = 5, maxcomp = 3,   alpha = c(0.3, 0.6, 0.9) ) plot(od, prob = 0.1)  plot(od, criterion = \"sd\", sdtimes = 1)"},{"path":"https://nanx.me/enpls/reference/logd1k.html","id":null,"dir":"Reference","previous_headings":"","what":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","title":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","text":"Distribution coefficients pH 7.4 (logD7.4) dataset Wang et, al.","code":""},{"path":"https://nanx.me/enpls/reference/logd1k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","text":"","code":"data(logd1k)"},{"path":"https://nanx.me/enpls/reference/logd1k.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","text":"list 2 components: x - data frame 1,000 rows (samples) 80 columns (predictors) y - numeric vector length 1,000 (response) first 1000 compounds original dataset selected.","code":""},{"path":"https://nanx.me/enpls/reference/logd1k.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","text":"dataset contains distribution coefficients pH 7.4 (logD7.4) 1,000 compounds, 80 molecular descriptors computed RDKit.","code":""},{"path":"https://nanx.me/enpls/reference/logd1k.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","text":"Jian-Bing Wang, Dong-Sheng Cao, Min-Feng Zhu, Yong-Huan Yun, Nan Xiao, Yi-Zeng Liang. \"silico evaluation logD7.4 comparison prediction methods.\" Journal Chemometrics 29, . 7 (2015): 389‚Äì398.","code":""},{"path":"https://nanx.me/enpls/reference/logd1k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logD7.4 Data for 1,000 Compounds ‚Äî logd1k","text":"","code":"data(logd1k) str(logd1k) #> List of 2 #>  $ x:'data.frame':\t1000 obs. of  80 variables: #>   ..$ BalabanJ           : num [1:1000] 1.95 1.97 2.97 2.05 2.72 ... #>   ..$ BertzCT            : num [1:1000] 883 782 343 1134 437 ... #>   ..$ Chi0               : num [1:1000] 16.84 15.9 9.85 19.84 12.13 ... #>   ..$ Chi0n              : num [1:1000] 13.09 13.2 7.53 15.41 9.49 ... #>   ..$ Chi0v              : num [1:1000] 13.09 14.02 7.53 15.41 9.49 ... #>   ..$ Chi1               : num [1:1000] 11.56 10.39 6.16 13.47 7.56 ... #>   ..$ Chi1n              : num [1:1000] 8.13 7.38 4.16 9.11 5.22 ... #>   ..$ Chi1v              : num [1:1000] 8.13 8.78 4.16 9.11 5.22 ... #>   ..$ Chi2n              : num [1:1000] 6.37 6 2.88 6.89 3.51 ... #>   ..$ Chi2v              : num [1:1000] 6.37 7.96 2.88 6.89 3.51 ... #>   ..$ Chi3n              : num [1:1000] 4.61 4.16 1.97 5.13 2.37 ... #>   ..$ Chi3v              : num [1:1000] 4.61 6.08 1.97 5.13 2.37 ... #>   ..$ Chi4n              : num [1:1000] 3.31 2.77 1.15 3.67 1.41 ... #>   ..$ Chi4v              : num [1:1000] 3.31 4.11 1.15 3.67 1.41 ... #>   ..$ EState_VSA1        : num [1:1000] 17.21 10.21 0 17.21 5.43 ... #>   ..$ EState_VSA10       : num [1:1000] 19.09 8.42 9.9 19.09 14.7 ... #>   ..$ EState_VSA11       : num [1:1000] 0 0 0 0 0 4.39 0 0 0 0 ... #>   ..$ EState_VSA2        : num [1:1000] 17 0 17.8 10.9 11.7 ... #>   ..$ EState_VSA3        : num [1:1000] 24.3 13.1 18.7 24.3 25.2 ... #>   ..$ EState_VSA4        : num [1:1000] 25.9 29.6 0 30.4 0 ... #>   ..$ EState_VSA5        : num [1:1000] 12.26 14.17 6.07 6.2 6.07 ... #>   ..$ EState_VSA6        : num [1:1000] 6.07 7.05 17.69 10.63 17.69 ... #>   ..$ EState_VSA7        : num [1:1000] 9.47 38.49 0 36.09 6.92 ... #>   ..$ EState_VSA8        : num [1:1000] 5.32 9.88 0 5.32 5.32 ... #>   ..$ EState_VSA9        : num [1:1000] 0 0 5.11 0 0 ... #>   ..$ ExactMolWt         : num [1:1000] 331 322 183 381 224 ... #>   ..$ FractionCSP3       : num [1:1000] 0.412 0.467 0.444 0.238 0.455 0.474 0.529 0.4 0.5 0.286 ... #>   ..$ HallKierAlpha      : num [1:1000] -2.41 -1.57 -1.29 -3.19 -1.78 -2.61 -1.41 -1.78 -1.29 -1.25 ... #>   ..$ HeavyAtomCount     : int [1:1000] 24 22 13 28 16 27 24 15 14 10 ... #>   ..$ HeavyAtomMolWt     : num [1:1000] 313 300 170 361 208 ... #>   ..$ Ipc                : num [1:1000] 672747 115307 826 2613182 3288 ... #>   ..$ Kappa1             : num [1:1000] 15.14 15.33 9.79 18.19 12.29 ... #>   ..$ Kappa2             : num [1:1000] 5.59 5.57 4.09 7.09 5.34 ... #>   ..$ Kappa3             : num [1:1000] 2.45 2.6 2.09 3.03 2.85 ... #>   ..$ LabuteASA          : num [1:1000] 137 131 76.1 160.4 93.7 ... #>   ..$ MaxAbsEStateIndex  : num [1:1000] 14.6 12.3 11 14.9 11.2 ... #>   ..$ MaxEStateIndex     : num [1:1000] 14.6 12.3 11 14.9 11.2 ... #>   ..$ MinAbsEStateIndex  : num [1:1000] 0.137 0.502 0.104 0.055 0.042 0.045 0.385 0.208 0.253 0.162 ... #>   ..$ MinEStateIndex     : num [1:1000] -1.275 -3.361 -0.363 -1.333 -0.397 ... #>   ..$ MolMR              : num [1:1000] 88.5 89.5 48.8 106.3 60.4 ... #>   ..$ MolWt              : num [1:1000] 331 322 183 381 224 ... #>   ..$ NumValenceElectrons: int [1:1000] 126 120 72 144 88 144 132 82 78 54 ... #>   ..$ PEOE_VSA1          : num [1:1000] 19.89 9.88 14.78 19.89 14.99 ... #>   ..$ PEOE_VSA10         : num [1:1000] 11.4 0 0 11.4 0 ... #>   ..$ PEOE_VSA11         : num [1:1000] 0 0 5.75 0 5.75 ... #>   ..$ PEOE_VSA12         : num [1:1000] 5.43 0 5.43 5.43 11.34 ... #>   ..$ PEOE_VSA13         : num [1:1000] 0 0 0 0 0 ... #>   ..$ PEOE_VSA14         : num [1:1000] 5.97 10.21 0 5.97 0 ... #>   ..$ PEOE_VSA2          : num [1:1000] 4.79 4.3 4.79 4.79 9.59 ... #>   ..$ PEOE_VSA3          : num [1:1000] 9.19 0 0 9.19 0 ... #>   ..$ PEOE_VSA4          : num [1:1000] 0 12.7 0 0 0 ... #>   ..$ PEOE_VSA5          : num [1:1000] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ PEOE_VSA6          : num [1:1000] 0 0 0 18.2 0 ... #>   ..$ PEOE_VSA7          : num [1:1000] 25 44.3 13.3 30.7 13.8 ... #>   ..$ PEOE_VSA8          : num [1:1000] 43.8 43.8 25.4 43.4 31.8 ... #>   ..$ PEOE_VSA9          : num [1:1000] 11.2 5.69 5.69 11.2 5.69 ... #>   ..$ SMR_VSA1           : num [1:1000] 14.29 8.42 10.21 14.29 9.9 ... #>   ..$ SMR_VSA10          : num [1:1000] 22.56 26.8 0 22.56 5.91 ... #>   ..$ SMR_VSA2           : num [1:1000] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ SMR_VSA3           : num [1:1000] 9.88 14.19 4.57 9.88 9.88 ... #>   ..$ SMR_VSA4           : num [1:1000] 0 0 0 0 0 ... #>   ..$ SMR_VSA5           : num [1:1000] 18.88 6.42 19.89 6.92 26.81 ... #>   ..$ SMR_VSA6           : num [1:1000] 31.08 45.08 6.61 31.08 6.54 ... #>   ..$ SMR_VSA7           : num [1:1000] 39.9 30 28.2 69.8 28.2 ... #>   ..$ SMR_VSA9           : num [1:1000] 0 0 5.75 5.69 5.75 ... #>   ..$ SlogP_VSA1         : num [1:1000] 15.64 4.3 5.43 15.64 10.75 ... #>   ..$ SlogP_VSA10        : num [1:1000] 10.08 5.69 0 10.08 0 ... #>   ..$ SlogP_VSA11        : num [1:1000] 0 0 5.75 0 5.75 5.75 0 5.75 5.75 5.75 ... #>   ..$ SlogP_VSA12        : num [1:1000] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ SlogP_VSA2         : num [1:1000] 41.8 63.4 21.4 41.8 22.1 ... #>   ..$ SlogP_VSA3         : num [1:1000] 0 16.63 6.54 0 11.34 ... #>   ..$ SlogP_VSA4         : num [1:1000] 5.82 0 6.92 12.74 6.92 ... #>   ..$ SlogP_VSA5         : num [1:1000] 29.24 5.56 12.12 15.92 19.04 ... #>   ..$ SlogP_VSA6         : num [1:1000] 23.1 24.4 17.1 47.4 17.1 ... #>   ..$ SlogP_VSA7         : num [1:1000] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ SlogP_VSA8         : num [1:1000] 10.9 10.9 0 16.6 0 ... #>   ..$ TPSA               : num [1:1000] 74.6 59.6 62.5 74.6 71.3 ... #>   ..$ VSA_EState10       : num [1:1000] 0 -3.36 0 0 0 ... #>   ..$ VSA_EState8        : num [1:1000] 16.43 27.48 1.74 16.54 1.69 ... #>   ..$ VSA_EState9        : num [1:1000] 46.1 26 34.8 55 42 ... #>  $ y: num [1:1000] -0.96 -0.92 -0.9 -0.83 -0.82 -0.79 -0.78 -0.77 -0.77 -0.77 ..."},{"path":"https://nanx.me/enpls/reference/plot.cv.enpls.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cv.enpls object ‚Äî plot.cv.enpls","title":"Plot cv.enpls object ‚Äî plot.cv.enpls","text":"Plot cv.enpls object","code":""},{"path":"https://nanx.me/enpls/reference/plot.cv.enpls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cv.enpls object ‚Äî plot.cv.enpls","text":"","code":"# S3 method for class 'cv.enpls' plot(x, xlim = NULL, ylim = NULL, alpha = 0.8, main = NULL, ...)"},{"path":"https://nanx.me/enpls/reference/plot.cv.enpls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cv.enpls object ‚Äî plot.cv.enpls","text":"x object class cv.enpls. xlim x Vector length 2 - x axis limits plot. ylim y Vector length 2 - y axis limits plot. alpha alpha transparency value points, real number (0, 1]. main Plot title, used currently. ... Additional graphical parameters, used currently.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.cv.enpls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot cv.enpls object ‚Äî plot.cv.enpls","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.cv.enpls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cv.enpls object ‚Äî plot.cv.enpls","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) cvfit <- cv.enpls(x, y, reptimes = 10) #> Beginning fold 1  #> Beginning fold 2  #> Beginning fold 3  #> Beginning fold 4  #> Beginning fold 5  plot(cvfit)"},{"path":"https://nanx.me/enpls/reference/plot.cv.enspls.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cv.enspls object ‚Äî plot.cv.enspls","title":"Plot cv.enspls object ‚Äî plot.cv.enspls","text":"Plot cv.enspls object","code":""},{"path":"https://nanx.me/enpls/reference/plot.cv.enspls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cv.enspls object ‚Äî plot.cv.enspls","text":"","code":"# S3 method for class 'cv.enspls' plot(x, xlim = NULL, ylim = NULL, alpha = 0.8, main = NULL, ...)"},{"path":"https://nanx.me/enpls/reference/plot.cv.enspls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cv.enspls object ‚Äî plot.cv.enspls","text":"x object class cv.enspls. xlim x Vector length 2 - x axis limits plot. ylim y Vector length 2 - y axis limits plot. alpha alpha transparency value points, real number (0, 1]. main Plot title, used currently. ... Additional graphical parameters, used currently.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.cv.enspls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot cv.enspls object ‚Äî plot.cv.enspls","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.cv.enspls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cv.enspls object ‚Äî plot.cv.enspls","text":"","code":"# This example takes one minute to run if (FALSE) { # \\dontrun{ data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) cvfit <- cv.enspls(x, y, reptimes = 10) plot(cvfit) } # }"},{"path":"https://nanx.me/enpls/reference/plot.enpls.ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enpls.ad object ‚Äî plot.enpls.ad","title":"Plot enpls.ad object ‚Äî plot.enpls.ad","text":"Plot enpls.ad object","code":""},{"path":"https://nanx.me/enpls/reference/plot.enpls.ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enpls.ad object ‚Äî plot.enpls.ad","text":"","code":"# S3 method for class 'enpls.ad' plot(x, type = c(\"static\", \"interactive\"), main = NULL, ...)"},{"path":"https://nanx.me/enpls/reference/plot.enpls.ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enpls.ad object ‚Äî plot.enpls.ad","text":"x object class enpls.ad. type Plot type. Can \"static\" \"interactive\". main Plot title, used currently. ... Additional graphical parameters, used currently.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.enpls.ad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot enpls.ad object ‚Äî plot.enpls.ad","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.enpls.ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot enpls.ad object ‚Äî plot.enpls.ad","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  # training set x.tr <- x[1:100, ] y.tr <- y[1:100]  # two test sets x.te <- list(   \"test.1\" = x[101:150, ],   \"test.2\" = x[151:207, ] ) y.te <- list(   \"test.1\" = y[101:150],   \"test.2\" = y[151:207] )  set.seed(42) ad <- enpls.ad(   x.tr, y.tr, x.te, y.te,   space = \"variable\", method = \"mc\",   ratio = 0.9, reptimes = 50 ) plot(ad)  # the interactive plot requires a HTML viewer if (FALSE) { # \\dontrun{ plot(ad, type = \"interactive\") } # }"},{"path":"https://nanx.me/enpls/reference/plot.enpls.fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enpls.fs object ‚Äî plot.enpls.fs","title":"Plot enpls.fs object ‚Äî plot.enpls.fs","text":"Plot enpls.fs object","code":""},{"path":"https://nanx.me/enpls/reference/plot.enpls.fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enpls.fs object ‚Äî plot.enpls.fs","text":"","code":"# S3 method for class 'enpls.fs' plot(   x,   nvar = NULL,   type = c(\"dotplot\", \"boxplot\"),   limits = c(0, 1),   main = NULL,   ... )"},{"path":"https://nanx.me/enpls/reference/plot.enpls.fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enpls.fs object ‚Äî plot.enpls.fs","text":"x object class enpls.fs. nvar Number top variables show. Ignored sort = FALSE. type Plot type. \"dotplot\" \"boxplot\". limits Vector length 2. Set boxplot limits (quantile) remove extreme outlier coefficients. main Plot title, used currently. ... Additional graphical parameters, used currently.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.enpls.fs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot enpls.fs object ‚Äî plot.enpls.fs","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.enpls.fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot enpls.fs object ‚Äî plot.enpls.fs","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) fs <- enpls.fs(x, y, reptimes = 50) plot(fs)  plot(fs, nvar = 10)  plot(fs, type = \"boxplot\")  plot(fs, type = \"boxplot\", limits = c(0.05, 0.95)) #> Warning: Removed 106 rows containing non-finite outside the scale range #> (`stat_boxplot()`)."},{"path":"https://nanx.me/enpls/reference/plot.enpls.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enpls.od object ‚Äî plot.enpls.od","title":"Plot enpls.od object ‚Äî plot.enpls.od","text":"Plot enpls.od object","code":""},{"path":"https://nanx.me/enpls/reference/plot.enpls.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enpls.od object ‚Äî plot.enpls.od","text":"","code":"# S3 method for class 'enpls.od' plot(   x,   criterion = c(\"quantile\", \"sd\"),   prob = 0.05,   sdtimes = 3L,   alpha = 1,   main = NULL,   ... )"},{"path":"https://nanx.me/enpls/reference/plot.enpls.od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enpls.od object ‚Äî plot.enpls.od","text":"x object class enpls.od. criterion Criterion classified outlier, can \"quantile\" \"sd\". prob Quantile probability cut-value. sdtimes Times standard deviation cut-value. alpha alpha transparency value points, real number (0, 1]. main Plot title. ... Additional graphical parameters plot.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.enpls.od.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot enpls.od object ‚Äî plot.enpls.od","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.enpls.od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot enpls.od object ‚Äî plot.enpls.od","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) od <- enpls.od(x, y, reptimes = 50) plot(od, criterion = \"quantile\")  plot(od, criterion = \"sd\")"},{"path":"https://nanx.me/enpls/reference/plot.enspls.ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enspls.ad object ‚Äî plot.enspls.ad","title":"Plot enspls.ad object ‚Äî plot.enspls.ad","text":"Plot enspls.ad object","code":""},{"path":"https://nanx.me/enpls/reference/plot.enspls.ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enspls.ad object ‚Äî plot.enspls.ad","text":"","code":"# S3 method for class 'enspls.ad' plot(x, type = c(\"static\", \"interactive\"), main = NULL, ...)"},{"path":"https://nanx.me/enpls/reference/plot.enspls.ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enspls.ad object ‚Äî plot.enspls.ad","text":"x object class enspls.ad. type Plot type. Can \"static\" \"interactive\". main Plot title. ... Additional graphical parameters plot.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.enspls.ad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot enspls.ad object ‚Äî plot.enspls.ad","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.enspls.ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot enspls.ad object ‚Äî plot.enspls.ad","text":"","code":"data(\"logd1k\") # remove low variance variables x <- logd1k$x[, -c(17, 52, 59)] y <- logd1k$y  # training set x.tr <- x[1:300, ] y.tr <- y[1:300]  # two test sets x.te <- list(   \"test.1\" = x[301:400, ],   \"test.2\" = x[401:500, ] ) y.te <- list(   \"test.1\" = y[301:400],   \"test.2\" = y[401:500] )  set.seed(42) ad <- enspls.ad(   x.tr, y.tr, x.te, y.te,   maxcomp = 3, alpha = c(0.3, 0.6, 0.9),   space = \"variable\", method = \"mc\",   ratio = 0.8, reptimes = 10 ) plot(ad)  # the interactive plot requires a HTML viewer if (FALSE) { # \\dontrun{ plot(ad, type = \"interactive\") } # }"},{"path":"https://nanx.me/enpls/reference/plot.enspls.fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enspls.fs object ‚Äî plot.enspls.fs","title":"Plot enspls.fs object ‚Äî plot.enspls.fs","text":"Plot enspls.fs object","code":""},{"path":"https://nanx.me/enpls/reference/plot.enspls.fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enspls.fs object ‚Äî plot.enspls.fs","text":"","code":"# S3 method for class 'enspls.fs' plot(   x,   nvar = NULL,   type = c(\"dotplot\", \"boxplot\"),   limits = c(0, 1),   main = NULL,   ... )"},{"path":"https://nanx.me/enpls/reference/plot.enspls.fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enspls.fs object ‚Äî plot.enspls.fs","text":"x object class enspls.fs. nvar Number top variables show. Ignored sort = FALSE. type Plot type, can \"dotplot\" \"boxplot\". limits Vector length 2. Set boxplot limits (quantile) remove extreme outlier coefficients. main Plot title, used currently. ... Additional graphical parameters, used currently.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.enspls.fs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot enspls.fs object ‚Äî plot.enspls.fs","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.enspls.fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot enspls.fs object ‚Äî plot.enspls.fs","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) fs <- enspls.fs(x, y, reptimes = 5, maxcomp = 2) plot(fs, nvar = 10)  plot(fs, type = \"boxplot\", limits = c(0.05, 0.95), nvar = 10) #> Warning: Removed 6 rows containing non-finite outside the scale range #> (`stat_boxplot()`)."},{"path":"https://nanx.me/enpls/reference/plot.enspls.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot enspls.od object ‚Äî plot.enspls.od","title":"Plot enspls.od object ‚Äî plot.enspls.od","text":"Plot enspls.od object","code":""},{"path":"https://nanx.me/enpls/reference/plot.enspls.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot enspls.od object ‚Äî plot.enspls.od","text":"","code":"# S3 method for class 'enspls.od' plot(   x,   criterion = c(\"quantile\", \"sd\"),   prob = 0.05,   sdtimes = 3L,   alpha = 1,   main = NULL,   ... )"},{"path":"https://nanx.me/enpls/reference/plot.enspls.od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot enspls.od object ‚Äî plot.enspls.od","text":"x object class enspls.od. criterion Criterion classified outlier, can \"quantile\" \"sd\". prob Quantile probability cut-value. sdtimes Times standard deviation cut-value. alpha alpha transparency value points, real number (0, 1]. main Plot title. ... Additional graphical parameters plot.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/plot.enspls.od.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot enspls.od object ‚Äî plot.enspls.od","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/plot.enspls.od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot enspls.od object ‚Äî plot.enspls.od","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) od <- enspls.od(x, y, reptimes = 4, maxcomp = 2) plot(od, criterion = \"quantile\", prob = 0.1)  plot(od, criterion = \"sd\", sdtimes = 1)"},{"path":"https://nanx.me/enpls/reference/predict.enpls.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","title":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","text":"Make predictions new data fitted enpls.fit object.","code":""},{"path":"https://nanx.me/enpls/reference/predict.enpls.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","text":"","code":"# S3 method for class 'enpls.fit' predict(object, newx, method = c(\"mean\", \"median\"), ...)"},{"path":"https://nanx.me/enpls/reference/predict.enpls.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","text":"object object class enpls.fit. newx New data predict . method Use \"mean\" \"median\" create final prediction. ... Additional parameters predict.","code":""},{"path":"https://nanx.me/enpls/reference/predict.enpls.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","text":"numeric vector containing predicted values.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/predict.enpls.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/predict.enpls.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Predictions from a Fitted Ensemble Partial Least Squares Model ‚Äî predict.enpls.fit","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) fit <- enpls.fit(x, y, reptimes = 50) y.pred <- predict(fit, newx = x) plot(y, y.pred, xlim = range(y), ylim = range(y)) abline(a = 0L, b = 1L)  y.pred.med <- predict(fit, newx = x, method = \"median\") plot(y, y.pred.med, xlim = range(y), ylim = range(y)) abline(a = 0L, b = 1L)"},{"path":"https://nanx.me/enpls/reference/predict.enspls.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","title":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","text":"Make predictions new data fitted enspls.fit object.","code":""},{"path":"https://nanx.me/enpls/reference/predict.enspls.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","text":"","code":"# S3 method for class 'enspls.fit' predict(object, newx, method = c(\"mean\", \"median\"), ...)"},{"path":"https://nanx.me/enpls/reference/predict.enspls.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","text":"object object class enspls.fit. newx New data predict . method Use \"mean\" \"median\" create final prediction. ... Additional parameters predict.","code":""},{"path":"https://nanx.me/enpls/reference/predict.enspls.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","text":"numeric vector containing predicted values.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/predict.enspls.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/predict.enspls.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Predictions from a Fitted Sparse Ensemble Partial Least Squares Model ‚Äî predict.enspls.fit","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) fit <- enspls.fit(x, y, reptimes = 5, maxcomp = 2) y.pred <- predict(fit, newx = x) plot(y, y.pred, xlim = range(y), ylim = range(y)) abline(a = 0L, b = 1L)  y.pred.med <- predict(fit, newx = x, method = \"median\") plot(y, y.pred.med, xlim = range(y), ylim = range(y)) abline(a = 0L, b = 1L)"},{"path":"https://nanx.me/enpls/reference/print.cv.enpls.html","id":null,"dir":"Reference","previous_headings":"","what":"Print cv.enpls Object ‚Äî print.cv.enpls","title":"Print cv.enpls Object ‚Äî print.cv.enpls","text":"Print cv.enpls object.","code":""},{"path":"https://nanx.me/enpls/reference/print.cv.enpls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print cv.enpls Object ‚Äî print.cv.enpls","text":"","code":"# S3 method for class 'cv.enpls' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.cv.enpls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print cv.enpls Object ‚Äî print.cv.enpls","text":"x object class cv.enpls. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.cv.enpls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print cv.enpls Object ‚Äî print.cv.enpls","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.cv.enpls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print cv.enpls Object ‚Äî print.cv.enpls","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) cvfit <- cv.enpls(x, y, reptimes = 10) #> Beginning fold 1  #> Beginning fold 2  #> Beginning fold 3  #> Beginning fold 4  #> Beginning fold 5  cvfit #> Cross Validation Result for Ensemble Partial Least Squares #> --- #> RMSE = 3.6716 #> MAE = 2.511028 #> Rsquare = 0.999960"},{"path":"https://nanx.me/enpls/reference/print.cv.enspls.html","id":null,"dir":"Reference","previous_headings":"","what":"Print cv.enspls Object ‚Äî print.cv.enspls","title":"Print cv.enspls Object ‚Äî print.cv.enspls","text":"Print cv.enspls object.","code":""},{"path":"https://nanx.me/enpls/reference/print.cv.enspls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print cv.enspls Object ‚Äî print.cv.enspls","text":"","code":"# S3 method for class 'cv.enspls' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.cv.enspls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print cv.enspls Object ‚Äî print.cv.enspls","text":"x object class cv.enspls. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.cv.enspls.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print cv.enspls Object ‚Äî print.cv.enspls","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.cv.enspls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print cv.enspls Object ‚Äî print.cv.enspls","text":"","code":"# This example takes one minute to run if (FALSE) { # \\dontrun{ data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) cvfit <- cv.enspls(x, y, reptimes = 10) print(cvfit) } # }"},{"path":"https://nanx.me/enpls/reference/print.enpls.ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Print enpls.ad Object ‚Äî print.enpls.ad","title":"Print enpls.ad Object ‚Äî print.enpls.ad","text":"Print enpls.ad object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print enpls.ad Object ‚Äî print.enpls.ad","text":"","code":"# S3 method for class 'enpls.ad' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.enpls.ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print enpls.ad Object ‚Äî print.enpls.ad","text":"x object class enpls.ad. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enpls.ad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print enpls.ad Object ‚Äî print.enpls.ad","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print enpls.ad Object ‚Äî print.enpls.ad","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  # training set x.tr <- x[1:100, ] y.tr <- y[1:100]  # two test sets x.te <- list(   \"test.1\" = x[101:150, ],   \"test.2\" = x[151:207, ] ) y.te <- list(   \"test.1\" = y[101:150],   \"test.2\" = y[151:207] )  set.seed(42) ad <- enpls.ad(   x.tr, y.tr, x.te, y.te,   space = \"variable\", method = \"mc\",   ratio = 0.9, reptimes = 50 ) ad #> Model Applicability Domain Evaluation by ENPLS #> --- #> Absolute mean prediction error for each training set sample: #>   [1]  1.15659310  0.37135659  0.18687002  1.17664393  0.12373621  1.00392170 #>   [7]  0.04434202  0.63828656  0.43718385  0.64726539  0.09051787  0.48966778 #>  [13]  3.62308256  0.52948567  0.25251989  3.32711614  0.95156004  0.14091017 #>  [19]  0.85464231  1.29109538  0.02019387  0.32245514  0.62770096  0.25487849 #>  [25]  0.46810576  0.67759188  0.25457816  0.69278642  0.70787689  0.72829569 #>  [31]  1.57186733  0.76802915  1.31022753  0.72248475  0.85636595  1.22138075 #>  [37]  0.45068514  1.40704563  1.21935389  1.11988622  2.19718455  2.45031644 #>  [43]  1.49666523  1.08541858  1.52751554  1.68620203  0.74572579  0.87057898 #>  [49]  2.03595023  1.89786907  1.68599205  0.05692682  3.87440488  0.97422048 #>  [55]  0.40778747  0.94140304  2.54484306  2.66435962  1.66527372  0.38685260 #>  [61]  0.92713783  3.58843757 14.16899449  5.94141096  0.84436844  1.12210481 #>  [67]  2.29468141  1.39277186  1.44998603  2.38993959  0.59566790  1.09886862 #>  [73]  1.27593299  2.05666549  1.63679051  2.12750518  0.27833880  1.85919482 #>  [79]  1.80079825  0.74364023  1.06912418  0.38683360  5.70973358  0.35817828 #>  [85]  2.67017284  0.71305049  2.17485482  2.01172042  1.54421445  0.26828780 #>  [91]  1.23313227  3.79410089  2.79472535  4.15099941  6.49989050  1.74711076 #>  [97]  3.54480005  1.57668886  1.79632988  1.09721925 #> --- #> Prediction error SD for each training set sample: #>   [1] 0.6723203 0.9925861 0.7916684 0.5353981 0.6833493 0.3750142 0.5384201 #>   [8] 0.4394781 0.4478961 0.3115000 0.2965013 0.6564925 0.8581624 0.6408359 #>  [15] 0.2112281 0.7276103 0.4012712 0.2924988 0.5139599 0.4312994 0.3225841 #>  [22] 0.2810618 0.3927624 0.3747409 0.2372358 0.4391011 0.4310893 0.2127917 #>  [29] 0.4711463 0.4231286 0.3089803 0.2203195 0.7273629 0.5681682 0.1253907 #>  [36] 0.1542993 0.5196908 0.4079485 0.3314376 0.2223870 0.6052788 0.2461725 #>  [43] 0.3104808 0.6333215 0.4917393 0.5680786 0.7958397 0.3688654 0.6318733 #>  [50] 0.4057159 0.3159804 0.3805643 0.7569301 0.3793449 0.1648608 0.3351091 #>  [57] 0.4672745 0.8267976 0.4487075 0.3364956 0.4968275 0.2133814 0.8887981 #>  [64] 0.2061471 0.2362712 0.5270498 0.2774651 0.3162993 0.5402216 0.4409003 #>  [71] 0.2945032 0.4952080 0.2839455 0.5987966 0.3229918 0.3881967 0.4959163 #>  [78] 0.5784472 0.2844325 0.8621228 0.4714674 0.1963147 0.2992360 0.4816676 #>  [85] 0.1823169 0.4285107 0.1955258 0.5412362 0.2689507 0.8016830 0.3348107 #>  [92] 0.4141135 0.6989277 0.5368645 0.2533462 0.1989506 0.3307565 0.7953010 #>  [99] 0.2301105 0.5033743 #> --- #> Absolute mean prediction error for each test set sample: #> [[1]] #>  [1]  1.6168531  0.5129803  1.6250825  0.0203619  4.3383400  0.1106109 #>  [7]  0.8148653  1.9913556  3.2096770  2.2171926  2.5990837  2.6064094 #> [13]  3.3267257  1.5533525  0.2446492  2.7310229  3.3531130  0.6680140 #> [19]  1.9791727 12.2374458 13.4166499 11.1587762 14.5567185  8.4080822 #> [25] 10.1272429 10.6439947 13.7889019 12.3442711 12.6224187  7.7835221 #> [31]  4.2295455 12.6785692 12.9451491 13.7247623  5.0281196 13.6627983 #> [37] 12.7484447  5.1156233  3.4747344 13.4024321  6.8780031 12.3931679 #> [43]  5.5321643  3.3919701 13.4337748  8.3609657  4.5468609  3.7926681 #> [49]  8.4599080  7.8685360 #>  #> [[2]] #>  [1]  4.3639558  3.3964642 12.0544328 11.3324274  1.2463920  3.4669273 #>  [7]  2.2877420  8.5348824  2.0397521  0.3601160 38.9955576 33.2649875 #> [13] 37.2145440 33.8217957 37.3135529 31.7305484 42.5682817 37.0789591 #> [19] 25.5740117 28.1372472 31.0069656 25.5649259 27.7147261 37.1938925 #> [25] 33.1063600 24.4682094 22.2051201  0.2364423  1.0464166  3.5595735 #> [31]  2.7676125  2.3996208  1.7344534  0.7284600  6.1337782  1.5540024 #> [37]  5.0926006  5.2653924  0.7332907  1.3058880  4.0156528  1.0809554 #> [43]  4.9419237  0.7271527  3.9547319 16.5062741  3.9317236 15.0340504 #> [49]  3.5288351  7.1680305 13.2197061 11.5264492 12.0580371 13.5543787 #> [55]  8.0233824 13.7150370 12.3711093 #>  #> --- #> Prediction error SD for each test set sample: #> [[1]] #>  [1]   0.4797399   0.9133170   0.2210427   0.4467299   0.5539222   0.7202601 #>  [7]   0.3420715   0.4083844   0.7906344   1.3627053   0.8435695   0.6415281 #> [13]   0.8357520   0.9553027   0.8306586   0.8760966   0.6962081   1.5891505 #> [19]   1.0981642  12.2938695  12.2441362  11.7821422  11.3326666   9.8410896 #> [25]   7.9849343 376.9162082  11.1413626  10.5392662  10.4817856  10.3927164 #> [31]  11.0753343   9.4622277  10.1555745  10.7601625  10.8400841  10.0669724 #> [37]  10.0677476  10.2535897  10.6672633   9.0113683  10.2352971  10.4262657 #> [43]  10.3678646  10.4748206   9.7797714  10.3870910   9.8668577  10.2321430 #> [49]  10.0652508   9.5121937 #>  #> [[2]] #>  [1]  10.1638483  10.1759666   9.5177953   9.5385654   9.5055823   9.9554471 #>  [7]  10.0826334   8.5796991   9.4517702   9.3947894  30.8269969  26.2958694 #> [13]  26.7640324  28.8511638  27.9602633  28.0373320  28.6187614  29.0240439 #> [19]  27.9815166 359.7986836  28.5880154  28.7358163  27.3902084  27.9664479 #> [25]  28.3790335  27.1663120  27.9724002   0.2617093   1.4992584   1.3071739 #> [31]   0.5646261   0.4787582   0.3340600   0.6052250   0.7380154   0.3165511 #> [37]   0.4492955 384.6771020   0.2690984   0.4416264   0.8652585   0.1814238 #> [43]   0.3736143   0.3488580   0.9745984  11.3696246  10.2310526  11.3901862 #> [49]  10.9868325  10.5839028  11.0100009   8.9886192  10.0022008  10.6591029 #> [55]  11.0407728  10.8211976  10.5118858 #>"},{"path":"https://nanx.me/enpls/reference/print.enpls.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Fitted Ensemble Partial Least Squares Object ‚Äî print.enpls.fit","title":"Print Fitted Ensemble Partial Least Squares Object ‚Äî print.enpls.fit","text":"Print coefficients model enpls.fit object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Fitted Ensemble Partial Least Squares Object ‚Äî print.enpls.fit","text":"","code":"# S3 method for class 'enpls.fit' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.enpls.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Fitted Ensemble Partial Least Squares Object ‚Äî print.enpls.fit","text":"x object class enpls.fit. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enpls.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Fitted Ensemble Partial Least Squares Object ‚Äî print.enpls.fit","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Fitted Ensemble Partial Least Squares Object ‚Äî print.enpls.fit","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) fit <- enpls.fit(x, y, reptimes = 50) fit #> Coefficients of the Models by Ensemble Partial Least Squares #> --- #>                      [,1]          [,2]          [,3]          [,4] #> (Intercept)  1.246444e-02 -7.838445e-02     0.1316595  6.878848e-02 #> Chi.P.0     -3.970674e+02 -4.357396e+02  -691.3940195 -3.602751e+02 #> Chi.P.1     -7.593150e+02 -1.141336e+03 -1140.1003915 -5.130676e+02 #> Chi.P.2      2.687687e+03  3.807994e+03  3748.6881240  2.059388e+03 #> Chi.P.3      1.882890e+03  2.207855e+03  2008.2990357  1.437531e+03 #> Chi.P.4     -3.388155e+00 -3.027612e+00    -4.6614957 -8.653080e+00 #> Chi.P.5      3.772035e+02  3.544087e+02   375.2991534  2.652187e+02 #> Chi.C.3      4.953426e+01  2.936776e+01    44.3520782  2.936431e+01 #> Chi.PC.4    -1.931512e+02 -3.072224e+02  -216.6789119 -1.957108e+02 #> Kappa.1      3.178545e+03  3.646449e+03  2756.1404443  2.864882e+03 #> Kappa.2     -7.661953e+02 -1.368677e+03 -1127.1193547 -6.358414e+02 #> Kappa.3     -2.763624e+03 -3.341173e+03 -2675.6013255 -2.393720e+03 #> Kappa.4     -3.849355e+02 -6.247577e+02  -654.2501987 -3.045489e+02 #> Estate.1    -3.552818e+01  9.023558e+00   -67.7284861 -4.394761e+01 #> Estate.2    -3.318723e+01 -5.575609e+01     1.3683861  1.323503e+01 #> Estate.3     1.750400e+01  1.316610e+01     9.9482915  5.877328e+00 #> MEDV.11     -4.823338e+02 -5.157654e+02  -431.1275335 -4.194952e+02 #> MEDV.12     -1.574018e+03 -1.804298e+03 -1422.9805048 -1.351944e+03 #> MEDV.13      1.242545e+01  6.964565e+01    68.4026267  3.179590e+01 #> MEDV.22     -1.242084e+03 -1.144172e+03 -1013.8763021 -8.034431e+02 #> MEDV.23     -4.261937e+01 -7.907592e+01   -56.3412139 -4.544440e+01 #> MEDV.33     -8.265327e+00 -1.169523e+01   -10.3438058 -8.778274e+00 #>                     [,5]          [,6]          [,7]          [,8]         [,9] #> (Intercept)    0.1192686    0.03344926    0.21944264     0.1314681   -0.1235074 #> Chi.P.0      114.9443922  151.39081547   76.27238019  -240.2842370  136.2259522 #> Chi.P.1      125.5702331  156.49497768   74.10594136  -314.3791562  153.6673011 #> Chi.P.2       73.0142577  165.13287439   89.85345352  1754.4396814   98.3187971 #> Chi.P.3      405.5696834  316.55109345   98.35577626  1053.9047114  400.8124703 #> Chi.P.4       -6.1806747   -7.43198675   -9.88013951    -1.7153048   -1.0490295 #> Chi.P.5      151.3050887   53.18949975   33.64550622   205.3901684  185.5666573 #> Chi.C.3       31.8669841    5.61534624    6.88438491    24.6064764   44.8021383 #> Chi.PC.4      -3.4242247  -62.62347203  -18.92282780  -108.2810689   35.9479444 #> Kappa.1     -124.3226002  -92.83424253   35.49558819  1677.7447439 -165.4503200 #> Kappa.2      167.8271220  189.40945302   68.05805101  -347.2420950  210.0609736 #> Kappa.3       72.4517388  159.74215145  129.96585135 -1448.4760767   28.7696114 #> Kappa.4      119.2458271  152.85626389   75.89113737  -140.4589742  143.9957352 #> Estate.1    -133.7334943 -103.70780084   28.53493470     8.6757449 -169.5197610 #> Estate.2     104.8269219   99.62912201   -0.06672675   -27.9466777   85.3056800 #> Estate.3       3.9226254    6.12943382  -11.67554659    11.4841152    6.6412900 #> MEDV.11      -32.4282415  -54.73502499  -45.37809784  -284.6735242  -28.8282140 #> MEDV.12     -226.5718202 -263.52637925 -141.68720462  -977.5534500 -227.0272720 #> MEDV.13       -0.3000575   42.75351366   26.80771649    35.9614527  -10.6572758 #> MEDV.22     -407.6313928 -448.38276750   41.32777313  -854.6368553 -490.4915757 #> MEDV.23      -16.7949702  -73.40319374  -48.94258919   -72.7726511  -13.0687115 #> MEDV.33       -2.4328116   -6.40314188   -3.77969804    -7.6718770   -2.0709181 #>                     [,10]         [,11]         [,12]         [,13] #> (Intercept)     0.0952299 -7.533035e-02  2.726087e-02  3.802585e-02 #> Chi.P.0      -186.2134302 -4.633889e+02 -3.538618e+02 -3.063640e+02 #> Chi.P.1      -620.0046220 -8.072891e+02 -8.154466e+02 -7.408477e+02 #> Chi.P.2      2269.7060178  2.802732e+03  2.949372e+03  2.782580e+03 #> Chi.P.3      1305.5290186  1.949994e+03  1.812270e+03  1.874588e+03 #> Chi.P.4        -1.4658141 -4.224059e+00 -3.994658e+00 -5.215591e+00 #> Chi.P.5       263.4342742  3.533711e+02  3.357021e+02  3.627524e+02 #> Chi.C.3        34.5482525  4.004019e+01  3.298974e+01  4.285496e+01 #> Chi.PC.4     -133.6619962 -2.522639e+02 -2.046604e+02 -2.107894e+02 #> Kappa.1      1871.6456449  3.165754e+03  2.673910e+03  3.342556e+03 #> Kappa.2      -569.2174595 -8.790804e+02 -9.191529e+02 -9.822002e+02 #> Kappa.3     -1787.3837963 -2.755595e+03 -2.488446e+03 -2.972810e+03 #> Kappa.4      -414.7121909 -4.316163e+02 -4.448586e+02 -3.725222e+02 #> Estate.1      -91.9704597 -1.060894e+02  3.486721e+01 -6.444907e+01 #> Estate.2        2.2557378  2.546077e+01 -4.559803e+01 -4.233085e+00 #> Estate.3        8.2750120  1.305269e+01  1.802437e+01  1.595633e+01 #> MEDV.11      -308.6363838 -4.593386e+02 -4.073214e+02 -4.795827e+02 #> MEDV.12     -1050.7151125 -1.585065e+03 -1.466473e+03 -1.682701e+03 #> MEDV.13        47.7989661  4.542462e+01  3.386146e+01  2.952771e+01 #> MEDV.22      -811.3878203 -1.095467e+03 -1.120130e+03 -1.173663e+03 #> MEDV.23       -62.0031799 -6.104439e+01 -5.158575e+01 -5.283413e+01 #> MEDV.33        -8.3058078 -1.059688e+01 -8.342981e+00 -8.667960e+00 #>                     [,14]         [,15]         [,16]         [,17] #> (Intercept)    0.08805267     0.1311924 -5.291843e-02  2.467607e-02 #> Chi.P.0      128.73416209  -498.4958246 -5.298792e+02 -3.478092e+02 #> Chi.P.1      139.31472219  -648.5146975 -7.734374e+02 -3.136307e+02 #> Chi.P.2      138.46255953  2687.6633031  2.963036e+03  1.805095e+03 #> Chi.P.3      284.51738524  1665.2279359  1.738952e+03  1.103782e+03 #> Chi.P.4       -5.32622809    -4.7605938 -4.851129e+00 -2.242400e+00 #> Chi.P.5      132.97884367   298.5242595  3.454661e+02  2.507446e+02 #> Chi.C.3       33.69798165    31.2926561  4.387881e+01  3.861590e+01 #> Chi.PC.4      29.46008523  -200.2172196 -1.700069e+02 -8.397451e+01 #> Kappa.1     -106.56188705  2500.3540664  2.647402e+03  1.236983e+03 #> Kappa.2      185.71691987  -773.0577857 -8.043688e+02 -3.659646e+02 #> Kappa.3       36.56160928 -2230.8755424 -2.449748e+03 -1.219634e+03 #> Kappa.4      135.80436449  -426.4317101 -4.897427e+02 -2.624760e+02 #> Estate.1    -136.00640946   -92.6959258 -5.725439e+01 -8.777946e+01 #> Estate.2      79.44125554     6.8494772 -1.904631e+01  2.660165e+01 #> Estate.3       2.03106212     7.5234657  1.162960e+01  9.359179e+00 #> MEDV.11      -32.48020250  -382.6310569 -3.999401e+02 -2.271922e+02 #> MEDV.12     -213.23097763 -1276.0660551 -1.383241e+03 -8.036686e+02 #> MEDV.13        6.29646290    51.4445673  4.052299e+01  3.286213e+01 #> MEDV.22     -374.17098451  -914.2702081 -9.958034e+02 -7.587489e+02 #> MEDV.23      -23.12017855   -57.6622910 -4.784982e+01 -4.832512e+01 #> MEDV.33       -2.68142917    -8.9018915 -8.411920e+00 -6.506073e+00 #>                     [,18]         [,19]         [,20]         [,21] #> (Intercept)   -0.09040048  4.156524e-02  6.395476e-02     0.1223034 #> Chi.P.0       81.14481680 -2.854488e+02 -3.653410e+02  -290.7849931 #> Chi.P.1       83.60685082 -3.618192e+02 -4.956725e+02  -437.2478134 #> Chi.P.2       78.54002179  1.875427e+03  2.202052e+03  2115.3888038 #> Chi.P.3      112.03020721  1.235178e+03  1.391329e+03  1445.7062184 #> Chi.P.4       -9.36274629 -5.713304e+00 -3.787116e+00    -5.8948787 #> Chi.P.5       76.07556024  2.649673e+02  2.772492e+02   246.4588772 #> Chi.C.3       23.01333385  3.464507e+01  3.545692e+01    21.8569469 #> Chi.PC.4      24.29276082 -1.209906e+02 -1.421121e+02  -203.9326299 #> Kappa.1       -6.40462929  1.754698e+03  2.024447e+03  3171.2612444 #> Kappa.2       93.87070912 -4.676859e+02 -5.910617e+02  -731.2439522 #> Kappa.3       58.51252928 -1.619529e+03 -1.853187e+03 -2550.7430077 #> Kappa.4       82.73408489 -2.578726e+02 -2.795108e+02  -319.4767922 #> Estate.1    -136.67827755 -6.285670e+01 -8.258845e+01    42.6330798 #> Estate.2      82.16359717  2.580002e+01  1.406891e+01   -72.8386840 #> Estate.3     -16.42761494  1.114580e+01  9.022463e+00     2.9006126 #> MEDV.11      -22.02376396 -2.801039e+02 -3.212965e+02  -442.6971372 #> MEDV.12     -106.22127940 -1.018394e+03 -1.128810e+03 -1494.8166802 #> MEDV.13       24.73580106  2.768341e+01  3.704400e+01    30.0241274 #> MEDV.22       55.18581116 -8.105922e+02 -8.660804e+02  -783.7200263 #> MEDV.23      -19.48365509 -4.620548e+01 -4.819595e+01   -67.1022418 #> MEDV.33       -3.44968017 -6.847212e+00 -7.600378e+00    -8.7449426 #>                    [,22]         [,23]        [,24]         [,25]         [,26] #> (Intercept)    0.2193084 -2.348773e-02    0.1151192 -5.632583e-02   -0.04497163 #> Chi.P.0       67.7965837 -6.297741e+02   91.8073514 -2.093525e+02  146.52635231 #> Chi.P.1       68.2614215 -7.493253e+02   94.7512390 -5.360753e+02  158.54749398 #> Chi.P.2       64.2857629  3.144416e+03   84.4490981  1.989834e+03  147.99367308 #> Chi.P.3      107.7409256  1.651824e+03  146.8778113  1.381773e+03  267.65775917 #> Chi.P.4       -9.2261412 -1.582243e+00   -8.1860462 -5.933891e+00   -4.14951272 #> Chi.P.5       89.5724744  2.743289e+02   76.4454591  2.559710e+02  119.03126531 #> Chi.C.3       28.2276078  2.679225e+01   21.6817403  2.555790e+01   33.00245787 #> Chi.PC.4      29.2196878 -2.137538e+02    9.8249597 -1.704542e+02   25.32410475 #> Kappa.1        6.5303632  2.651939e+03  -13.2005713  2.187942e+03 -124.69942602 #> Kappa.2       71.2128622 -9.453564e+02  106.4176679 -4.282600e+02  208.07832694 #> Kappa.3       82.9266422 -2.391648e+03   72.3295896 -1.888850e+03   57.42340455 #> Kappa.4       68.2861453 -4.580112e+02   93.5596495 -3.018673e+02  153.57106033 #> Estate.1     -87.1144737 -5.273535e+01 -163.2770902 -8.004661e+01 -135.30099275 #> Estate.2      96.1113145 -3.972464e+00   86.6142855  1.636663e+01   88.64498788 #> Estate.3     -16.8460972  5.575601e+00  -15.1373430  1.185360e+01    3.69014729 #> MEDV.11      -34.4868838 -4.154152e+02  -27.1789639 -3.365432e+02  -33.03368303 #> MEDV.12     -114.1375195 -1.352071e+03 -114.2637591 -1.169266e+03 -220.81125268 #> MEDV.13       28.0609361  8.332264e+01   26.6114839  3.278048e+01   14.31650471 #> MEDV.22       66.4576815 -8.674400e+02   25.9998593 -9.352758e+02 -412.27077533 #> MEDV.23      -37.2330913 -9.178154e+01  -27.6302943 -5.457739e+01  -32.31941360 #> MEDV.33       -4.5712266 -1.192587e+01   -3.7583478 -7.849656e+00   -3.31414543 #>                     [,27]         [,28]        [,29]         [,30] #> (Intercept)    0.04374562  2.912022e-03   -0.1993842   -0.02620609 #> Chi.P.0      120.99257748  1.486671e+02  109.2323355   88.91734140 #> Chi.P.1      126.59878191  1.605912e+02  128.3081845   91.46501548 #> Chi.P.2      182.33245864  1.531265e+02   25.0674224   87.68118906 #> Chi.P.3       88.57933599  3.682129e+02  457.8455729  120.11536340 #> Chi.P.4      -11.66968878 -6.457610e+00   -4.9815825   -9.98542179 #> Chi.P.5       46.06718203  1.007879e+02  211.2596252   66.87397549 #> Chi.C.3       10.63040098  1.733023e+01   46.7806100   22.14778274 #> Chi.PC.4      18.13267882 -2.679118e+01   36.6356509   13.24319209 #> Kappa.1      -13.61746075 -1.103985e+02 -178.6294590   -8.12914013 #> Kappa.2      154.84130646  2.059184e+02  175.8167778  102.14731202 #> Kappa.3       59.91772298  9.101820e+01   39.6172467   66.64755179 #> Kappa.4      128.49952344  1.564359e+02  116.0767308   90.62843095 #> Estate.1     -80.78795059 -1.362215e+02 -165.7939866 -164.10211910 #> Estate.2      53.50338296  1.081021e+02  111.6772345  103.95835390 #> Estate.3      -3.50380851  7.307871e+00    4.9688522  -15.56017605 #> MEDV.11      -38.09382970 -3.738746e+01  -17.9420371  -23.31073532 #> MEDV.12     -186.75086737 -2.524439e+02 -202.7379850 -109.44608726 #> MEDV.13       29.37254346  2.071394e+01  -25.5943339   31.42631050 #> MEDV.22     -173.75933157 -4.784486e+02 -435.5795908   35.92312147 #> MEDV.23      -36.84290509 -3.755483e+01   10.9301518  -23.97873597 #> MEDV.33       -3.84610436 -3.909744e+00   -0.7342638   -3.87731991 #>                     [,31]         [,32]         [,33]        [,34]        [,35] #> (Intercept)  5.285207e-02 -4.087657e-02  8.235517e-02    0.0207164   -0.3892758 #> Chi.P.0     -1.121228e+03 -6.029116e+01 -3.664867e+02  119.0605638  143.1113050 #> Chi.P.1     -1.446561e+03 -6.249427e+02 -9.892404e+02  127.8788269  157.2042594 #> Chi.P.2      5.095428e+03  2.066337e+03  3.572337e+03  195.6664038  128.3042790 #> Chi.P.3      2.068007e+03  1.366312e+03  2.345598e+03  331.4797088  369.8712960 #> Chi.P.4     -4.374757e+00 -7.838732e+00 -4.255981e+00   -6.6379382    2.5003578 #> Chi.P.5      3.811741e+02  2.780290e+02  4.409144e+02   76.3535055   97.4749519 #> Chi.C.3      4.532302e+01  3.604576e+01  5.111362e+01   13.9988966   16.7430154 #> Chi.PC.4    -1.762346e+02 -1.472494e+02 -2.827972e+02  -46.2926540  -39.5671078 #> Kappa.1      1.184811e+03  1.960505e+03  4.103426e+03  -28.7161438 -113.1404551 #> Kappa.2     -1.303199e+03 -5.843606e+02 -1.386131e+03  150.5706625  197.0039194 #> Kappa.3     -1.741210e+03 -1.828659e+03 -3.738645e+03   84.4559573   97.6262886 #> Kappa.4     -1.358525e+03 -3.485870e+02 -4.966196e+02  127.6017851  150.9941559 #> Estate.1    -2.722104e+00 -8.363172e+01 -4.681820e+00 -110.8426938 -219.1124706 #> Estate.2    -2.209334e+01  3.189150e+01 -7.154599e+01   91.8425026  155.8298603 #> Estate.3     7.629877e+00  1.423729e+01  2.295319e+01    2.9908851    5.1810807 #> MEDV.11     -2.419671e+02 -3.284120e+02 -6.000753e+02  -56.0342439  -45.7786176 #> MEDV.12     -8.986966e+02 -1.125750e+03 -2.026022e+03 -255.4171078 -245.4227736 #> MEDV.13      1.116011e+02  3.573229e+01  2.700536e+01   33.1704841   41.5642317 #> MEDV.22     -7.894123e+02 -8.918826e+02 -1.410820e+03 -393.8915983 -460.4394660 #> MEDV.23     -5.399647e+01 -5.297287e+01 -5.992552e+01  -58.7414481  -64.4120936 #> MEDV.33     -9.563163e+00 -8.050611e+00 -1.008338e+01   -5.1038917   -6.5282383 #>                    [,36]         [,37]         [,38]         [,39] #> (Intercept)     0.180130     0.1747782  3.223681e-02 -9.686307e-02 #> Chi.P.0      -454.757890  -575.4021338 -4.960514e+02 -2.702114e+02 #> Chi.P.1     -1002.008056  -782.2569890 -8.580990e+02 -4.156535e+02 #> Chi.P.2      3317.996049  2898.9118310  2.984437e+03  1.833811e+03 #> Chi.P.3      1428.183150  1887.0164603  1.839520e+03  1.162487e+03 #> Chi.P.4        -4.218798    -8.1714570 -3.623802e+00 -6.131265e+00 #> Chi.P.5       238.546092   362.5424797  3.506188e+02  2.284663e+02 #> Chi.C.3        23.417402    41.4856285  4.103791e+01  2.709905e+01 #> Chi.PC.4     -160.330305  -218.5644523 -2.047444e+02 -1.219355e+02 #> Kappa.1      1378.420491  3626.1226005  3.126343e+03  1.493795e+03 #> Kappa.2      -871.074550  -910.0871115 -8.407136e+02 -4.039880e+02 #> Kappa.3     -1605.807174 -3125.8585552 -2.798602e+03 -1.370172e+03 #> Kappa.4      -699.194412  -439.0422331 -4.532499e+02 -2.605861e+02 #> Estate.1      -75.188117     8.1454541 -9.130401e+01 -1.091252e+02 #> Estate.2       26.948293   -55.7209225  1.896848e+01  5.426602e+01 #> Estate.3        5.025732    11.2471358  1.289005e+01  7.215722e+00 #> MEDV.11      -265.018981  -509.3785158 -4.581410e+02 -2.360206e+02 #> MEDV.12      -906.926503 -1729.9087986 -1.562400e+03 -8.787567e+02 #> MEDV.13       107.281786    21.7718813  4.681130e+01  3.949740e+01 #> MEDV.22      -666.599985 -1027.6895768 -1.095979e+03 -7.322395e+02 #> MEDV.23       -74.982737   -42.6892002 -5.413007e+01 -4.485792e+01 #> MEDV.33       -10.487102    -8.9081547 -1.022301e+01 -7.149544e+00 #>                     [,40]         [,41]         [,42]        [,43] #> (Intercept)  8.230512e-02  4.801751e-02     0.1191981    0.1317047 #> Chi.P.0     -2.360277e+02 -5.201022e+02  -520.8814465   83.5326356 #> Chi.P.1     -4.317225e+02 -9.403190e+02 -1173.5491430   85.6547918 #> Chi.P.2      2.017850e+03  3.196718e+03  3623.4482082   80.7620107 #> Chi.P.3      1.452862e+03  1.939346e+03  2335.9135471  119.4739387 #> Chi.P.4     -4.913138e+00 -5.820418e+00    -6.0823712   -9.4373810 #> Chi.P.5      3.040830e+02  3.739852e+02   460.0400652   70.5019007 #> Chi.C.3      4.159134e+01  4.234345e+01    54.9779923   23.1205059 #> Chi.PC.4    -1.397978e+02 -2.091701e+02  -247.0420518   13.2936593 #> Kappa.1      2.512855e+03  2.835215e+03  3906.5217998   -3.9170264 #> Kappa.2     -5.679603e+02 -8.192789e+02 -1187.1982216   93.1275808 #> Kappa.3     -2.178895e+03 -2.567306e+03 -3511.1222236   74.7151564 #> Kappa.4     -2.746432e+02 -7.606963e+02  -640.2636763   85.0586715 #> Estate.1    -8.738426e+01 -6.214043e+00    53.0199628 -166.5871045 #> Estate.2     2.087682e+01 -3.604692e+01   -59.1987760  112.7558623 #> Estate.3     1.260388e+01  1.267503e+01    19.4082327  -16.4353026 #> MEDV.11     -3.731358e+02 -4.224191e+02  -548.6770470  -28.9246852 #> MEDV.12     -1.271655e+03 -1.440250e+03 -1932.9171940 -113.2827815 #> MEDV.13      1.711199e+01  3.464231e+01    18.9475056   34.7176976 #> MEDV.22     -1.018641e+03 -1.088777e+03 -1358.1823678   41.5437637 #> MEDV.23     -4.175767e+01 -4.452709e+01   -41.4762992  -32.1378996 #> MEDV.33     -6.924897e+00 -8.623157e+00    -9.3478123   -4.3010588 #>                     [,44]        [,45]         [,46]        [,47]        [,48] #> (Intercept)   -0.03908469   -0.2069478   -0.04211695    0.1175324    0.2551903 #> Chi.P.0      132.21311716  142.4009335   97.51169123   74.9575665   60.0170126 #> Chi.P.1      144.36051640  159.4238786   99.76574836   74.8023321   60.5047190 #> Chi.P.2      103.66701406   90.1843563   92.53607763   74.6339771   60.0919640 #> Chi.P.3      440.88280955  418.5968720  155.35012786  106.9724734   66.3098689 #> Chi.P.4       -8.10464618   -4.9818489   -7.02302825  -12.2173056   -8.0551176 #> Chi.P.5      114.80375273  129.1254892   53.67733664   45.9639923  101.8651486 #> Chi.C.3       16.43237591   22.8122938   12.44823446   13.6443754   31.3235903 #> Chi.PC.4     -57.72797804  -21.6599247  -16.84616606   -6.0832435   59.4204346 #> Kappa.1     -112.16912361 -147.3979927   -5.03886120   22.7216847    1.3029410 #> Kappa.2      179.61674470  202.8993556  108.43006643   74.6542267   65.5196440 #> Kappa.3      132.89179056  101.8846312   94.33425016   96.9358951   57.1306256 #> Kappa.4      138.80759830  149.1680679   99.01208108   75.1370811   60.6115682 #> Estate.1    -134.18779605 -155.7463835 -216.47287784  -96.2872156  -11.7556172 #> Estate.2     119.05757044  131.6185575  155.21017579   69.4014499   29.4842088 #> Estate.3       7.56165528    7.0887313  -13.97436636  -14.1398658  -17.7400162 #> MEDV.11      -46.70643883  -29.4044529  -29.56991555  -28.1388076  -30.6636088 #> MEDV.12     -268.01018090 -224.2267230 -124.18656476 -111.3402733 -102.2685725 #> MEDV.13       24.51688015   12.2829935   53.18273863   31.5214270    7.3296599 #> MEDV.22     -481.61777979 -483.9581247    1.42251665   91.1984925   92.4487723 #> MEDV.23      -54.03483153  -25.8707433  -47.62213452  -27.6452118  -22.0167765 #> MEDV.33       -4.93339249   -3.4370831   -5.95585528   -3.9031651   -2.3022137 #>                     [,49]        [,50] #> (Intercept)   -0.04866931    0.1748453 #> Chi.P.0      122.23201797  149.1362350 #> Chi.P.1      133.26691772  161.6037046 #> Chi.P.2       95.74635679  155.4433908 #> Chi.P.3      367.97914127  264.2710091 #> Chi.P.4      -10.34265722   -4.5266769 #> Chi.P.5      152.61239902   80.6744925 #> Chi.C.3       35.74740421   15.1505543 #> Chi.PC.4      19.83267238  -10.5888549 #> Kappa.1     -118.54603237  -98.1216228 #> Kappa.2      176.00128264  201.9980903 #> Kappa.3       44.78004489   83.1922641 #> Kappa.4      128.52665001  157.6049414 #> Estate.1    -157.57778557 -131.4061131 #> Estate.2     109.53639031   88.3252086 #> Estate.3       4.35857625    2.8050891 #> MEDV.11      -28.13157019  -35.1417473 #> MEDV.12     -222.30441671 -218.2617326 #> MEDV.13       -3.25534843   24.7291947 #> MEDV.22     -399.46058127 -398.6099385 #> MEDV.23       -8.14815971  -40.4229932 #> MEDV.33       -1.93983979   -4.9163992"},{"path":"https://nanx.me/enpls/reference/print.enpls.fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Print enpls.fs Object ‚Äî print.enpls.fs","title":"Print enpls.fs Object ‚Äî print.enpls.fs","text":"Print enpls.fs object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print enpls.fs Object ‚Äî print.enpls.fs","text":"","code":"# S3 method for class 'enpls.fs' print(x, sort = TRUE, nvar = NULL, ...)"},{"path":"https://nanx.me/enpls/reference/print.enpls.fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print enpls.fs Object ‚Äî print.enpls.fs","text":"x object class enpls.fs. sort variables sorted decreasing order importance? nvar Number top variables show. Ignored sort = FALSE. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enpls.fs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print enpls.fs Object ‚Äî print.enpls.fs","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print enpls.fs Object ‚Äî print.enpls.fs","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) fs <- enpls.fs(x, y, reptimes = 100) print(fs) #> Variable Importance by Ensemble Partial Least Squares #> --- #>          Importance #> Chi.C.3   2.4893750 #> MEDV.23   2.1020096 #> MEDV.33   2.0385631 #> Chi.P.4   2.0380899 #> Chi.P.5   1.5874477 #> Estate.1  1.4055916 #> MEDV.13   1.4055718 #> MEDV.22   1.2215816 #> Chi.P.3   1.1170859 #> MEDV.12   1.0652457 #> MEDV.11   0.9543018 #> Chi.P.2   0.8644542 #> Estate.2  0.8576835 #> Chi.PC.4  0.7431531 #> Kappa.1   0.7276681 #> Kappa.3   0.7165651 #> Chi.P.1   0.5003089 #> Kappa.2   0.4640071 #> Kappa.4   0.3839143 #> Chi.P.0   0.3616612 #> Estate.3  0.2329668 print(fs, nvar = 10L) #> Variable Importance by Ensemble Partial Least Squares #> --- #>          Importance #> Chi.C.3    2.489375 #> MEDV.23    2.102010 #> MEDV.33    2.038563 #> Chi.P.4    2.038090 #> Chi.P.5    1.587448 #> Estate.1   1.405592 #> MEDV.13    1.405572 #> MEDV.22    1.221582 #> Chi.P.3    1.117086 #> MEDV.12    1.065246"},{"path":"https://nanx.me/enpls/reference/print.enpls.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Print enpls.od Object ‚Äî print.enpls.od","title":"Print enpls.od Object ‚Äî print.enpls.od","text":"Print enpls.od object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print enpls.od Object ‚Äî print.enpls.od","text":"","code":"# S3 method for class 'enpls.od' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.enpls.od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print enpls.od Object ‚Äî print.enpls.od","text":"x object class enpls.od. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enpls.od.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print enpls.od Object ‚Äî print.enpls.od","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enpls.od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print enpls.od Object ‚Äî print.enpls.od","text":"","code":"data(\"alkanes\") x <- alkanes$x y <- alkanes$y  set.seed(42) od <- enpls.od(x, y, reptimes = 40) od #> Outlier Detection by Ensemble Partial Least Squares #> --- #> Mean residual for each sample: #>   [1]  1.88619274 10.90589635  3.50508166  3.38765122  2.80640829  0.78893412 #>   [7]  2.52860922  0.03359353  1.55523763  0.48649170  0.43432626  0.60264392 #>  [13]  4.60743523  0.67644470  0.53639715  4.43822997  1.47247790  0.29597845 #>  [19]  1.79350103  2.18053241  0.17188372  0.11895953  2.41099045  0.35806773 #>  [25]  0.26331275  3.06233743  0.15693996  0.47571654  3.58846460  0.75389595 #>  [31]  2.50497874  0.18582900  0.58313578  0.19857068  0.93819095  1.30236929 #>  [37]  1.78072059  1.74212844  1.81681614  0.56607629  0.11198885  2.51452857 #>  [43]  0.95370707  2.29811304  1.92107913  1.25562046  1.43286292  2.09648342 #>  [49]  2.36905445  2.12219678  1.02728317  1.16916512  6.31964132  2.40059584 #>  [55]  1.48499676  0.90542576  3.08868401  3.91110096  0.95160646  0.07916320 #>  [61]  0.18462919  3.17758683 17.27644064  6.39155053  0.32285733  2.47408085 #>  [67]  2.70747954  0.41655958  1.69315765  1.50239800  0.10204587  1.15648225 #>  [73]  0.62900446  1.64331655  0.55503176  3.31420980  1.27605642  1.39046876 #>  [79]  2.23278137  1.51773588  0.20539385  0.33542097  6.67689517  0.58165439 #>  [85]  2.64143148  1.63360300  1.67683506  1.64568659  0.65114573  0.72723380 #>  [91]  1.04133381  4.38394410  0.97271337  3.13695344  7.43233908  2.09214321 #>  [97]  3.55130795  1.70256745  1.61429257  0.67112325  1.55760643  1.66972207 #> [103]  1.17502778  0.44144264  0.62612126  1.63479798  0.16358120  0.65135135 #> [109]  3.11193984  2.39647052  2.11746126  3.37532333  3.08305474  2.69521595 #> [115]  0.86578014  0.13498366  3.70654747  1.29143687  2.34495998  3.88766352 #> [121]  1.80232307  3.44598270  0.06232686  2.53641137  0.44721954  1.09185683 #> [127]  0.38141453  0.20658348  0.16049292  4.42702163  5.76809366  4.19214667 #> [133]  1.50250723  0.81938085  3.55811038  0.06429908  1.04534298  4.71816950 #> [139]  4.80303317  7.30939897  2.97319816  0.41884796  2.48666014  3.91764922 #> [145]  0.69902110  0.82941173  4.12322010  3.34525976  0.14185730  4.09483062 #> [151]  2.83445432  2.44515884  0.14714117  1.74312000 10.78168799  2.67905773 #> [157]  2.27492015  0.81146521  3.28294805  3.76191119  1.21226660  0.70449836 #> [163]  5.44513387  0.98019630  5.54076365  1.11716981 13.40151891  8.10166836 #> [169]  5.05451974  4.16001828  1.44731150  3.30748113  3.67192369  9.34781239 #> [175]  5.37195673  4.14563113  5.10334839  1.04458199  0.86669564  3.11206791 #> [181]  3.08644803  1.73851775  4.08310808  0.80871455  4.90638801  1.30481757 #> [187]  3.06970899  2.05049667  1.30072269  0.66595903  4.79211893  0.75554939 #> [193]  4.85263504  1.38490605  3.36337975  0.22302993 10.81017088  4.07946712 #> [199]  8.66505567  3.56557630  4.11653349  2.23784104  0.80040234  5.02267651 #> [205]  2.00460709  2.60222215  5.51750096 #> --- #> Residual SD for each sample: #>   [1] 3.3041016 3.7528097 0.6287911 1.9469013 1.1232235 0.5485301 1.4045617 #>   [8] 0.7522304 1.6296649 0.7087677 0.6081811 0.7877093 0.7357322 0.9403901 #>  [15] 0.5816742 0.5833505 0.2736066 0.4684476 0.5743993 0.6081003 0.3609794 #>  [22] 0.6143993 0.4156304 0.4969925 0.4222710 0.6887305 0.5441532 0.4896297 #>  [29] 0.9879193 0.4818513 0.7219000 0.7966308 0.5409247 0.2278245 0.6380086 #>  [36] 0.4632656 2.3365104 0.5400322 0.7725710 0.4365486 0.3134155 0.3446047 #>  [43] 0.3583251 1.1410511 0.3402650 0.4380000 0.9321529 0.6509107 0.7128634 #>  [50] 0.4828276 0.3868975 0.5957191 0.2625778 0.5127357 0.3956559 0.3615582 #>  [57] 0.4242556 0.5874111 0.5127348 0.6773799 0.4045032 0.3769534 0.4074678 #>  [64] 0.4403505 0.9213356 0.7140239 0.4342494 0.9126194 0.3348556 0.3009267 #>  [71] 0.3598233 0.6590692 0.6474388 0.5066233 1.4182923 0.4292809 1.2572876 #>  [78] 0.1624436 0.2101038 0.3498939 0.3325393 0.2033827 0.2622584 0.5774602 #>  [85] 0.3567808 0.2461149 0.2700110 0.5744636 0.5003152 0.3410442 0.3156831 #>  [92] 0.4918909 0.6209790 0.3658942 0.3441131 0.1515226 0.3688352 0.6401491 #>  [99] 0.3691702 0.3843657 0.4641710 0.4174310 0.3142639 0.5659825 0.6242340 #> [106] 0.4084429 0.6188155 0.4350521 0.3124214 0.9171589 0.6235125 0.8630642 #> [113] 0.5404761 0.8207514 1.0411927 0.5276077 0.7303770 1.0421700 0.8401458 #> [120] 1.2000292 0.9213492 0.3967389 0.3975921 0.7426849 0.8909864 1.5279479 #> [127] 0.6080130 0.4071117 0.6661871 0.3400878 0.5534629 2.5201942 0.8317301 #> [134] 0.6339794 0.5362687 0.3243553 0.8748678 0.3212679 0.8949716 2.2450596 #> [141] 0.5762151 0.6539516 0.3739754 0.6863370 0.6122660 0.2150478 0.2614764 #> [148] 0.6111684 0.3714130 1.1798078 0.4321432 0.5970870 0.9981701 0.4296940 #> [155] 1.2661150 0.5744207 0.5538887 1.3648434 0.9944283 1.3725367 0.6595768 #> [162] 0.4879736 0.5810827 0.8249397 0.7857057 0.9300459 0.8972485 0.9926545 #> [169] 1.0199147 4.5089205 1.1541768 0.8915807 0.6226884 1.2169453 0.4724696 #> [176] 0.6514313 0.5224253 0.6593973 0.1569680 0.5847442 0.5682814 0.6729592 #> [183] 0.1733294 0.3895711 0.6323498 0.4605052 0.1481093 1.1716547 0.5450096 #> [190] 0.5687975 0.5589908 0.2825736 0.6398288 0.7914032 0.8694980 0.3622459 #> [197] 0.5724749 0.7551469 0.4205248 0.2548245 0.6299627 0.7509742 0.2003678 #> [204] 0.7194789 0.4089175 0.7621391 0.4433501"},{"path":"https://nanx.me/enpls/reference/print.enspls.ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Print enspls.ad Object ‚Äî print.enspls.ad","title":"Print enspls.ad Object ‚Äî print.enspls.ad","text":"Print enspls.ad object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print enspls.ad Object ‚Äî print.enspls.ad","text":"","code":"# S3 method for class 'enspls.ad' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.enspls.ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print enspls.ad Object ‚Äî print.enspls.ad","text":"x object class enspls.ad. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enspls.ad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print enspls.ad Object ‚Äî print.enspls.ad","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print enspls.ad Object ‚Äî print.enspls.ad","text":"","code":"data(\"logd1k\") # remove low variance variables x <- logd1k$x[, -c(17, 52, 59)] y <- logd1k$y  # training set x.tr <- x[1:300, ] y.tr <- y[1:300]  # two test sets x.te <- list(   \"test.1\" = x[301:400, ],   \"test.2\" = x[401:500, ] ) y.te <- list(   \"test.1\" = y[301:400],   \"test.2\" = y[401:500] )  set.seed(42) ad <- enspls.ad(   x.tr, y.tr, x.te, y.te,   maxcomp = 3, alpha = c(0.3, 0.6, 0.9),   space = \"variable\", method = \"mc\",   ratio = 0.8, reptimes = 10 ) print(ad) #> Model Applicability Domain Evaluation by ENSPLS #> --- #> Absolute mean prediction error for each training set sample: #>   [1] 0.422632298 0.815523615 0.648213606 0.870831328 0.257203074 0.490832846 #>   [7] 0.701719681 0.429048791 0.749324907 0.638404365 0.843665524 0.687892385 #>  [13] 1.017169872 0.763573955 0.759053761 0.871500956 0.236640925 0.088100279 #>  [19] 0.472965624 0.634421708 0.735632351 0.091059839 1.594026249 1.189337666 #>  [25] 0.340769966 0.604866100 1.303871973 0.961142660 0.092884283 0.100520976 #>  [31] 0.059779983 0.412777313 0.135195202 2.478026712 0.397403818 0.005011676 #>  [37] 0.877181685 0.145017597 0.023745363 0.280530155 0.058398364 0.568238661 #>  [43] 0.251556521 0.494641002 0.163135341 0.263345408 0.331201449 0.257333694 #>  [49] 0.210855050 0.221268755 0.057240160 0.384076723 1.179395348 0.390537444 #>  [55] 0.726689121 0.528659319 0.212638767 0.161500350 0.362637352 0.256825754 #>  [61] 0.732640202 2.477624629 0.191345044 0.378929068 1.560290268 1.490810969 #>  [67] 0.296412512 1.550013282 0.055909397 0.480447843 0.022057600 0.205219974 #>  [73] 0.533021269 0.061863659 0.325187195 0.792693950 0.171503502 1.268409310 #>  [79] 0.095289006 0.145745742 0.258202295 0.186118843 0.072360285 0.001806612 #>  [85] 0.053576611 0.542751777 0.122393517 0.701052137 0.336353318 0.176058594 #>  [91] 0.684119003 1.427365586 0.699280144 0.406684185 0.611234923 0.156924933 #>  [97] 0.562503385 1.119304806 0.471931939 0.291409291 1.002496298 0.915919886 #> [103] 1.371940567 0.159471334 0.458710686 0.352588032 0.662182370 0.092416830 #> [109] 0.381089817 0.777267167 0.723549214 0.086011861 0.504880794 0.442446365 #> [115] 2.068971171 0.677454033 0.275265965 0.146845629 0.145894573 0.380305366 #> [121] 0.175955943 0.495523895 0.095822143 0.108049721 0.421334995 0.406392115 #> [127] 0.427064993 0.475260473 0.390757565 0.386203722 0.389891939 0.638576864 #> [133] 0.514533894 0.702536133 1.016492859 0.036428252 0.068006633 0.158541714 #> [139] 0.358508958 0.126570666 0.383104094 0.316770984 0.315860883 0.367288327 #> [145] 0.005705279 0.511450671 0.776060683 0.717761225 1.248239275 0.315547146 #> [151] 0.678562080 0.436041833 0.302940412 0.333968661 0.335712517 0.490020503 #> [157] 0.027968631 0.131459236 1.330434909 0.534146052 0.054247912 0.470021073 #> [163] 0.230859468 1.113192328 0.934546316 0.167146638 1.009885792 0.124310929 #> [169] 1.056397529 1.023604883 0.225133982 0.442940412 0.583332596 0.126985869 #> [175] 0.069347790 0.653485515 0.970596830 0.195304683 0.801994753 1.199706935 #> [181] 0.864077011 0.954600519 0.260503102 1.575187384 0.241392038 0.640383510 #> [187] 0.281017068 0.421082178 0.252594496 0.580144400 0.215357014 0.462556069 #> [193] 0.224788390 0.029300831 0.277304150 0.320589756 0.214429238 0.237467730 #> [199] 0.235394840 0.414850699 0.719519720 0.354494279 0.072602051 0.007889332 #> [205] 0.390031470 0.789599200 0.266620727 0.428384211 1.065651077 0.372088798 #> [211] 0.937549606 0.090203048 0.090203048 0.256837822 1.342746701 0.574286923 #> [217] 0.789007735 0.426308453 0.412019834 0.713326957 0.394331204 0.857297967 #> [223] 0.843878184 0.347792353 0.039652246 0.200532641 0.096114491 0.544931258 #> [229] 0.337727332 0.401999859 0.059209044 1.022239155 1.165625666 0.685192754 #> [235] 0.007973348 0.462237983 1.251230872 0.166910524 0.257766196 0.709494592 #> [241] 1.283898665 0.724810413 0.141464864 1.025924894 0.848892347 0.710976980 #> [247] 0.315861373 0.185796431 0.270266859 0.106863048 0.951448651 0.890710089 #> [253] 0.900610648 1.294977014 0.980769268 0.238059821 0.849570466 0.035763040 #> [259] 1.324239041 1.380289181 0.400634228 0.560836939 1.519693134 0.926202509 #> [265] 0.911714531 0.877294549 0.059123701 1.193649120 0.360798335 0.837650147 #> [271] 1.082083058 0.422692742 0.417876957 0.839002022 0.944522512 0.136016291 #> [277] 0.965552453 1.197557941 0.999223117 1.102941147 0.749923726 1.160063450 #> [283] 1.995596507 0.876923724 0.527334455 1.275112467 0.126439904 1.522104432 #> [289] 0.730701343 0.652148077 0.484660849 1.146757330 0.118813278 0.802484059 #> [295] 1.043295173 1.189620988 0.894921760 1.299672426 0.025476701 0.518866931 #> --- #> Prediction error SD for each training set sample: #>   [1] 0.17682492 0.13442655 0.10556516 0.11149364 0.14528873 0.12758414 #>   [7] 0.12065164 0.07926194 0.08193757 0.06919434 0.15949739 0.11983705 #>  [13] 0.11835357 0.20540697 0.10198030 0.11554543 0.13944593 0.15980624 #>  [19] 0.08477330 0.13461282 0.23612843 0.15600606 0.21791446 0.19736729 #>  [25] 0.15016986 0.09344745 0.21864433 0.21790961 0.25336042 0.15941805 #>  [31] 0.09284126 0.16197923 0.09572618 0.08856759 0.17542166 0.14772163 #>  [37] 0.19002387 0.09668287 0.14297462 0.11884520 0.18137131 0.09604546 #>  [43] 0.13793796 0.19055507 0.11347154 0.07725716 0.12906606 0.07764695 #>  [49] 0.08125217 0.07245476 0.06363757 0.11119898 0.16865215 0.10577447 #>  [55] 0.21110265 0.09781289 0.11084679 0.14933465 0.07757903 0.22813192 #>  [61] 0.09875702 0.10747134 0.13641438 0.16742019 0.27061775 0.23712666 #>  [67] 0.13959506 0.28623757 0.13528523 0.12462349 0.05603801 0.09715490 #>  [73] 0.10030104 0.08554512 0.16769181 0.10523460 0.09182054 0.25599278 #>  [79] 0.19716493 0.14627301 0.15356982 0.09900334 0.08128891 0.20611741 #>  [85] 0.17204179 0.25688856 0.12334344 0.09244068 0.20538923 0.10928922 #>  [91] 0.29713211 0.34794542 0.13578921 0.12893068 0.15385871 0.09169239 #>  [97] 0.13315023 0.21538582 0.18799248 0.13418807 0.19680767 0.19982114 #> [103] 0.26388690 0.19550901 0.20320043 0.06773431 0.17550233 0.21529091 #> [109] 0.13784328 0.20284702 0.19120467 0.15362606 0.16542940 0.18575542 #> [115] 0.23085802 0.15447198 0.11138301 0.09840187 0.25844855 0.17223314 #> [121] 0.15344701 0.13833191 0.14289706 0.13234967 0.11556001 0.11592906 #> [127] 0.10315136 0.08660667 0.09449550 0.16854420 0.18856090 0.15430410 #> [133] 0.09661260 0.28032529 0.21735301 0.12557330 0.20184812 0.09335452 #> [139] 0.18736053 0.19047223 0.20598213 0.14763848 0.13510977 0.12023468 #> [145] 0.20625454 0.18448368 0.14956688 0.16068554 0.10170993 0.18631713 #> [151] 0.15860217 0.09685768 0.31021140 0.07256171 0.18358676 0.11571334 #> [157] 0.11897874 0.28213843 0.17354708 0.54050221 0.21115082 0.16023562 #> [163] 0.21092455 0.15063153 0.16800965 0.25836353 0.20453967 0.20524870 #> [169] 0.18909853 0.15239066 0.19057706 0.31021140 0.17806749 0.18825405 #> [175] 0.23845054 0.16207528 0.14468703 0.22773153 0.09435823 0.20591807 #> [181] 0.09285024 0.14829706 0.18164147 0.11016136 0.12613775 0.13083017 #> [187] 0.15856212 0.14654668 0.11192022 0.09052024 0.18558041 0.14932045 #> [193] 0.19117145 0.16532975 0.23524530 0.17242759 0.16421283 0.15853904 #> [199] 0.18032470 0.27398573 0.21185651 0.08873293 0.17034044 0.20631894 #> [205] 0.17913107 0.27390014 0.14980278 0.10650226 0.12233789 0.15860333 #> [211] 0.07790451 0.17097513 0.17097513 0.16639106 0.13218349 0.19943419 #> [217] 0.14607979 0.09014777 0.16541099 0.21108869 0.21867079 0.13422304 #> [223] 0.15043220 0.27229967 0.14221377 0.22646860 0.12034653 0.12950380 #> [229] 0.12548953 0.45557358 0.11447949 0.12563839 0.22438920 0.25630906 #> [235] 0.09629856 0.13508804 0.16355792 0.18598939 0.36341332 0.18273404 #> [241] 0.12908144 0.11288943 0.19083150 0.16612828 0.11700099 0.13332849 #> [247] 0.12906516 0.24467925 0.17511908 0.19636436 0.13706344 0.09350376 #> [253] 0.11156260 0.07681448 0.10086700 0.18217069 0.08211883 0.18818291 #> [259] 0.12189647 0.12451514 0.28735398 0.14521698 0.23059541 0.04790616 #> [265] 0.06013623 0.22800985 0.18774418 0.27971046 0.13806851 0.03846176 #> [271] 0.14729532 0.24749122 0.21319807 0.18974506 0.20515873 0.22254970 #> [277] 0.13604209 0.22385117 0.09036809 0.08643619 0.17599821 0.11058212 #> [283] 0.22266788 0.90792902 0.25203713 0.09633983 0.21948222 0.14396076 #> [289] 0.26004314 0.21105243 0.25559727 0.18210567 0.13009828 0.38864150 #> [295] 0.16652945 0.11959406 0.36849624 0.19887907 0.24674728 0.18786913 #> --- #> Absolute mean prediction error for each test set sample: #> [[1]] #>   [1] 0.639812710 1.728652076 0.802728738 1.068664782 0.509884475 0.443834120 #>   [7] 1.778795719 1.707951484 0.581364417 1.779236657 0.486854157 0.376468936 #>  [13] 0.715406535 1.634078337 0.054522076 1.161650799 1.740578337 0.389893595 #>  [19] 1.538714709 0.031311347 0.865520787 1.488199902 0.731535368 0.111052248 #>  [25] 0.104213904 0.920199720 1.072970056 1.557923146 1.589685511 1.981304775 #>  [31] 1.790737280 1.535657507 2.257757940 0.805144341 1.425035142 1.489361200 #>  [37] 0.855622407 1.129081107 1.986525920 1.243347015 0.498346851 0.748741536 #>  [43] 0.880363834 1.199213789 0.218156034 1.496401694 2.301150689 0.904462346 #>  [49] 0.622586100 0.027112612 0.143570274 1.441423599 1.224283639 0.109178041 #>  [55] 1.073204962 0.088209298 1.315967949 2.806981476 1.963810759 1.595818003 #>  [61] 0.119306515 1.890562369 1.068519090 2.586166344 0.104238944 1.284283639 #>  [67] 2.502535164 0.714377910 0.361077210 0.004964891 1.190182265 0.269064444 #>  [73] 0.522665841 0.287735142 0.334417859 1.651955323 1.872898952 1.710504262 #>  [79] 0.860576242 0.312156724 2.056917661 1.268912438 1.552370417 1.492865920 #>  [85] 1.423811794 0.304902997 0.943973923 1.007302003 0.268239164 0.077852604 #>  [91] 0.397227200 1.574999201 2.439927322 1.469443326 0.268010248 0.082140833 #>  [97] 1.652266880 1.309732275 2.231149721 0.002849509 #>  #> [[2]] #>   [1] 0.3761254 1.0686362 0.9822736 0.1525924 0.8961379 2.2723739 2.0714944 #>   [8] 1.4591463 1.7583215 1.2206085 1.7216143 2.1029318 0.9041916 1.9164734 #>  [15] 1.6555303 1.5212896 0.1713064 1.6826830 0.4845723 1.0504444 0.5601090 #>  [22] 0.5565668 2.0394634 1.7641510 1.1248075 2.1042120 1.1213167 1.3636992 #>  [29] 0.3338557 1.8086985 1.3070499 1.9044063 0.1954925 2.1071527 0.2531252 #>  [36] 1.8888268 1.5903581 2.2373363 2.1912922 2.2373363 2.4847163 1.7504916 #>  [43] 0.8062721 0.9878200 1.8567469 1.6537348 1.8232545 1.8941021 2.0012004 #>  [50] 2.0299914 2.0463856 6.8750855 2.0265552 2.1496461 2.0326761 2.0341021 #>  [57] 2.2483376 2.2209414 1.4387582 2.1071983 2.2770486 2.3744691 1.9340489 #>  [64] 2.2387601 0.3949453 2.3930403 2.9662227 1.7043344 1.9380597 2.2208547 #>  [71] 1.8652574 2.0613709 2.6124837 2.2107478 2.7153936 1.8238502 2.3515942 #>  [78] 0.4086407 2.4985282 2.5847385 1.7424177 1.9049894 0.8165998 1.1007456 #>  [85] 3.2720013 2.5444853 2.7490399 1.9278361 2.6088437 1.0389593 2.3979256 #>  [92] 2.1731800 2.3825046 6.6641455 2.7777074 2.7732829 0.8122010 9.6228069 #>  [99] 1.0692105 2.0402506 #>  #> --- #> Prediction error SD for each test set sample: #> [[1]] #>   [1] 0.22083328 0.17054322 0.24153236 0.10511800 0.18976851 0.15932889 #>   [7] 0.23968000 0.11121425 0.16555398 0.24991955 0.21038877 0.36450188 #>  [13] 0.27819462 0.14341038 0.23339580 0.06099678 0.11001288 0.25935198 #>  [19] 0.27807784 0.12768484 0.39398892 0.13011395 0.25895425 0.41446740 #>  [25] 0.43185608 0.14108293 0.06591888 0.14312233 0.15275010 0.14042106 #>  [31] 0.13693109 0.25348023 0.12806220 0.17876048 0.17077105 1.34738600 #>  [37] 0.38800930 0.12158288 0.40278045 0.20050773 0.16542774 0.18043944 #>  [43] 0.19275518 0.10633509 0.13346924 0.25936149 0.13643158 0.21946839 #>  [49] 0.36433642 0.51283676 0.45020045 0.20389847 0.10552798 0.44284456 #>  [55] 0.22361746 0.28826144 0.31265941 0.28732216 0.21618896 0.22854181 #>  [61] 0.45194419 0.25694764 0.20225071 0.12415881 0.44521550 0.10552798 #>  [67] 0.30201059 0.21971458 0.43446870 0.30375351 0.38239730 0.53411721 #>  [73] 0.18460227 0.47744807 0.48077148 0.18288978 0.13848477 0.36567907 #>  [79] 0.28023087 0.46569848 0.15442597 0.42189035 0.18716995 0.26155751 #>  [85] 0.10627129 0.42819113 0.27761377 0.15701903 0.41389201 0.54313727 #>  [91] 0.22618794 0.33465260 0.12879614 1.58229002 0.25411121 0.20038697 #>  [97] 0.21076612 0.22063300 0.14627048 0.38272326 #>  #> [[2]] #>   [1] 0.49533369 0.21790280 0.21132863 0.50853899 0.12991737 0.21393065 #>   [7] 0.37625454 0.15044426 0.18557630 0.19134102 0.31622632 0.13592326 #>  [13] 0.31393839 0.18071248 0.16602440 0.12783851 0.41975925 0.24059637 #>  [19] 0.50266192 0.16308872 0.52542505 0.14443274 0.11613127 0.21903495 #>  [25] 0.22144174 0.10634338 0.23837872 0.87641235 0.26053470 0.16830009 #>  [31] 0.26533128 0.23475609 0.19978981 0.14754964 0.38769917 0.20811497 #>  [37] 0.19311046 0.21805196 0.11777125 0.21805196 0.20156731 0.22503077 #>  [43] 0.16719951 0.18271725 0.36899922 0.19970142 0.22984328 0.16888852 #>  [49] 0.15772463 0.14029879 0.38300912 6.37876528 0.19456094 0.05585043 #>  [55] 0.36750728 0.16888852 0.16055091 0.18454729 0.15758583 0.21966845 #>  [61] 0.19576505 0.36832384 0.29600309 0.15629316 0.11750815 0.14283549 #>  [67] 0.34619970 0.28154974 0.21481076 0.20259712 0.21311527 0.28408400 #>  [73] 0.31254966 0.15693373 0.14694409 0.21384984 0.14189051 0.15298061 #>  [79] 0.16228782 0.19340977 2.36340422 0.19607719 1.25635858 0.15177587 #>  [85] 0.32172107 0.11149303 0.07074771 0.21218978 0.21013675 0.14548796 #>  [91] 0.18829682 0.20021486 0.29721012 6.70765888 0.16740331 0.17198017 #>  [97] 0.25960303 7.99712131 0.16270696 0.10508260 #>"},{"path":"https://nanx.me/enpls/reference/print.enspls.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Fitted Ensemble Sparse Partial Least Squares Object ‚Äî print.enspls.fit","title":"Print Fitted Ensemble Sparse Partial Least Squares Object ‚Äî print.enspls.fit","text":"Print coefficients model enspls.fit object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Fitted Ensemble Sparse Partial Least Squares Object ‚Äî print.enspls.fit","text":"","code":"# S3 method for class 'enspls.fit' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.enspls.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Fitted Ensemble Sparse Partial Least Squares Object ‚Äî print.enspls.fit","text":"x object class enspls.fit. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enspls.fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Fitted Ensemble Sparse Partial Least Squares Object ‚Äî print.enspls.fit","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Fitted Ensemble Sparse Partial Least Squares Object ‚Äî print.enspls.fit","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) fit <- enspls.fit(   x, y,   reptimes = 5, maxcomp = 3,   alpha = c(0.3, 0.6, 0.9) ) print(fit) #> Coefficients of the Models by Ensemble Sparse Partial Least Squares #> --- #>                             [,1]         [,2]         [,3]          [,4] #> BalabanJ            -0.043615048 -0.070476160 -0.061234111 -0.0641194287 #> BertzCT             -0.010797407 -0.010380918 -0.014190111 -0.0198473677 #> Chi0                 0.034719388  0.031396910  0.031244743  0.0305194922 #> Chi0n                0.053961369  0.051389288  0.054495519  0.0524801055 #> Chi0v                0.053701577  0.051940514  0.053866466  0.0534589673 #> Chi1                 0.051776232  0.049156542  0.049348357  0.0492213616 #> Chi1n                0.070459184  0.069096237  0.072714905  0.0727060040 #> Chi1v                0.044723121  0.043485995  0.047373453  0.0501593866 #> Chi2n                0.044969369  0.049246878  0.053608909  0.0505554796 #> Chi2v               -0.007655968 -0.004618584 -0.001476135  0.0001540116 #> Chi3n                0.032584667  0.042587170  0.046107374  0.0415386369 #> Chi3v               -0.028277116 -0.022984653 -0.021257238 -0.0203092032 #> Chi4n                0.025069486  0.035056020  0.037250699  0.0377062265 #> Chi4v               -0.032725942 -0.028311655 -0.028345799 -0.0254204075 #> EState_VSA1         -0.145952322 -0.151990047 -0.160770607 -0.1525700022 #> EState_VSA10        -0.156900443 -0.168802906 -0.175239253 -0.1722320471 #> EState_VSA11        -0.127792171 -0.135963476 -0.143448807 -0.1529079518 #> EState_VSA2         -0.088764258 -0.081331379 -0.090132085 -0.0733057615 #> EState_VSA3          0.056790068  0.028421271  0.053648385  0.0386607294 #> EState_VSA4          0.063669587  0.074797750  0.074053361  0.0699041874 #> EState_VSA5          0.076840942  0.113331436  0.116703240  0.1013286787 #> EState_VSA6         -0.039520870 -0.054418432 -0.060441879 -0.0391363977 #> EState_VSA7          0.167588096  0.158416601  0.168272101  0.1618998057 #> EState_VSA8          0.009235939  0.004258386 -0.006701922 -0.0011150675 #> EState_VSA9          0.160639733  0.170068653  0.176254590  0.1714440988 #> ExactMolWt           0.050748220  0.048487236  0.047997890  0.0454753788 #> FractionCSP3        -0.002537413  0.016775756  0.014177552  0.0000000000 #> HallKierAlpha        0.019451372  0.000000000  0.000000000  0.0329693176 #> HeavyAtomCount       0.041665347  0.039779625  0.039215273  0.0389117918 #> HeavyAtomMolWt       0.049142955  0.047099309  0.045859934  0.0431088851 #> Ipc                  0.057240507  0.060688810  0.069024848  0.0694421064 #> Kappa1               0.038204987  0.032402483  0.032511070  0.0348008587 #> Kappa2               0.073454618  0.061351458  0.062538464  0.0699833246 #> Kappa3               0.068769152  0.053787212  0.048842217  0.0663792137 #> LabuteASA            0.050468473  0.048957140  0.047963605  0.0492392904 #> MaxAbsEStateIndex   -0.058201076 -0.046954270 -0.035764073 -0.0459235492 #> MaxEStateIndex      -0.058201076 -0.046954270 -0.035764073 -0.0459235492 #> MinAbsEStateIndex    0.050724276  0.044527421  0.044215313  0.0353840523 #> MinEStateIndex       0.080735399  0.074187812  0.072888633  0.0724654251 #> MolMR                0.064441013  0.060992387  0.061907090  0.0617893424 #> MolWt                0.050700489  0.048453503  0.047956295  0.0454522770 #> NumValenceElectrons  0.041901095  0.039028411  0.040413395  0.0398859275 #> PEOE_VSA1           -0.123885717 -0.111986458 -0.128388290 -0.1335502496 #> PEOE_VSA10           0.060135647  0.072095820  0.042111810  0.0611046246 #> PEOE_VSA11           0.027518533  0.000000000  0.054256529  0.0593889088 #> PEOE_VSA12          -0.070409371 -0.085305819 -0.078339953 -0.0775848326 #> PEOE_VSA13           0.071124088  0.073838570  0.087264498  0.0780882742 #> PEOE_VSA14          -0.059283402 -0.052884362 -0.059018175 -0.0639531460 #> PEOE_VSA2           -0.135631007 -0.136699485 -0.158100226 -0.1453559333 #> PEOE_VSA3           -0.015399543 -0.030536558 -0.023616048 -0.0258053476 #> PEOE_VSA4            0.089159585  0.082572159  0.101865179  0.1083556038 #> PEOE_VSA5            0.000000000  0.000000000  0.000000000  0.0000000000 #> PEOE_VSA6            0.252455157  0.257218113  0.264862957  0.3016795122 #> PEOE_VSA7            0.131757300  0.126559513  0.126970928  0.1081498903 #> PEOE_VSA8           -0.251591255 -0.244659553 -0.247195649 -0.2892456024 #> PEOE_VSA9            0.093581834  0.074355909  0.075437882  0.0803304497 #> SMR_VSA1            -0.045809417 -0.040299095 -0.050701107 -0.0532047159 #> SMR_VSA10            0.025671513  0.036747988  0.020329048  0.0236814814 #> SMR_VSA2             0.000000000  0.000000000  0.000000000  0.0000000000 #> SMR_VSA3            -0.196156845 -0.207343129 -0.205718468 -0.1978050051 #> SMR_VSA4             0.086514311  0.092000949  0.090979644  0.1135589734 #> SMR_VSA5             0.144746921  0.144103173  0.158124866  0.1643202372 #> SMR_VSA6            -0.086355302 -0.087439103 -0.084443620 -0.0980728660 #> SMR_VSA7             0.021803034  0.011365422 -0.006054515  0.0030932243 #> SMR_VSA9             0.164334759  0.153864976  0.180528755  0.1579959854 #> SlogP_VSA1          -0.045042683 -0.031673412 -0.087011109 -0.0688301411 #> SlogP_VSA10          0.119767503  0.115394919  0.103222595  0.0843745870 #> SlogP_VSA11          0.114675123  0.110717941  0.114633271  0.0846142758 #> SlogP_VSA12          0.103280911  0.095740332  0.101496317  0.1105220578 #> SlogP_VSA2          -0.207711269 -0.202806412 -0.200423733 -0.2013781453 #> SlogP_VSA3          -0.153164458 -0.151392486 -0.134059624 -0.1516867090 #> SlogP_VSA4           0.080989430  0.078481646  0.076140508  0.0736978562 #> SlogP_VSA5           0.174022630  0.173399624  0.191735830  0.2059561988 #> SlogP_VSA6           0.136169116  0.133023697  0.110695001  0.1313060684 #> SlogP_VSA7           0.077780951  0.068859412  0.083787537  0.0846865586 #> SlogP_VSA8           0.000000000  0.000000000  0.067225424  0.0563976493 #> TPSA                -0.220618737 -0.215277058 -0.233074352 -0.2170641606 #> VSA_EState10         0.093743521  0.084141143  0.095789368  0.1014189884 #> VSA_EState8          0.089001823  0.076620959  0.083263325  0.0777088146 #> VSA_EState9         -0.089786907 -0.081994686 -0.094262874 -0.0921319769 #>                             [,5] #> BalabanJ            -0.073894883 #> BertzCT             -0.007687107 #> Chi0                 0.032319300 #> Chi0n                0.052919408 #> Chi0v                0.056854869 #> Chi1                 0.048305879 #> Chi1n                0.069904194 #> Chi1v                0.051215760 #> Chi2n                0.048557618 #> Chi2v                0.005050211 #> Chi3n                0.038590608 #> Chi3v               -0.016430846 #> Chi4n                0.028264216 #> Chi4v               -0.022830716 #> EState_VSA1         -0.151918402 #> EState_VSA10        -0.163913222 #> EState_VSA11        -0.114487283 #> EState_VSA2         -0.074990673 #> EState_VSA3          0.027238867 #> EState_VSA4          0.081673528 #> EState_VSA5          0.119173308 #> EState_VSA6         -0.062270377 #> EState_VSA7          0.169929249 #> EState_VSA8         -0.008508467 #> EState_VSA9          0.169614152 #> ExactMolWt           0.053132588 #> FractionCSP3         0.000000000 #> HallKierAlpha        0.000000000 #> HeavyAtomCount       0.039291679 #> HeavyAtomMolWt       0.051773716 #> Ipc                  0.040666065 #> Kappa1               0.035993825 #> Kappa2               0.066238470 #> Kappa3               0.056805777 #> LabuteASA            0.050833015 #> MaxAbsEStateIndex   -0.039681288 #> MaxEStateIndex      -0.039681288 #> MinAbsEStateIndex    0.058219064 #> MinEStateIndex       0.090836706 #> MolMR                0.065637066 #> MolWt                0.053101413 #> NumValenceElectrons  0.038876330 #> PEOE_VSA1           -0.131939533 #> PEOE_VSA10           0.063132746 #> PEOE_VSA11           0.000000000 #> PEOE_VSA12          -0.064913191 #> PEOE_VSA13           0.062907184 #> PEOE_VSA14          -0.053503851 #> PEOE_VSA2           -0.123394883 #> PEOE_VSA3           -0.021138001 #> PEOE_VSA4            0.044285049 #> PEOE_VSA5            0.000000000 #> PEOE_VSA6            0.269371381 #> PEOE_VSA7            0.118261626 #> PEOE_VSA8           -0.241824460 #> PEOE_VSA9            0.084102621 #> SMR_VSA1            -0.042033373 #> SMR_VSA10            0.054396319 #> SMR_VSA2             0.000000000 #> SMR_VSA3            -0.223644660 #> SMR_VSA4             0.086073286 #> SMR_VSA5             0.152844318 #> SMR_VSA6            -0.100483543 #> SMR_VSA7             0.017135164 #> SMR_VSA9             0.142266776 #> SlogP_VSA1          -0.055774803 #> SlogP_VSA10          0.082997064 #> SlogP_VSA11          0.088648633 #> SlogP_VSA12          0.112241959 #> SlogP_VSA2          -0.204690587 #> SlogP_VSA3          -0.156349706 #> SlogP_VSA4           0.077452104 #> SlogP_VSA5           0.198178112 #> SlogP_VSA6           0.127587128 #> SlogP_VSA7           0.000000000 #> SlogP_VSA8           0.000000000 #> TPSA                -0.214509241 #> VSA_EState10         0.084382079 #> VSA_EState8          0.077845374 #> VSA_EState9         -0.085217775"},{"path":"https://nanx.me/enpls/reference/print.enspls.fs.html","id":null,"dir":"Reference","previous_headings":"","what":"Print enspls.fs Object ‚Äî print.enspls.fs","title":"Print enspls.fs Object ‚Äî print.enspls.fs","text":"Print enspls.fs object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.fs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print enspls.fs Object ‚Äî print.enspls.fs","text":"","code":"# S3 method for class 'enspls.fs' print(x, sort = TRUE, nvar = NULL, ...)"},{"path":"https://nanx.me/enpls/reference/print.enspls.fs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print enspls.fs Object ‚Äî print.enspls.fs","text":"x object class enspls.fs. sort variables sorted decreasing order importance? nvar Number top variables show. Ignored sort = FALSE. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enspls.fs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print enspls.fs Object ‚Äî print.enspls.fs","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.fs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print enspls.fs Object ‚Äî print.enspls.fs","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) fs <- enspls.fs(   x, y,   reptimes = 5, maxcomp = 3,   alpha = c(0.3, 0.6, 0.9) ) print(fs, nvar = 10L) #> Variable Importance by Ensemble Sparse Partial Least Squares #> --- #>                     Importance #> SlogP_VSA2            70.23155 #> Chi0n                 43.24274 #> Chi1n                 42.86634 #> LabuteASA             42.44808 #> Chi1                  37.99326 #> HeavyAtomCount        36.06243 #> EState_VSA7           34.00841 #> NumValenceElectrons   32.67029 #> MolMR                 31.76546 #> Chi0v                 30.18469"},{"path":"https://nanx.me/enpls/reference/print.enspls.od.html","id":null,"dir":"Reference","previous_headings":"","what":"Print enspls.od Object ‚Äî print.enspls.od","title":"Print enspls.od Object ‚Äî print.enspls.od","text":"Print enspls.od object.","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print enspls.od Object ‚Äî print.enspls.od","text":"","code":"# S3 method for class 'enspls.od' print(x, ...)"},{"path":"https://nanx.me/enpls/reference/print.enspls.od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print enspls.od Object ‚Äî print.enspls.od","text":"x object class enspls.od. ... Additional parameters print.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/reference/print.enspls.od.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print enspls.od Object ‚Äî print.enspls.od","text":"Nan Xiao <https://nanx.>","code":""},{"path":"https://nanx.me/enpls/reference/print.enspls.od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print enspls.od Object ‚Äî print.enspls.od","text":"","code":"data(\"logd1k\") x <- logd1k$x y <- logd1k$y  set.seed(42) od <- enspls.od(   x, y,   reptimes = 5, maxcomp = 3,   alpha = c(0.3, 0.6, 0.9) ) print(od) #> Outlier Detection by Ensemble Sparse Partial Least Squares #> --- #> Mean residual for each sample: #>    [1] 0.889121733 0.944360826 0.659919009 1.553359661 0.182007600 0.103156639 #>    [7] 1.417750727 0.352269534         NaN 0.719662935 1.577285950 0.886322164 #>   [13]         NaN         NaN 1.433002200         NaN         NaN 0.064964882 #>   [19] 0.539024511 1.176465464 1.763616725 0.974383861 2.331544675 1.630412989 #>   [25]         NaN         NaN 1.673855981 1.194823202 0.609043502 0.118995773 #>   [31] 0.231153502         NaN         NaN 2.421392582 1.134705028 0.957769118 #>   [37]         NaN 0.094996185         NaN         NaN 0.097428381 1.216057246 #>   [43] 0.971779788 0.226682459 0.282579507         NaN 0.692736216 0.469417129 #>   [49]         NaN 0.313170859 0.128881705 0.216733915         NaN         NaN #>   [55] 0.291863057 0.349740790 0.223591786         NaN         NaN 0.056414599 #>   [61] 1.770617522 2.284076930 1.234920930 1.819103641         NaN 1.390692387 #>   [67] 0.643625414         NaN 0.763738234         NaN 0.016056496         NaN #>   [73] 0.599938756         NaN 0.663375161 0.914730913         NaN 1.935630167 #>   [79] 0.096602297 0.069842632 0.352693984         NaN         NaN 0.123930557 #>   [85] 0.311745819 1.314340167         NaN 1.708970278 1.180007758         NaN #>   [91]         NaN         NaN 1.579447754         NaN         NaN 0.281984167 #>   [97] 0.060650979 2.732753776 1.152030762 0.253437216 1.717650681 2.011554407 #>  [103] 1.977305919 0.194234295         NaN 0.118712476 2.072159010 0.553563404 #>  [109]         NaN         NaN 1.459538398 0.511281186         NaN 0.992045431 #>  [115]         NaN         NaN 0.221214989         NaN 1.580490769 1.446729817 #>  [121] 1.656232570 0.369288929 0.837888998 1.480998570         NaN         NaN #>  [127] 0.098582723 0.128043546         NaN         NaN         NaN 0.195128286 #>  [133]         NaN 0.270711947         NaN 0.857320137 1.297781170 0.070377432 #>  [139] 1.126602946 0.460243074 1.094722824         NaN 1.490142858 1.630840006 #>  [145]         NaN         NaN         NaN 0.737775583 1.652322724 0.678973654 #>  [151] 1.414790571 0.129581004 0.896753588 0.213962544         NaN         NaN #>  [157] 0.439816134 0.285847939 2.290168529 0.990984196 0.555090130 0.774571025 #>  [163]         NaN 1.219505707         NaN 1.286094435 2.219361601 0.626655805 #>  [169] 1.005622001         NaN         NaN         NaN 1.088345100 0.317735454 #>  [175]         NaN 0.689005195 0.545596165         NaN         NaN 0.480418746 #>  [181] 0.168736326 0.010145151 1.436185967 2.408683417         NaN 0.558905504 #>  [187] 1.841942682 0.732790582         NaN         NaN 1.149961226         NaN #>  [193] 0.028770610 1.532850521 1.576432607 2.156655302 1.040067058         NaN #>  [199] 1.058475402 0.570634445 1.149078843 0.702105268         NaN         NaN #>  [205] 1.115525243 0.793220335         NaN         NaN 1.345724107         NaN #>  [211]         NaN 0.869600908         NaN 0.281147228         NaN 0.405879046 #>  [217] 0.521041463         NaN 0.413674419         NaN 0.363111176 0.365489147 #>  [223] 0.217843304 1.276426230 1.191550796         NaN         NaN 1.876500803 #>  [229] 0.088590815 0.906359502         NaN         NaN 1.008005220 0.283200082 #>  [235] 1.558498243         NaN 1.080852369         NaN 0.776890361 0.475878079 #>  [241] 1.573078120         NaN 0.949479466 0.488440570         NaN 0.048343089 #>  [247]         NaN         NaN 0.414286926 0.906356830         NaN         NaN #>  [253] 0.032632836 1.159515501 0.534709654 0.971118936 1.253389821 1.524358278 #>  [259]         NaN 0.569959319 1.853973432         NaN 1.173961689 0.276757854 #>  [265] 0.241206860         NaN         NaN         NaN         NaN 0.135967659 #>  [271] 1.273815333 0.046457258         NaN         NaN 0.670052256 1.540170371 #>  [277]         NaN 1.320332581 0.041564471 1.427902458 0.269918556 1.187784737 #>  [283] 0.862655827         NaN         NaN 0.934391823 0.774834378         NaN #>  [289] 0.402762650 0.079473869 0.156520023 1.196766845 1.295931423         NaN #>  [295] 0.961821513         NaN         NaN         NaN         NaN 0.893040267 #>  [301]         NaN 1.672844357 1.002939556         NaN 1.608028459 0.832135003 #>  [307] 1.065516657 1.312642514         NaN 0.555743321         NaN 0.836312722 #>  [313] 0.535248289         NaN 1.688946252 0.312212656 0.479838094         NaN #>  [319] 0.566169633 1.080450017 0.583447847 0.516467687 0.094813394 0.861557239 #>  [325] 0.825045402         NaN         NaN 1.070656044 1.134164374 1.482067733 #>  [331]         NaN 0.111390801 0.519191023 0.132553505 0.598799453 1.372497616 #>  [337] 0.277210614 0.837258848         NaN 0.818766683 0.789880594 0.468123381 #>  [343] 0.876508803 1.096420770         NaN 0.775037361         NaN 0.321514522 #>  [349]         NaN 0.886729995 0.694851482 1.964856593 0.396132928 0.535395672 #>  [355]         NaN 2.086231981 1.033324752         NaN 0.792485875 0.944716574 #>  [361] 0.894271036         NaN 0.801878460         NaN 0.512540561         NaN #>  [367] 2.598707769 0.584592030 1.047018835         NaN 0.422394331         NaN #>  [373] 0.755021996 0.400154769 0.625964672 0.905916845 1.071740384 0.127448438 #>  [379] 1.721015195 0.745159150 1.432592077         NaN         NaN 1.137288893 #>  [385] 0.603406947 0.991520680         NaN 0.462590258 0.771887497         NaN #>  [391] 1.214943201 1.302642256 0.946353322 1.325401667         NaN 0.645200567 #>  [397]         NaN         NaN 0.980416479 1.465888454 0.729989341 0.286766317 #>  [403] 0.122443413         NaN 0.635150504 2.142414312 1.012259307 0.458178922 #>  [409] 0.060061351 0.716867781 0.100756003         NaN 0.695854819 1.295969137 #>  [415] 0.998155453         NaN         NaN 1.598963139 0.926077738         NaN #>  [421] 0.595597484 1.519789409 1.185741392 1.109245377         NaN 1.386481486 #>  [427]         NaN 2.490837067 3.006938970         NaN         NaN         NaN #>  [433] 1.625206063         NaN 0.644101361 1.272698016 0.993550170         NaN #>  [439]         NaN         NaN         NaN         NaN 0.424785045 0.161529040 #>  [445]         NaN         NaN 0.898400118         NaN 1.051996487         NaN #>  [451] 0.610528729 1.127516889 0.659074100 0.975614403 0.055617691 0.923693645 #>  [457] 0.971582029 0.952299043 0.078955611 1.562751374 1.119696022 0.424752754 #>  [463] 0.046338817 0.687959963 0.197995284 1.617971638         NaN 0.698119158 #>  [469]         NaN 1.392474603         NaN 0.606025362 0.881819395 0.262556755 #>  [475]         NaN 0.753419030 0.808474332 0.258946651 0.840082413 1.624401439 #>  [481]         NaN         NaN         NaN 0.644013253 1.867102685         NaN #>  [487] 1.852717929 2.254930342 1.304587557         NaN         NaN 0.638667441 #>  [493]         NaN 1.655597980 2.132984898 1.519443392 1.531975949 0.116968951 #>  [499]         NaN 0.080934549 0.397074085 1.056379183 0.703089012         NaN #>  [505] 1.218775208 1.044693223 2.924048892         NaN 0.681920898         NaN #>  [511] 1.221983772 1.266622008 0.510747480         NaN         NaN 0.456115076 #>  [517] 1.530109110 0.386849563 0.757385436 1.570582044 1.509668982 1.011794548 #>  [523]         NaN 0.330201354 0.298411071 2.317700890 0.378604239 1.398732071 #>  [529]         NaN 0.365165387 1.573258405         NaN         NaN 1.818667781 #>  [535] 1.391597843 1.399797587 0.019630909 1.179066421 1.492879699 1.358508008 #>  [541] 0.330710226 0.744572268 1.155996724         NaN         NaN         NaN #>  [547]         NaN         NaN 0.238233190 0.018784830         NaN 0.356666754 #>  [553] 0.193799819 1.421897111 0.973698304 0.618269287         NaN 0.783762314 #>  [559]         NaN         NaN         NaN 0.499748377 0.386027422         NaN #>  [565] 1.513945276         NaN 1.365802843 0.150388023         NaN 0.468691605 #>  [571] 0.241295904         NaN 0.574934123 0.287859665 0.461039522 0.001883107 #>  [577] 1.242989289         NaN         NaN 2.117274716 1.037715031         NaN #>  [583]         NaN 0.554811599 0.895104230 0.699153575 0.610816385 0.235249981 #>  [589] 1.504591325 0.863417804 0.860892111         NaN 2.387297624         NaN #>  [595] 0.898968540         NaN 0.904413132 0.682276362 0.386684345 0.814938482 #>  [601] 0.361291720         NaN 0.474088917 0.765948520         NaN 0.828926949 #>  [607] 0.021218181 1.094737587 1.293079594 1.199076433 0.413616266         NaN #>  [613] 0.632479678         NaN 0.754830144 0.742184744 0.817123503         NaN #>  [619] 0.318466001 1.508187267         NaN 0.863206515         NaN 0.545346286 #>  [625] 0.111979266         NaN 2.837550703 1.767622432 1.508860017         NaN #>  [631]         NaN 1.515081597         NaN 0.365109729 1.829633121 1.727458585 #>  [637]         NaN 1.127976332 0.272496381 1.286697848         NaN 0.651124971 #>  [643] 0.720110977         NaN         NaN         NaN 0.051068368         NaN #>  [649] 1.109970409 0.616008922 0.176933217 1.323149777 0.761473888 0.183538550 #>  [655] 0.716881147 0.656803729 1.067466415 0.940825294         NaN 0.549232695 #>  [661] 1.614139557 0.060761880 0.694762467         NaN 1.085414996         NaN #>  [667]         NaN         NaN 0.915713149         NaN 0.230962285         NaN #>  [673] 0.311562307         NaN 0.926984951 0.672030060 0.128247226 1.488651878 #>  [679] 0.553740558         NaN         NaN         NaN         NaN 0.202215475 #>  [685] 0.180367456 0.233586192         NaN         NaN 0.809580454 1.124948522 #>  [691] 0.122641907         NaN 0.597631339 0.034949035         NaN         NaN #>  [697] 0.688848048 0.635412009         NaN 0.450892984 0.813173279 0.902711488 #>  [703] 0.249044675 0.137800852 0.386376048 0.786642705 0.903477125 0.216080483 #>  [709] 0.014651591 0.735636648 0.701216006         NaN         NaN 2.465594821 #>  [715] 0.588547450 0.040694861 0.352552949 0.679686057 0.743833681         NaN #>  [721] 0.122006435 0.393127277         NaN         NaN         NaN         NaN #>  [727] 0.912823335 4.184469047         NaN 0.757030346 0.318163031 0.685837077 #>  [733]         NaN         NaN 0.357544003 0.297223534 0.643235747         NaN #>  [739] 0.300901402         NaN 0.182745803         NaN 0.510631958 0.031533879 #>  [745]         NaN 0.102039700 0.521467707         NaN 1.108066826 0.862878347 #>  [751] 0.618123836 2.713071087         NaN         NaN 1.257488104 0.347694882 #>  [757]         NaN 0.671025873         NaN 1.041396478 1.029374635         NaN #>  [763]         NaN 2.300672856 0.482595721 0.450810298         NaN 1.185960680 #>  [769] 1.210930131         NaN         NaN 1.368892890 1.687557017 1.418929624 #>  [775] 0.883943015 0.262111490 1.416563234         NaN 1.303967343         NaN #>  [781] 3.147505982 0.893403597         NaN         NaN 2.860234025 1.333476480 #>  [787] 1.233268379         NaN 3.528281123         NaN         NaN 1.292243755 #>  [793]         NaN         NaN 0.566939766 1.218527593         NaN 0.201362102 #>  [799]         NaN 2.026458667 0.998412750 1.491381918 1.825939297 1.436330472 #>  [805] 1.116603535         NaN 0.293999592         NaN 1.015628206 1.272347589 #>  [811] 0.635667270         NaN         NaN 1.467943963 0.392398241 1.728591113 #>  [817]         NaN 2.430438151 0.756188671 0.269307189         NaN 0.192204824 #>  [823] 2.457672251 0.692905057         NaN 0.375798779 0.860661226         NaN #>  [829] 1.485683857 1.476233121         NaN 2.648569316 1.383836862 0.057024154 #>  [835]         NaN         NaN 0.549859674 1.779883702 1.138157172 1.209073015 #>  [841] 1.321466096 0.280636644 1.439958535 1.221713293 1.967879197         NaN #>  [847]         NaN 1.069356359         NaN         NaN 1.098596886         NaN #>  [853] 0.687430828         NaN 1.000235746 1.400486043 0.236954519         NaN #>  [859] 0.914405581         NaN 1.259206614 0.794161851 1.256842341         NaN #>  [865] 1.366014331 0.879832242         NaN         NaN 1.544511359 1.591463861 #>  [871] 0.518727100         NaN         NaN 0.177724741         NaN 0.234378886 #>  [877] 2.241913564 0.129369477 0.159444807         NaN 0.675447679 0.726056561 #>  [883] 0.981752461         NaN 1.999637645 1.039604413         NaN         NaN #>  [889]         NaN 2.303551994 2.359265931 2.270094509         NaN 2.006101743 #>  [895] 1.695833968         NaN 2.460051563         NaN         NaN 0.138207520 #>  [901] 0.153878106         NaN         NaN 0.258691348 0.294262461 0.824086847 #>  [907] 2.639493118 0.358718206 0.408682886 2.547364419         NaN 2.675683007 #>  [913]         NaN 2.327956549         NaN 1.029259855 0.393054231         NaN #>  [919] 0.165790452         NaN 0.572882526 0.328206384 0.587336218 0.693326231 #>  [925] 0.618988570 0.505129224 0.626951636         NaN         NaN         NaN #>  [931] 0.982948927         NaN 1.544821633 0.173672536 2.499904710 1.032958846 #>  [937] 0.066482059         NaN 0.078067234         NaN 0.449616334 0.283202310 #>  [943]         NaN 0.642993737 4.125357088 1.225440021         NaN 1.072436367 #>  [949]         NaN 1.311723872 0.366665981         NaN 0.814938703 2.355315761 #>  [955] 1.621426197 1.446749751 0.910032391         NaN 0.575421592 0.560139241 #>  [961]         NaN 0.302311720 0.289879300 1.357201643         NaN         NaN #>  [967]         NaN 4.546449618         NaN 4.663657917         NaN         NaN #>  [973] 0.141249293 1.884298976 2.036564743 0.343153509 1.711775447         NaN #>  [979]         NaN 0.400716933 1.007394298 0.172583071 0.189177567         NaN #>  [985]         NaN 0.828668006 1.245164156 0.816523789 0.024226635 0.375541533 #>  [991] 0.370036865 0.315830989 1.322978398 0.965509038         NaN 1.431423085 #>  [997] 0.752657875 1.332284336 1.222697228         NaN #> --- #> Residual SD for each sample: #>    [1]           NA           NA           NA           NA 0.0171154723 #>    [6] 0.0158473391           NA           NA           NA           NA #>   [11]           NA           NA           NA           NA           NA #>   [16]           NA           NA           NA 0.0623670808 0.0501413952 #>   [21] 0.0671928676           NA           NA 0.1055195529           NA #>   [26]           NA           NA 0.0196944447           NA 0.0632390513 #>   [31] 0.0837910396           NA           NA           NA 0.0505388581 #>   [36]           NA           NA 0.0475580210           NA           NA #>   [41]           NA           NA 0.1094034557 0.0526312036           NA #>   [46]           NA           NA           NA           NA 0.2178361758 #>   [51]           NA           NA           NA           NA 0.0154160685 #>   [56]           NA 0.3101330462           NA           NA           NA #>   [61]           NA           NA           NA 0.1885055385           NA #>   [66]           NA           NA           NA           NA           NA #>   [71] 0.0083771373           NA 0.0027088134           NA           NA #>   [76]           NA           NA           NA           NA 0.0618274331 #>   [81]           NA           NA           NA           NA           NA #>   [86] 0.1196798517           NA           NA           NA           NA #>   [91]           NA           NA 0.1009323734           NA           NA #>   [96] 0.2305763428           NA           NA 0.1835951837           NA #>  [101] 0.1952629170 0.1376454754           NA 0.0220325751           NA #>  [106]           NA           NA           NA           NA           NA #>  [111]           NA 0.0081745657           NA           NA           NA #>  [116]           NA           NA           NA 0.0229768280 0.2596122947 #>  [121] 0.1751606596 0.0527573615 0.0072092244 0.1612628944           NA #>  [126]           NA 0.0786339326 0.0045126985           NA           NA #>  [131]           NA           NA           NA 0.1334887227           NA #>  [136] 0.1014512696 0.0145410115 0.0372047972           NA           NA #>  [141] 0.0415691574           NA           NA           NA           NA #>  [146]           NA           NA 0.1562482194 0.0112419368 0.0354181931 #>  [151]           NA           NA 0.0373514754           NA           NA #>  [156]           NA 0.2341555621           NA           NA           NA #>  [161] 0.1407962621           NA           NA           NA           NA #>  [166] 0.0073109838 0.0287425869 0.1464108088 0.0004577004           NA #>  [171]           NA           NA 0.0602280554           NA           NA #>  [176]           NA 0.0384398684           NA           NA           NA #>  [181]           NA 0.1582426586 0.1577204890           NA           NA #>  [186] 0.0652438555 0.0147384664 0.1327604673           NA           NA #>  [191] 0.1018241647           NA 0.0032141976 0.2134807632           NA #>  [196]           NA           NA           NA           NA           NA #>  [201]           NA           NA           NA           NA 0.0712228246 #>  [206] 0.2060761475           NA           NA           NA           NA #>  [211]           NA           NA           NA           NA           NA #>  [216] 0.0145987275           NA           NA           NA           NA #>  [221]           NA           NA           NA 0.1302122009 0.1111612343 #>  [226]           NA           NA           NA           NA 0.1092072376 #>  [231]           NA           NA           NA 0.0696269931           NA #>  [236]           NA           NA           NA 0.2127770831 0.0533701324 #>  [241]           NA           NA 0.0878473935           NA           NA #>  [246]           NA           NA           NA           NA           NA #>  [251]           NA           NA           NA           NA           NA #>  [256]           NA           NA           NA           NA 0.0779699860 #>  [261] 0.2098673451           NA 0.0509910778           NA           NA #>  [266]           NA           NA           NA           NA 0.0082187469 #>  [271]           NA           NA           NA           NA 0.0316879019 #>  [276]           NA           NA           NA           NA 0.0995218266 #>  [281]           NA           NA 0.0777723554           NA           NA #>  [286]           NA 0.0345191142           NA           NA           NA #>  [291]           NA           NA           NA           NA 0.0755677859 #>  [296]           NA           NA           NA           NA           NA #>  [301]           NA           NA           NA           NA 0.0974811430 #>  [306] 0.2473969937 0.1070282596           NA           NA 0.2501080376 #>  [311]           NA           NA 0.1030179130           NA 0.0614973215 #>  [316]           NA           NA           NA 0.0468138281 0.1264319869 #>  [321]           NA 0.0938245596           NA           NA           NA #>  [326]           NA           NA           NA           NA 0.0218556368 #>  [331]           NA           NA 0.1805464823           NA           NA #>  [336]           NA           NA           NA           NA 0.0218421390 #>  [341]           NA           NA 0.0315638020 0.0795907997           NA #>  [346]           NA           NA           NA           NA           NA #>  [351]           NA           NA 0.0076599618           NA           NA #>  [356] 0.1897475357 0.0107889322           NA 0.0903125289           NA #>  [361]           NA           NA 0.0919528110           NA           NA #>  [366]           NA           NA 0.0683112453           NA           NA #>  [371]           NA           NA           NA           NA           NA #>  [376]           NA           NA 0.0536573986           NA 0.1567149491 #>  [381] 0.0182879143           NA           NA           NA           NA #>  [386]           NA           NA           NA 0.1066057426           NA #>  [391] 0.2201342341 0.0951902925           NA           NA           NA #>  [396]           NA           NA           NA           NA           NA #>  [401]           NA           NA           NA           NA           NA #>  [406]           NA           NA           NA           NA           NA #>  [411]           NA           NA 0.0895035848 0.1050829623 0.1774045437 #>  [416]           NA           NA 0.0376346002           NA           NA #>  [421]           NA 0.0243164313           NA 0.0698986349           NA #>  [426] 0.0400186158           NA           NA           NA           NA #>  [431]           NA           NA 0.1036875821           NA 0.0412060448 #>  [436]           NA           NA           NA           NA           NA #>  [441]           NA           NA 0.0272994371           NA           NA #>  [446]           NA           NA           NA 0.0997877475           NA #>  [451]           NA           NA           NA           NA           NA #>  [456] 0.0256287314 0.0433296573           NA 0.0112333470           NA #>  [461]           NA           NA 0.0193224073 0.0462379471           NA #>  [466] 0.0908316305           NA 0.1068107672           NA           NA #>  [471]           NA 0.1128441006           NA           NA           NA #>  [476]           NA           NA 0.0914857907           NA 0.0473929680 #>  [481]           NA           NA           NA           NA           NA #>  [486]           NA 0.0513497468 0.1030234453 0.0303100265           NA #>  [491]           NA           NA           NA           NA 0.0001835705 #>  [496]           NA 0.0214282806 0.2375034180           NA           NA #>  [501] 0.2607610345           NA 0.1058833917           NA 0.2106705660 #>  [506]           NA           NA           NA           NA           NA #>  [511] 0.0994688989 0.0383744629           NA           NA           NA #>  [516]           NA           NA 0.0720512361 0.0401027529           NA #>  [521] 0.0480609858           NA           NA           NA           NA #>  [526]           NA           NA 0.0517415914           NA 0.0179497038 #>  [531]           NA           NA           NA 0.0218446282           NA #>  [536]           NA           NA           NA           NA           NA #>  [541] 0.0206326084           NA           NA           NA           NA #>  [546]           NA           NA           NA 0.0308707100 0.0886034444 #>  [551]           NA 0.1305748956           NA           NA 0.1572416857 #>  [556] 0.0809145362           NA           NA           NA           NA #>  [561]           NA           NA 0.0948822833           NA           NA #>  [566]           NA           NA           NA           NA           NA #>  [571] 0.0381776769           NA           NA           NA           NA #>  [576]           NA 0.0658491386           NA           NA           NA #>  [581] 0.1055279054           NA           NA           NA 0.0655905098 #>  [586]           NA           NA 0.1255736831           NA 0.0492012308 #>  [591]           NA           NA           NA           NA           NA #>  [596]           NA           NA           NA 0.0947584203           NA #>  [601]           NA           NA 0.0032752950 0.1482277903           NA #>  [606] 0.0843463328           NA           NA 0.0178256680 0.1718526588 #>  [611]           NA           NA           NA           NA 0.0220050718 #>  [616] 0.2402639354           NA           NA           NA           NA #>  [621]           NA 0.0164261129           NA 0.0381759889           NA #>  [626]           NA 0.1645839828           NA           NA           NA #>  [631]           NA 0.0822951220           NA 0.2428995995           NA #>  [636]           NA           NA           NA 0.0530087025 0.1153917819 #>  [641]           NA           NA           NA           NA           NA #>  [646]           NA           NA           NA           NA           NA #>  [651] 0.0342214667           NA           NA 0.0625078644           NA #>  [656] 0.0453761886 0.0154623254           NA           NA           NA #>  [661] 0.0718482525           NA           NA           NA 0.0831091485 #>  [666]           NA           NA           NA           NA           NA #>  [671]           NA           NA 0.0307869892           NA 0.0270529471 #>  [676]           NA           NA           NA           NA           NA #>  [681]           NA           NA           NA 0.0402544249           NA #>  [686]           NA           NA           NA           NA 0.0892174913 #>  [691] 0.0391950871           NA 0.0753923797           NA           NA #>  [696]           NA           NA 0.0711444378           NA 0.0384711960 #>  [701]           NA           NA           NA 0.0072219404           NA #>  [706]           NA 0.0090293655 0.0629643779           NA           NA #>  [711]           NA           NA           NA 0.0114785858 0.1263871569 #>  [716]           NA           NA           NA           NA           NA #>  [721]           NA 0.1641248663           NA           NA           NA #>  [726]           NA           NA           NA           NA 0.2860518487 #>  [731]           NA           NA           NA           NA 0.1026633050 #>  [736]           NA           NA           NA 0.2194112273           NA #>  [741]           NA           NA 0.1427785232           NA           NA #>  [746]           NA           NA           NA 0.1032520952           NA #>  [751] 0.0551147057           NA           NA           NA 0.0579656031 #>  [756]           NA           NA           NA           NA           NA #>  [761] 0.0011014079           NA           NA           NA 0.0758199206 #>  [766]           NA           NA           NA           NA           NA #>  [771]           NA 0.0383555093           NA           NA           NA #>  [776]           NA 0.0670658064           NA           NA           NA #>  [781]           NA 0.1193936223           NA           NA           NA #>  [786] 0.0951916506 0.0760853373           NA           NA           NA #>  [791]           NA           NA           NA           NA           NA #>  [796] 0.0586987033           NA           NA           NA           NA #>  [801]           NA 0.0343150273           NA 0.0562114547           NA #>  [806]           NA           NA           NA 0.0256030545           NA #>  [811] 0.0354468836           NA           NA 0.0680229430           NA #>  [816]           NA           NA           NA           NA           NA #>  [821]           NA           NA           NA           NA           NA #>  [826]           NA 0.0373107092           NA           NA           NA #>  [831]           NA           NA 0.0293420962 0.1469296756           NA #>  [836]           NA 0.0589767098           NA           NA           NA #>  [841] 0.0702147232           NA 0.1002308404           NA           NA #>  [846]           NA           NA           NA           NA           NA #>  [851]           NA           NA 0.0658603060           NA 0.1556921582 #>  [856]           NA 0.0747929557           NA 0.1366661999           NA #>  [861] 0.1049839386 0.0281475178           NA           NA           NA #>  [866] 0.0581785289           NA           NA 0.1844665397           NA #>  [871]           NA           NA           NA 0.0607447703           NA #>  [876]           NA 0.0113536171           NA           NA           NA #>  [881]           NA           NA           NA           NA           NA #>  [886] 0.1586546030           NA           NA           NA           NA #>  [891] 0.0461022831           NA           NA           NA           NA #>  [896]           NA           NA           NA           NA           NA #>  [901] 0.0448467737           NA           NA           NA           NA #>  [906] 0.0356350998           NA 0.0421612190           NA 0.0411326094 #>  [911]           NA           NA           NA           NA           NA #>  [916] 0.0892377011           NA           NA 0.0288050769           NA #>  [921] 0.0052520574 0.0444277521           NA 0.0641534856           NA #>  [926]           NA 0.0428396078           NA           NA           NA #>  [931]           NA           NA 0.0774072302           NA           NA #>  [936]           NA           NA           NA 0.1730317926           NA #>  [941] 0.1329752242 0.0757036052           NA           NA           NA #>  [946] 0.0422357717           NA           NA           NA 0.0713975658 #>  [951] 0.3086777665           NA           NA 0.0510624786           NA #>  [956]           NA           NA           NA 0.0832205547           NA #>  [961]           NA 0.0816891075           NA 0.1778644632           NA #>  [966]           NA           NA           NA           NA 0.0345896713 #>  [971]           NA           NA           NA           NA 0.1400977251 #>  [976]           NA           NA           NA           NA 0.0361165793 #>  [981] 0.0199215171           NA           NA           NA           NA #>  [986] 0.0526988376           NA           NA           NA           NA #>  [991]           NA 0.1091467964           NA 0.0984162103           NA #>  [996] 0.0887187260 0.0258248632 0.1057815133           NA           NA"},{"path":"https://nanx.me/enpls/reference/rgb2alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Add transparency level to hex colors ‚Äî rgb2alpha","title":"Add transparency level to hex colors ‚Äî rgb2alpha","text":"Add transparency level hex colors","code":""},{"path":"https://nanx.me/enpls/reference/rgb2alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add transparency level to hex colors ‚Äî rgb2alpha","text":"","code":"rgb2alpha(raw_col, alpha)"},{"path":"https://nanx.me/enpls/reference/rgb2alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add transparency level to hex colors ‚Äî rgb2alpha","text":"Color hex value (transparency)","code":""},{"path":[]},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-6-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 6.1.1","text":"Use GitHub Actions workflow build pkgdown website (#2). Fix R CMD check notes r-devel invalid file URIs README.md (#2).","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-61","dir":"Changelog","previous_headings":"","what":"enpls 6.1","title":"enpls 6.1","text":"CRAN release: 2019-05-18","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-6-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 6.1","text":"Switched tidyverse code style. Updated vignette style. Updated GitHub repository links due handle change.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-60","dir":"Changelog","previous_headings":"","what":"enpls 6.0","title":"enpls 6.0","text":"CRAN release: 2018-05-13","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-6-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 6.0","text":"New URL documentation website: https://nanx./enpls/.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-59","dir":"Changelog","previous_headings":"","what":"enpls 5.9","title":"enpls 5.9","text":"CRAN release: 2017-09-27","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-5-9","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 5.9","text":"Use system font stack instead Google Fonts vignettes avoid pandoc SSL issue.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-58","dir":"Changelog","previous_headings":"","what":"enpls 5.8","title":"enpls 5.8","text":"CRAN release: 2017-03-25","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-5-8","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 5.8","text":"Updated gallery images README.md. Better code indentation style. HTTPS enabled website.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-57","dir":"Changelog","previous_headings":"","what":"enpls 5.7","title":"enpls 5.7","text":"CRAN release: 2017-01-05","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-5-7","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 5.7","text":"New documentation website generated pkgdown, full set function documentation vignettes available. Added Windows continuous integration support using AppVeyor.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-56","dir":"Changelog","previous_headings":"","what":"enpls 5.6","title":"enpls 5.6","text":"CRAN release: 2016-11-26","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"new-features-5-6","dir":"Changelog","previous_headings":"","what":"New Features","title":"enpls 5.6","text":"New argument cvfolds now available applicable functions finer control cross-validation folds automatic parameter selection PLS/SPLS model.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-5-6","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 5.6","text":"Critical implementation improvements processing case argument maxcomp = NULL (maximum number components specified explicitly) enpls. functions. Now correctly determine maximum number components use, considering cross-validation special cases n < p.¬†Thanks Dr.¬†-Wu Lin feedback.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-50","dir":"Changelog","previous_headings":"","what":"enpls 5.0","title":"enpls 5.0","text":"CRAN release: 2016-10-25","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"new-features-5-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"enpls 5.0","text":"New functions enpls.ad() enspls.ad() PLS sparse PLS model applicability domain evaluation. New plot functions plot.enpls.ad() plot.enpls.ad() exploring model applicability domain evaluation results traditional static plot support interactive plot support. New argument alpha available setting transparency level (reduce overplotting) plot.cv.enpls, plot.enpls.od, plot.cv.enspls, plot.enspls.od.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-45","dir":"Changelog","previous_headings":"","what":"enpls 4.5","title":"enpls 4.5","text":"CRAN release: 2016-09-15","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-4-5","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 4.5","text":"Reduced memory footprints enpls.fit() enspls.fit().","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"new-features-4-5","dir":"Changelog","previous_headings":"","what":"New Features","title":"enpls 4.5","text":"New functions enpls.rmse(), enpls.mae(), enpls.rmsle() computing RMSE, MAE, RMSLE.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-40","dir":"Changelog","previous_headings":"","what":"enpls 4.0","title":"enpls 4.0","text":"CRAN release: 2016-08-29","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-4-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 4.0","text":"General improvements function documentation. Changing argument name MCtimes reptimes. Changing option name \"bootstrap\" \"boot\".","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-30","dir":"Changelog","previous_headings":"","what":"enpls 3.0","title":"enpls 3.0","text":"CRAN release: 2016-06-29","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"new-features-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"enpls 3.0","text":"Add sparse partial least squares regression.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-3-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 3.0","text":"Improvements documentation; rewritten vignette.","code":""},{"path":[]},{"path":"https://nanx.me/enpls/news/index.html","id":"new-features-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"enpls 2.0","text":"New project website.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"improvements-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"enpls 2.0","text":"General improvements plotting functions.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"bug-fixes-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"enpls 2.0","text":"Fixed major bugs cv.enpls plotting functions. Many bug fixes.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-11","dir":"Changelog","previous_headings":"","what":"enpls 1.1","title":"enpls 1.1","text":"CRAN release: 2015-11-27","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"bug-fixes-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"enpls 1.1","text":"Fixed bugs automatic component number selection make intercept-model rank best. Thanks test patch Max Kuhn <max.kuhn@pfizer.com>.","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"enpls-10","dir":"Changelog","previous_headings":"","what":"enpls 1.0","title":"enpls 1.0","text":"CRAN release: 2014-10-03","code":""},{"path":"https://nanx.me/enpls/news/index.html","id":"new-features-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"enpls 1.0","text":"initial release","code":""}]
